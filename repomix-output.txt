This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-09-30T10:05:01.730Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
access_control/__init__.py
access_control/templates/access_control/index.html
app.py
custom_admin/__init__.py
custom_admin/templates/admin/base.html
custom_admin/templates/admin/dashboard.html
custom_admin/templates/admin/entity_data_view.html
custom_admin/templates/admin/entity_data.html
custom_admin/templates/admin/model_detail.html
custom_admin/templates/admin/model_form.html
custom_admin/templates/admin/model_list.html
entity_designer/__init__.py
entity_designer/templates/entity_designer/base.html
entity_designer/templates/entity_designer/index.html
models.py
setup.py
setup1.py
templates/auth/login.html
templates/base.html
templates/dashboard/main.html
templates/entities/entity_detail.html
templates/entities/entity_form.html
templates/entities/entity_list.html
templates/entities/field_render.html
templates/errors/404.html
templates/errors/500.html
templates/modules/module_view.html

================================================================
Files
================================================================

================
File: access_control/__init__.py
================
"""
Access Control Module for Port Management System
Handles user permissions and role assignments
"""

from flask import Blueprint, render_template, request, jsonify, flash, redirect, url_for
from flask_login import login_required, current_user
from models import *

access_control_bp = Blueprint('access_control', __name__, 
                             url_prefix='/access-control',
                             template_folder='templates')

@access_control_bp.route('/')
@login_required
def index():
    """Main access control interface"""
    roles = Role.query.filter_by(is_active=True).order_by(Role.name).all()
    entity_types = EntityType.query.filter_by(is_active=True).order_by(EntityType.name).all()
    users = User.query.filter_by(is_active=True).order_by(User.username).all()
    
    # Include module information in entity types
    entity_data = []
    for entity in entity_types:
        entity_data.append({
            'id': entity.id,
            'name': entity.name,
            'module': {
                'name': entity.module.name,
                'application': entity.module.application.name
            }
        })
    
    # Count total permissions
    total_permissions = EntityPermission.query.count()
    
    return render_template('access_control/index.html',
                         roles=roles,
                         entity_types=entity_data,
                         users=users,
                         total_permissions=total_permissions)

@access_control_bp.route('/role/<int:role_id>/permissions')
@login_required
def get_role_permissions(role_id):
    """Get all permissions for a role"""
    permissions = EntityPermission.query.filter_by(role_id=role_id).all()
    
    result = []
    for perm in permissions:
        result.append({
            'id': perm.id,
            'entity_type_id': perm.entity_type_id,
            'entity_type_name': perm.entity_type.name,
            'can_read': perm.can_read,
            'can_create': perm.can_create,
            'can_update': perm.can_update,
            'can_delete': perm.can_delete
        })
    
    return jsonify(result)

@access_control_bp.route('/role/<int:role_id>/permission', methods=['POST'])
@login_required
def update_permission(role_id):
    """Update or create permission for a role"""
    data = request.json
    entity_type_id = data.get('entity_type_id')
    
    try:
        # Find or create permission
        permission = EntityPermission.query.filter_by(
            role_id=role_id,
            entity_type_id=entity_type_id
        ).first()
        
        if not permission:
            permission = EntityPermission(
                role_id=role_id,
                entity_type_id=entity_type_id
            )
            db.session.add(permission)
        
        # Update permissions
        permission.can_read = data.get('can_read', False)
        permission.can_create = data.get('can_create', False)
        permission.can_update = data.get('can_update', False)
        permission.can_delete = data.get('can_delete', False)
        
        db.session.commit()
        
        return jsonify({'success': True, 'message': 'Permission updated successfully'})
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'error': str(e)}), 500

@access_control_bp.route('/user/<int:user_id>/roles')
@login_required  
def get_user_roles(user_id):
    """Get roles assigned to a user"""
    user = User.query.get_or_404(user_id)
    roles = [{'id': ur.role.id, 'name': ur.role.name} for ur in user.user_roles]
    return jsonify(roles)

@access_control_bp.route('/user/<int:user_id>/assign-role', methods=['POST'])
@login_required
def assign_role(user_id):
    """Assign role to user"""
    data = request.json
    role_id = data.get('role_id')
    
    try:
        # Check if already assigned
        existing = UserRole.query.filter_by(user_id=user_id, role_id=role_id).first()
        if existing:
            return jsonify({'success': False, 'error': 'Role already assigned'}), 400
        
        user_role = UserRole(user_id=user_id, role_id=role_id)
        db.session.add(user_role)
        db.session.commit()
        
        return jsonify({'success': True, 'message': 'Role assigned successfully'})
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'error': str(e)}), 500

@access_control_bp.route('/user/<int:user_id>/remove-role/<int:role_id>', methods=['DELETE'])
@login_required
def remove_role(user_id, role_id):
    """Remove role from user"""
    try:
        user_role = UserRole.query.filter_by(user_id=user_id, role_id=role_id).first()
        if user_role:
            db.session.delete(user_role)
            db.session.commit()
            return jsonify({'success': True, 'message': 'Role removed successfully'})
        else:
            return jsonify({'success': False, 'error': 'Role assignment not found'}), 404
            
    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'error': str(e)}), 500

@access_control_bp.route('/roles/create', methods=['POST'])
@login_required
def create_role():
    """Create a new role"""
    data = request.json
    
    try:
        role = Role(
            code=data.get('code'),
            name=data.get('name'),
            description=data.get('description'),
            is_system=False,
            is_active=True
        )
        db.session.add(role)
        db.session.commit()
        
        return jsonify({'success': True, 'role_id': role.id, 'message': 'Role created successfully'})
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'error': str(e)}), 500

================
File: access_control/templates/access_control/index.html
================
{% extends "base.html" %}

{% block title %}Access Control Management - Port Management System{% endblock %}

{% block content %}
<div class="content-header">
    <h1 class="content-title">
        <span class="material-symbols-outlined" style="margin-right: 8px;">shield</span>
        Access Control Management
    </h1>
    <p class="page-subtitle">Manage user roles and entity permissions</p>
</div>

<div class="row">
    <!-- Role Permissions Panel -->
    <div class="col-md-7">
        <div class="card-sap">
            <div class="card-header">
                <span class="material-symbols-outlined" style="margin-right: 5px;">admin_panel_settings</span>
                Role Permissions
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label class="form-label">Select Role:</label>
                    <select id="roleSelect" class="form-control">
                        <option value="">Choose a role...</option>
                        {% for role in roles %}
                        <option value="{{ role.id }}">{{ role.name }}</option>
                        {% endfor %}
                    </select>
                </div>
                
                <div id="permissionsTable" style="display: none;">
                    <div class="table-responsive">
                        <table class="table table-sap table-sm">
                            <thead>
                                <tr>
                                    <th>Entity Type</th>
                                    <th style="width: 60px; text-align: center;">Read</th>
                                    <th style="width: 60px; text-align: center;">Create</th>
                                    <th style="width: 60px; text-align: center;">Update</th>
                                    <th style="width: 60px; text-align: center;">Delete</th>
                                </tr>
                            </thead>
                            <tbody id="permissionsBody"></tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- User Role Assignments Panel -->
    <div class="col-md-5">
        <div class="card-sap">
            <div class="card-header">
                <span class="material-symbols-outlined" style="margin-right: 5px;">people</span>
                User Role Assignments
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label class="form-label">Select User:</label>
                    <select id="userSelect" class="form-control">
                        <option value="">Choose a user...</option>
                        {% for user in users %}
                        <option value="{{ user.id }}">{{ user.full_name or user.username }} ({{ user.email }})</option>
                        {% endfor %}
                    </select>
                </div>
                
                <div id="userRolesSection" style="display: none;">
                    <div class="mb-3">
                        <label class="form-label">Assign New Role:</label>
                        <div class="input-group">
                            <select id="newRoleSelect" class="form-control">
                                <option value="">Choose a role...</option>
                                {% for role in roles %}
                                <option value="{{ role.id }}">{{ role.name }}</option>
                                {% endfor %}
                            </select>
                            <button class="btn-sap btn-primary" onclick="assignRoleToUser()">
                                <span class="material-symbols-outlined" style="font-size: 14px;">add</span>
                                Assign
                            </button>
                        </div>
                    </div>
                    
                    <div>
                        <label class="form-label">Current Roles:</label>
                        <div id="userRolesList"></div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Quick Stats -->
        <div class="card-sap mt-3">
            <div class="card-header">
                <span class="material-symbols-outlined" style="margin-right: 5px;">analytics</span>
                Statistics
            </div>
            <div class="card-body">
                <div class="row text-center">
                    <div class="col-6 mb-2">
                        <div style="font-size: 20px; font-weight: 600; color: var(--sap-blue);">{{ roles|length }}</div>
                        <small class="text-muted">Total Roles</small>
                    </div>
                    <div class="col-6 mb-2">
                        <div style="font-size: 20px; font-weight: 600; color: #28a745;">{{ entity_types|length }}</div>
                        <small class="text-muted">Entity Types</small>
                    </div>
                    <div class="col-6">
                        <div style="font-size: 20px; font-weight: 600; color: #ffc107;">{{ users|length }}</div>
                        <small class="text-muted">Active Users</small>
                    </div>
                    <div class="col-6">
                        <div style="font-size: 20px; font-weight: 600; color: #17a2b8;">{{ total_permissions }}</div>
                        <small class="text-muted">Permissions Set</small>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

{% endblock %}

{% block extra_js %}
<script>
let currentRoleId = null;
let currentUserId = null;
let allEntityTypes = {{ entity_types | tojson }};

// Role Permissions Management
document.getElementById('roleSelect').addEventListener('change', async function() {
    currentRoleId = this.value;
    if (!currentRoleId) {
        document.getElementById('permissionsTable').style.display = 'none';
        return;
    }
    
    try {
        const response = await fetch(`/access-control/role/${currentRoleId}/permissions`);
        const permissions = await response.json();
        
        const tbody = document.getElementById('permissionsBody');
        tbody.innerHTML = '';
        
        allEntityTypes.forEach(entity => {
            const perm = permissions.find(p => p.entity_type_id === entity.id) || {
                can_read: false,
                can_create: false,
                can_update: false,
                can_delete: false
            };
            
            tbody.innerHTML += `
                <tr>
                    <td><strong>${entity.name}</strong><br><small class="text-muted">${entity.module.name}</small></td>
                    <td style="text-align: center;">
                        <input type="checkbox" ${perm.can_read ? 'checked' : ''} 
                               onchange="updatePermission(${currentRoleId}, ${entity.id}, 'can_read', this.checked)">
                    </td>
                    <td style="text-align: center;">
                        <input type="checkbox" ${perm.can_create ? 'checked' : ''} 
                               onchange="updatePermission(${currentRoleId}, ${entity.id}, 'can_create', this.checked)">
                    </td>
                    <td style="text-align: center;">
                        <input type="checkbox" ${perm.can_update ? 'checked' : ''} 
                               onchange="updatePermission(${currentRoleId}, ${entity.id}, 'can_update', this.checked)">
                    </td>
                    <td style="text-align: center;">
                        <input type="checkbox" ${perm.can_delete ? 'checked' : ''} 
                               onchange="updatePermission(${currentRoleId}, ${entity.id}, 'can_delete', this.checked)">
                    </td>
                </tr>
            `;
        });
        
        document.getElementById('permissionsTable').style.display = 'block';
    } catch (error) {
        console.error('Error loading permissions:', error);
        showToast('Error loading permissions', 'error');
    }
});

async function updatePermission(roleId, entityTypeId, field, value) {
    try {
        // Get current permissions for this entity
        const currentPerms = await fetch(`/access-control/role/${roleId}/permissions`).then(r => r.json());
        const existingPerm = currentPerms.find(p => p.entity_type_id === entityTypeId) || {};
        
        // Build the complete permission object
        const permData = {
            entity_type_id: entityTypeId,
            can_read: existingPerm.can_read || false,
            can_create: existingPerm.can_create || false,
            can_update: existingPerm.can_update || false,
            can_delete: existingPerm.can_delete || false
        };
        
        // Update the specific field
        permData[field] = value;
        
        const response = await fetch(`/access-control/role/${roleId}/permission`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': getCSRFToken()
            },
            body: JSON.stringify(permData)
        });
        
        const data = await response.json();
        if (data.success) {
            showToast('Permission updated successfully', 'success');
        } else {
            showToast(data.error || 'Failed to update permission', 'error');
        }
    } catch (error) {
        console.error('Error updating permission:', error);
        showToast('Error updating permission', 'error');
    }
}

// User Role Management
document.getElementById('userSelect').addEventListener('change', async function() {
    currentUserId = this.value;
    if (!currentUserId) {
        document.getElementById('userRolesSection').style.display = 'none';
        return;
    }
    
    await loadUserRoles(currentUserId);
    document.getElementById('userRolesSection').style.display = 'block';
});

async function loadUserRoles(userId) {
    try {
        const response = await fetch(`/access-control/user/${userId}/roles`);
        const roles = await response.json();
        
        const rolesList = document.getElementById('userRolesList');
        if (roles.length === 0) {
            rolesList.innerHTML = '<p class="text-muted" style="font-size: 11px;">No roles assigned</p>';
            return;
        }
        
        rolesList.innerHTML = roles.map(role => `
            <div class="d-flex justify-content-between align-items-center mb-2 p-2" style="background: #f8f9fa; border-radius: 4px;">
                <span style="font-size: 12px;"><strong>${role.name}</strong></span>
                <button class="btn-sap" style="padding: 2px 6px; color: #dc3545;" 
                        onclick="removeRoleFromUser(${userId}, ${role.id})">
                    <span class="material-symbols-outlined" style="font-size: 12px;">close</span>
                </button>
            </div>
        `).join('');
    } catch (error) {
        console.error('Error loading user roles:', error);
        showToast('Error loading user roles', 'error');
    }
}

async function assignRoleToUser() {
    const roleId = document.getElementById('newRoleSelect').value;
    if (!roleId || !currentUserId) {
        showToast('Please select a role', 'warning');
        return;
    }
    
    try {
        const response = await fetch(`/access-control/user/${currentUserId}/assign-role`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': getCSRFToken()
            },
            body: JSON.stringify({ role_id: roleId })
        });
        
        const data = await response.json();
        if (data.success) {
            showToast('Role assigned successfully', 'success');
            document.getElementById('newRoleSelect').value = '';
            await loadUserRoles(currentUserId);
        } else {
            showToast(data.error || 'Failed to assign role', 'error');
        }
    } catch (error) {
        console.error('Error assigning role:', error);
        showToast('Error assigning role', 'error');
    }
}

async function removeRoleFromUser(userId, roleId) {
    if (!confirm('Are you sure you want to remove this role from the user?')) {
        return;
    }
    
    try {
        const response = await fetch(`/access-control/user/${userId}/remove-role/${roleId}`, {
            method: 'DELETE',
            headers: {
                'X-CSRFToken': getCSRFToken()
            }
        });
        
        const data = await response.json();
        if (data.success) {
            showToast('Role removed successfully', 'success');
            await loadUserRoles(userId);
        } else {
            showToast(data.error || 'Failed to remove role', 'error');
        }
    } catch (error) {
        console.error('Error removing role:', error);
        showToast('Error removing role', 'error');
    }
}
</script>

<style>
    .table-sap input[type="checkbox"] {
        cursor: pointer;
        width: 16px;
        height: 16px;
    }
    
    .table-sap tbody tr:hover {
        background-color: var(--sap-light-blue);
    }
</style>
{% endblock %}

================
File: app.py
================
from flask import Flask, render_template, request, redirect, url_for, flash, jsonify, session
from flask_login import LoginManager, login_user, login_required, logout_user, current_user
from flask_wtf.csrf import CSRFProtect
from werkzeug.security import generate_password_hash, check_password_hash
from datetime import datetime, timedelta
import os
import json

# Import models and admin views
from models import *

# Import custom admin
from custom_admin import admin_bp, AdminConfig, AdminUtils
from entity_designer import entity_designer_bp
from access_control import access_control_bp

# Create Flask application
app = Flask(__name__)
app.config['SECRET_KEY'] = 'your-secret-key-change-in-production'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///port_management.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# Initialize extensions
db.init_app(app)
csrf = CSRFProtect(app)
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'
login_manager.login_message = 'Please log in to access this page.'

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

# ===========================================
# CSRF TOKEN HELPER
# ===========================================

from flask_wtf.csrf import generate_csrf

@app.context_processor
def inject_csrf_token():
    """Make CSRF token available in all templates"""
    return dict(csrf_token=generate_csrf)

@app.context_processor
def inject_permissions():
    """Inject permission checker into all templates"""
    def has_permission(entity_type_id, permission_type):
        if not current_user.is_authenticated:
            return False
        perms = get_user_permissions(current_user.id, entity_type_id)
        return perms.get(f'can_{permission_type.lower()}', False)
    
    def get_permissions(entity_type_id):
        if not current_user.is_authenticated:
            return {'can_read': False, 'can_create': False, 'can_update': False, 'can_delete': False}
        return get_user_permissions(current_user.id, entity_type_id)
    
    return {
        'has_permission': has_permission,
        'get_permissions': get_permissions
    }

# ===========================================
# CUSTOM ADMIN INTEGRATION
# ===========================================

# Register the custom admin blueprint
app.register_blueprint(admin_bp)
app.register_blueprint(entity_designer_bp)
app.register_blueprint(access_control_bp)
# Add template filters for admin
@app.template_filter('get_display_value')
def get_display_value_filter(obj, field_name):
    """Template filter to get display value for any field"""
    return AdminUtils.get_display_value(obj, field_name)

# Add context processor for admin navigation
@app.context_processor  
def inject_admin_navigation():
    """Inject admin navigation for admin routes only"""
    if request.endpoint and request.endpoint.startswith('custom_admin.'):
        return {
            'navigation': AdminConfig.get_navigation_structure(),
            'get_display_value': AdminUtils.get_display_value
        }
    return {}

# ===========================================
# INITIALIZATION FUNCTIONS
# ===========================================

def create_admin_user():
    """Create admin user if it doesn't exist"""
    try:
        admin_user = User.query.filter_by(username='admin').first()
        if not admin_user:
            # Create admin role first
            admin_role = Role.query.filter_by(code='ADMIN').first()
            if not admin_role:
                admin_role = Role(
                    code='ADMIN',
                    name='Administrator',
                    description='System administrator with full access',
                    is_system=True,
                    is_active=True
                )
                db.session.add(admin_role)
                db.session.flush()
            
            # Create admin user
            admin_user = User(
                username='admin',
                email='admin@portmgmt.com',
                first_name='System',
                last_name='Administrator',
                password=generate_password_hash('admin123'),
                is_active=True
            )
            db.session.add(admin_user)
            db.session.flush()
            
            # Assign admin role
            user_role = UserRole(user_id=admin_user.id, role_id=admin_role.id)
            db.session.add(user_role)
            
            db.session.commit()
            print("Admin user created: username='admin', password='admin123'")
        else:
            print("Admin user already exists")
            
    except Exception as e:
        db.session.rollback()
        print(f"Error creating admin user: {e}")
        raise e

def initialize_app():
    """Initialize the application"""
    try:
        # Create database tables
        db.create_all()
        
        # Create admin user
        create_admin_user()
        
        # Create sample data if needed

            
        print("Application initialized successfully!")
        print("Access main app at: http://localhost:5000/")
        print("Access admin panel at: http://localhost:5000/custom-admin/")
            
    except Exception as e:
        print(f"Error during initialization: {e}")

# ===========================================
# AUTHENTICATION ROUTES
# ===========================================

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        
        user = User.query.filter_by(username=username).first()
        
        if user and check_password_hash(user.password, password):
            login_user(user)
            user.last_login = datetime.utcnow()
            db.session.commit()
            
            next_page = request.args.get('next')
            return redirect(next_page) if next_page else redirect(url_for('dashboard'))
        else:
            flash('Invalid username or password', 'error')
    
    return render_template('auth/login.html')

@app.route('/logout')
@login_required
def logout():
    logout_user()
    flash('You have been logged out successfully', 'success')
    return redirect(url_for('login'))

# ===========================================
# MAIN DASHBOARD ROUTES
# ===========================================

@app.route('/')
@login_required
def dashboard():
    """Main dashboard with SAP-like interface"""
    # Get user's favorite modules
    favorite_modules_query = db.session.query(UserFavoriteModule, Module).join(
        Module, UserFavoriteModule.module_id == Module.id
    ).filter(
        UserFavoriteModule.user_id == current_user.id
    ).order_by(UserFavoriteModule.order_index).all()
    
    # Extract just the modules from the query result
    favorite_modules = [fm[1] for fm in favorite_modules_query]
    
    # Get all applications and their modules
    applications = Application.query.filter_by(is_active=True).order_by(Application.order_index).all()
    
    # Get recent activities (placeholder for now)
    recent_activities = []
    
    return render_template('dashboard/main.html', 
                         favorite_modules=favorite_modules,
                         applications=applications,
                         recent_activities=recent_activities)

@app.route('/module/<int:module_id>')
@login_required
def module_view(module_id):
    """Display module with its entity types - filtered by permissions"""
    module = Module.query.get_or_404(module_id)
    
    # Check if user can access this module
    if not can_access_module(current_user.id, module_id):
        flash('You do not have permission to access this module', 'error')
        return redirect(url_for('dashboard'))
    
    # Get entity types user has read access to
    accessible_entities = get_accessible_entity_types_for_module(current_user.id, module_id)
    
    # Get user's favorite modules
    favorite_modules_query = db.session.query(Module).join(UserFavoriteModule).filter(
        UserFavoriteModule.user_id == current_user.id
    ).all()
    
    return render_template('modules/module_view.html', 
                         module=module, 
                         entity_types=accessible_entities,
                         favorite_modules=favorite_modules_query)


# ===========================================
# ENTITY MANAGEMENT ROUTES
# ===========================================

def process_form_data(form_fields, request_form):
    """Process form data with proper type conversion and validation"""
    attribute_values = {}
    
    for field in form_fields:
        field_name = f"attr_{field.attribute_definition.code}"
        value = request_form.get(field_name)
        
        # Skip processing if field is not visible or editable
        if not field.is_visible:
            continue
            
        # Handle empty values
        if not value or value.strip() == '':
            # Only set None if field is not required
            if not (field.is_required or field.attribute_definition.is_required):
                attribute_values[field.attribute_definition.code] = None
            continue
        
        # Process based on data type
        try:
            if field.attribute_definition.data_type in [DataTypeEnum.INT, DataTypeEnum.BIGINT]:
                attribute_values[field.attribute_definition.code] = int(value)
            elif field.attribute_definition.data_type == DataTypeEnum.DECIMAL:
                attribute_values[field.attribute_definition.code] = float(value)
            elif field.attribute_definition.data_type == DataTypeEnum.BOOLEAN:
                attribute_values[field.attribute_definition.code] = value.lower() in ['true', '1', 'yes', 'on']
            elif field.attribute_definition.data_type in [DataTypeEnum.DATE, DataTypeEnum.DATETIME]:
                if value:
                    # Handle both date and datetime formats
                    if 'T' in value:
                        attribute_values[field.attribute_definition.code] = datetime.strptime(value, '%Y-%m-%dT%H:%M')
                    else:
                        attribute_values[field.attribute_definition.code] = datetime.strptime(value, '%Y-%m-%d')
            else:
                # VARCHAR, TEXT, and other string types
                attribute_values[field.attribute_definition.code] = value.strip()
                
        except (ValueError, TypeError) as e:
            print(f"Error converting field {field.attribute_definition.code} with value '{value}': {e}")
            # For conversion errors, either skip or set to None
            if not (field.is_required or field.attribute_definition.is_required):
                attribute_values[field.attribute_definition.code] = None
            else:
                raise ValueError(f"Invalid value for {field.attribute_definition.name}: {value}")
    
    return attribute_values

@app.route('/entity/<int:entity_type_id>')
@login_required
def entity_list(entity_type_id):
    """Display list of entity instances"""
    entity_type = EntityType.query.get_or_404(entity_type_id)
    
    # Check read permission
    if not check_user_permissions(current_user.id, entity_type_id, 'READ'):
        flash('You do not have permission to view this entity', 'error')
        return redirect(url_for('dashboard'))
    
    list_form = FormDefinition.query.filter_by(
        entity_type_id=entity_type_id,
        form_type=FormTypeEnum.LIST,
        is_active=True
    ).first()
    
    if not list_form:
        flash('No list form configured for this entity type', 'error')
        return redirect(url_for('module_view', module_id=entity_type.module_id))
    
    form_fields = FormFieldConfiguration.query.filter_by(
        form_definition_id=list_form.id,
        is_visible=True
    ).join(AttributeDefinition).order_by(FormFieldConfiguration.order_index).all()
    
    page = request.args.get('page', 1, type=int)
    per_page = list_form.records_per_page or 10
    
    instances_data, pagination = get_entity_instances_with_attributes(
        entity_type_id, page=page, per_page=per_page
    )
    
    # Get permissions for template
    permissions = get_user_permissions(current_user.id, entity_type_id)
    
    return render_template('entities/entity_list.html',
                         entity_type=entity_type,
                         list_form=list_form,
                         form_fields=form_fields,
                         instances_data=instances_data,
                         pagination=pagination,
                         permissions=permissions)

@app.route('/entity/<int:entity_type_id>/create', methods=['GET', 'POST'])
@login_required
def entity_create(entity_type_id):
    """Create new entity instance"""
    entity_type = EntityType.query.get_or_404(entity_type_id)
    
    # Check create permission
    if not check_user_permissions(current_user.id, entity_type_id, 'CREATE'):
        flash('You do not have permission to create records in this entity', 'error')
        return redirect(url_for('entity_list', entity_type_id=entity_type_id))
    
    create_form = FormDefinition.query.filter_by(
        entity_type_id=entity_type_id,
        form_type=FormTypeEnum.CREATE,
        is_active=True
    ).first()
    
    if not create_form:
        flash('No create form configured for this entity type', 'error')
        return redirect(url_for('entity_list', entity_type_id=entity_type_id))
    
    form_fields = FormFieldConfiguration.query.filter_by(
        form_definition_id=create_form.id,
        is_visible=True
    ).join(AttributeDefinition).order_by(FormFieldConfiguration.order_index).all()
    
    if request.method == 'POST':
        try:
            attribute_values = process_form_data(form_fields, request.form)
            
            instance = create_entity_instance_with_attributes(
                entity_type_id=entity_type_id,
                attribute_values=attribute_values,
                created_by=current_user.username
            )
            
            # Log audit entry
            log_audit_entry(
                entity_type_id=entity_type_id,
                entity_instance_id=instance.id,
                operation=OperationEnum.CREATE,
                new_values=attribute_values,
                user_id=current_user.id,
                ip_address=request.remote_addr,
                user_agent=request.user_agent.string
            )
            
            flash(f'{entity_type.name} created successfully', 'success')
            return redirect(url_for('entity_detail', entity_type_id=entity_type_id, instance_id=instance.id))
            
        except Exception as e:
            flash(f'Error creating {entity_type.name}: {str(e)}', 'error')
            print(f"Entity creation error: {e}")
    
    dropdown_data = {}
    for field in form_fields:
        if field.field_type in [FieldTypeEnum.SELECT, FieldTypeEnum.MULTISELECT]:
            if field.dropdown_source_entity_id and field.dropdown_source_attribute_id:
                display_attr_code = field.dropdown_display_attribute.code if field.dropdown_display_attribute else field.dropdown_source_attribute.code
                options = get_dropdown_options(
                    entity_type_id=field.dropdown_source_entity_id,
                    source_attribute_code=field.dropdown_source_attribute.code,
                    display_attribute_code=display_attr_code,
                    unique_only=field.show_unique_values_only
                )
                dropdown_data[field.attribute_definition.code] = options
    
    permissions = get_user_permissions(current_user.id, entity_type_id)
    
    return render_template('entities/entity_form.html',
                         entity_type=entity_type,
                         form_definition=create_form,
                         form_fields=form_fields,
                         lookup_data=dropdown_data,
                         instance=None,
                         form_action='create',
                         permissions=permissions)

@app.route('/entity/<int:entity_type_id>/<int:instance_id>/edit', methods=['GET', 'POST'])
@login_required
def entity_edit(entity_type_id, instance_id):
    """Edit entity instance"""
    entity_type = EntityType.query.get_or_404(entity_type_id)
    instance = EntityInstance.query.get_or_404(instance_id)
    
    # Check update permission
    if not check_user_permissions(current_user.id, entity_type_id, 'UPDATE'):
        flash('You do not have permission to edit records in this entity', 'error')
        return redirect(url_for('entity_detail', entity_type_id=entity_type_id, instance_id=instance_id))
    
    edit_form = FormDefinition.query.filter_by(
        entity_type_id=entity_type_id,
        form_type=FormTypeEnum.EDIT,
        is_active=True
    ).first()
    
    if not edit_form:
        flash('No edit form configured for this entity type', 'error')
        return redirect(url_for('entity_detail', entity_type_id=entity_type_id, instance_id=instance_id))
    
    form_fields = FormFieldConfiguration.query.filter_by(
        form_definition_id=edit_form.id,
        is_visible=True
    ).join(AttributeDefinition).order_by(FormFieldConfiguration.order_index).all()
    
    if request.method == 'POST':
        try:
            # Get old values for audit
            old_values = {}
            for field in form_fields:
                old_values[field.attribute_definition.code] = instance.get_attribute_value(field.attribute_definition.code)
            
            attribute_values = process_form_data(form_fields, request.form)
            
            update_entity_instance_attributes(
                instance_id=instance.id,
                attribute_values=attribute_values,
                updated_by=current_user.username
            )
            
            # Log audit entry
            log_audit_entry(
                entity_type_id=entity_type_id,
                entity_instance_id=instance.id,
                operation=OperationEnum.UPDATE,
                old_values=old_values,
                new_values=attribute_values,
                user_id=current_user.id,
                ip_address=request.remote_addr,
                user_agent=request.user_agent.string
            )
            
            flash(f'{entity_type.name} updated successfully', 'success')
            return redirect(url_for('entity_detail', entity_type_id=entity_type_id, instance_id=instance.id))
            
        except Exception as e:
            flash(f'Error updating {entity_type.name}: {str(e)}', 'error')
            print(f"Entity update error: {e}")
    
    current_values = {}
    for field in form_fields:
        value = instance.get_attribute_value(field.attribute_definition.code)
        current_values[field.attribute_definition.code] = value
    
    dropdown_data = {}
    for field in form_fields:
        if field.field_type in [FieldTypeEnum.SELECT, FieldTypeEnum.MULTISELECT]:
            if field.dropdown_source_entity_id and field.dropdown_source_attribute_id:
                display_attr_code = field.dropdown_display_attribute.code if field.dropdown_display_attribute else field.dropdown_source_attribute.code
                options = get_dropdown_options(
                    entity_type_id=field.dropdown_source_entity_id,
                    source_attribute_code=field.dropdown_source_attribute.code,
                    display_attribute_code=display_attr_code,
                    unique_only=field.show_unique_values_only
                )
                dropdown_data[field.attribute_definition.code] = options
    
    permissions = get_user_permissions(current_user.id, entity_type_id)
    
    return render_template('entities/entity_form.html',
                         entity_type=entity_type,
                         form_definition=edit_form,
                         form_fields=form_fields,
                         lookup_data=dropdown_data,
                         instance=instance,
                         current_values=current_values,
                         form_action='edit',
                         permissions=permissions)

@app.route('/entity/<int:entity_type_id>/<int:instance_id>')
@login_required
def entity_detail(entity_type_id, instance_id):
    """Display entity instance detail"""
    entity_type = EntityType.query.get_or_404(entity_type_id)
    instance = EntityInstance.query.get_or_404(instance_id)
    
    # Check read permission
    if not check_user_permissions(current_user.id, entity_type_id, 'READ'):
        flash('You do not have permission to view this entity', 'error')
        return redirect(url_for('dashboard'))
    
    detail_form = FormDefinition.query.filter_by(
        entity_type_id=entity_type_id,
        form_type=FormTypeEnum.DETAIL,
        is_active=True
    ).first()
    
    if not detail_form:
        flash('No detail form configured for this entity type', 'error')
        return redirect(url_for('entity_list', entity_type_id=entity_type_id))
    
    form_fields = FormFieldConfiguration.query.filter_by(
        form_definition_id=detail_form.id,
        is_visible=True
    ).join(AttributeDefinition).order_by(FormFieldConfiguration.order_index).all()
    
    instance_data = {
        'id': instance.id,
        'instance_code': instance.instance_code,
        'workflow_status': instance.workflow_status,
        'created_at': instance.created_at,
        'updated_at': instance.updated_at,
        'attributes': {}
    }
    
    for field in form_fields:
        value = instance.get_attribute_value(field.attribute_definition.code)
        instance_data['attributes'][field.attribute_definition.code] = {
            'definition': field.attribute_definition,
            'value': value
        }
    
    permissions = get_user_permissions(current_user.id, entity_type_id)
    
    return render_template('entities/entity_detail.html',
                         entity_type=entity_type,
                         instance=instance,
                         instance_data=instance_data,
                         form_fields=form_fields,
                         permissions=permissions)

@app.route('/entity/<int:entity_type_id>/<int:instance_id>/delete', methods=['POST'])
@login_required
def entity_delete(entity_type_id, instance_id):
    """Delete entity instance (soft delete)"""
    # Check delete permission
    if not check_user_permissions(current_user.id, entity_type_id, 'DELETE'):
        return jsonify({'success': False, 'error': 'You do not have permission to delete this record'}), 403
    
    try:
        entity_type = EntityType.query.get_or_404(entity_type_id)
        instance = EntityInstance.query.get_or_404(instance_id)
        
        if instance.entity_type_id != entity_type_id:
            return jsonify({'success': False, 'error': 'Invalid instance'}), 400
        
        # Get values for audit log
        old_values = {'instance_code': instance.instance_code, 'workflow_status': instance.workflow_status}
        
        # Log audit entry before deletion
        log_audit_entry(
            entity_type_id=entity_type_id,
            entity_instance_id=instance_id,
            operation=OperationEnum.DELETE,
            old_values=old_values,
            user_id=current_user.id,
            ip_address=request.remote_addr,
            user_agent=request.user_agent.string
        )
        
        # Soft delete - set is_active to False
        instance.is_active = False
        instance.updated_by = current_user.username
        instance.updated_at = datetime.utcnow()
        
        db.session.commit()
        
        return jsonify({'success': True, 'message': 'Record deleted successfully'})
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'error': str(e)}), 500


# ===========================================
# FAVORITES MANAGEMENT
# ===========================================

@app.route('/favorites/toggle/<int:module_id>', methods=['POST'])
@login_required
def toggle_favorite(module_id):
    """Toggle module as favorite for current user"""
    try:
        # Validate CSRF token manually
        csrf_token = request.headers.get('X-CSRFToken') or request.form.get('csrf_token')
        if not csrf_token:
            return jsonify({'success': False, 'error': 'CSRF token missing'}), 400
        
        # Check if module exists
        module = Module.query.get(module_id)
        if not module:
            return jsonify({'success': False, 'error': 'Module not found'}), 404
        
        existing = UserFavoriteModule.query.filter_by(
            user_id=current_user.id,
            module_id=module_id
        ).first()
        
        if existing:
            db.session.delete(existing)
            action = 'removed'
        else:
            # Get the next order index
            max_order = db.session.query(db.func.max(UserFavoriteModule.order_index)).filter_by(
                user_id=current_user.id
            ).scalar() or 0
            
            favorite = UserFavoriteModule(
                user_id=current_user.id,
                module_id=module_id,
                order_index=max_order + 1
            )
            db.session.add(favorite)
            action = 'added'
        
        db.session.commit()
        return jsonify({'success': True, 'action': action}), 200
        
    except Exception as e:
        db.session.rollback()
        print(f"Error toggling favorite: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/favorites/reorder', methods=['POST'])
@login_required
def reorder_favorites():
    """Reorder favorite modules"""
    try:
        # Validate CSRF token manually
        csrf_token = request.headers.get('X-CSRFToken') or request.json.get('csrf_token') if request.json else None
        if not csrf_token:
            return jsonify({'success': False, 'error': 'CSRF token missing'}), 400
            
        data = request.get_json()
        if not data or 'module_ids' not in data:
            return jsonify({'success': False, 'error': 'Invalid request data'}), 400
            
        module_ids = data.get('module_ids', [])
        
        for index, module_id in enumerate(module_ids):
            favorite = UserFavoriteModule.query.filter_by(
                user_id=current_user.id,
                module_id=module_id
            ).first()
            if favorite:
                favorite.order_index = index + 1
        
        db.session.commit()
        return jsonify({'success': True})
        
    except Exception as e:
        db.session.rollback()
        print(f"Error reordering favorites: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

# ===========================================
# API ENDPOINTS
# ===========================================

@app.route('/api/dropdown/<int:entity_type_id>/<attribute_code>')
@login_required
def api_dropdown_options(entity_type_id, attribute_code):
    """Get dropdown options from entity data"""
    display_attribute_code = request.args.get('display_attribute')
    unique_only = request.args.get('unique_only', 'false').lower() == 'true'
    
    options = get_dropdown_options(
        entity_type_id=entity_type_id,
        source_attribute_code=attribute_code,
        display_attribute_code=display_attribute_code,
        unique_only=unique_only
    )
    
    return jsonify(options)

@app.route('/custom-admin/api/entity/<int:entity_id>/attributes')
@login_required
def api_entity_attributes(entity_id):
    """Get attributes for an entity type"""
    attributes = AttributeDefinition.query.filter_by(
        entity_type_id=entity_id,
        is_active=True
    ).order_by(AttributeDefinition.order_index).all()
    
    return jsonify([{
        'id': attr.id,
        'code': attr.code,
        'name': attr.name,
        'data_type': attr.data_type.value
    } for attr in attributes])

@app.route('/api/entity/<int:entity_type_id>/search')
@login_required
def api_entity_search(entity_type_id):
    """Search entity instances"""
    search_term = request.args.get('q', '')
    page = request.args.get('page', 1, type=int)
    per_page = request.args.get('per_page', 10, type=int)
    
    # Basic search implementation (can be enhanced)
    instances = EntityInstance.query.filter_by(
        entity_type_id=entity_type_id,
        is_active=True
    )
    
    if search_term:
        instances = instances.filter(
            EntityInstance.instance_code.ilike(f'%{search_term}%')
        )
    
    pagination = instances.paginate(page=page, per_page=per_page, error_out=False)
    
    return jsonify({
        'instances': [{
            'id': inst.id,
            'instance_code': inst.instance_code,
            'workflow_status': inst.workflow_status,
            'created_at': inst.created_at.isoformat() if inst.created_at else None
        } for inst in pagination.items],
        'pagination': {
            'page': pagination.page,
            'pages': pagination.pages,
            'per_page': pagination.per_page,
            'total': pagination.total,
            'has_next': pagination.has_next,
            'has_prev': pagination.has_prev
        }
    })

# ===========================================
# ERROR HANDLERS
# ===========================================

@app.errorhandler(404)
def not_found_error(error):
    return render_template('errors/404.html'), 404

@app.errorhandler(500)
def internal_error(error):
    db.session.rollback()
    return render_template('errors/500.html'), 500

# ===========================================
# TEMPLATE HELPERS AND FILTERS
# ===========================================

@app.template_filter('format_datetime')
def format_datetime(value, format='%Y-%m-%d %H:%M'):
    if value is None:
        return ''
    return value.strftime(format)

@app.template_filter('format_date')
def format_date(value, format='%Y-%m-%d'):
    if value is None:
        return ''
    return value.strftime(format)

@app.template_filter('format_currency')
def format_currency(value):
    if value is None:
        return ''
    return f"${value:,.2f}"

# Add hasattr as a global function for templates
@app.template_global()
def hasattr_helper(obj, attr_name):
    """Template helper to check if an object has an attribute"""
    try:
        return hasattr(obj, attr_name)
    except:
        return False

# Add getattr as a global function for templates
@app.template_global()
def getattr_helper(obj, attr_name, default=None):
    """Template helper to safely get an attribute"""
    try:
        return getattr(obj, attr_name, default)
    except:
        return default

# Make Python's hasattr and getattr available in templates
@app.context_processor
def inject_python_builtins():
    """Make Python builtins available in templates"""
    return {
        'hasattr': hasattr,
        'getattr': getattr,
        'len': len,
        'str': str,
        'int': int,
        'float': float,
        'bool': bool
    }

# ===========================================
# ADMIN EXPORT ROUTE
# ===========================================

@app.route('/admin/export/<model_name>')
@login_required
def export_model(model_name):
    """Export model data to CSV"""
    import csv
    from io import StringIO
    from flask import make_response
    
    config = AdminConfig.get_model_config(model_name)
    if not config:
        flash('Model not found', 'error')
        return redirect(url_for('custom_admin.dashboard'))
    
    model = config['model']
    objects = model.query.all()
    
    # Create CSV
    output = StringIO()
    writer = csv.writer(output)
    
    # Write headers
    headers = config.get('list_display', ['id'])
    writer.writerow(headers)
    
    # Write data
    for obj in objects:
        row = []
        for field in headers:
            value = AdminUtils.get_display_value(obj, field)
            row.append(value)
        writer.writerow(row)
    
    # Create response
    response = make_response(output.getvalue())
    response.headers['Content-Type'] = 'text/csv'
    response.headers['Content-Disposition'] = f'attachment; filename={model_name}_export.csv'
    
    return response

# ===========================================
# APPLICATION STARTUP
# ===========================================

# Initialize the app when it starts
with app.app_context():
    initialize_app()

if __name__ == '__main__':
    print("="*60)
    print("PORT MANAGEMENT SYSTEM STARTED")
    print("="*60)
    print("Main Application: http://localhost:5000/")
    print("Admin Panel: http://localhost:5000/custom-admin/")
    print("Login with: admin / admin123")
    print("="*60)
    
    app.run(debug=True, host='0.0.0.0', port=5000)

================
File: custom_admin/__init__.py
================
# custom_admin/__init__.py
"""
Django-style Admin Interface for Flask - Simplified Version
"""

from flask import Blueprint, render_template, request, redirect, url_for, flash, jsonify, abort
from flask_login import login_required, current_user
from sqlalchemy import inspect, func
from sqlalchemy.orm import joinedload
from models import *
import json
from datetime import datetime
from werkzeug.security import generate_password_hash
import math

# Create admin blueprint
admin_bp = Blueprint('custom_admin', __name__, url_prefix='/custom-admin', template_folder='templates')

class AdminConfig:
    """Central configuration for all admin models"""
    
    # Model registry with their configurations
    MODELS = {
        'application': {
            'model': Application,
            'name': 'Application',
            'name_plural': 'Applications',
            'icon': 'fas fa-cubes',
            'category': 'System',
            'list_display': ['code', 'name', 'order_index', 'is_active', 'created_at'],
            'list_filter': ['is_active', 'created_at'],
            'search_fields': ['code', 'name', 'description'],
            'readonly_fields': ['created_at', 'updated_at'],
            'ordering': ['order_index', 'name'],
            'form_fields': {
                'code': {'type': 'text', 'required': True, 'max_length': 50},
                'name': {'type': 'text', 'required': True, 'max_length': 255},
                'description': {'type': 'textarea', 'required': False},
                'icon': {'type': 'text', 'required': False, 'max_length': 100, 'help_text': 'Material icon name'},
                'order_index': {'type': 'number', 'required': False, 'default': 0},
                'is_active': {'type': 'checkbox', 'required': False, 'default': True},
            }
        },
        
        'module': {
            'model': Module,
            'name': 'Module',
            'name_plural': 'Modules',
            'icon': 'fas fa-folder',
            'category': 'System',
            'list_display': ['application', 'code', 'name', 'order_index', 'is_system', 'is_active'],
            'list_filter': ['application_id', 'is_system', 'is_active', 'created_at'],
            'search_fields': ['code', 'name', 'description'],
            'readonly_fields': ['created_at', 'updated_at'],
            'ordering': ['application_id', 'order_index', 'name'],
            'form_fields': {
                'application_id': {'type': 'select', 'required': True, 'source': 'application', 'display_field': 'name'},
                'code': {'type': 'text', 'required': True, 'max_length': 50},
                'name': {'type': 'text', 'required': True, 'max_length': 255},
                'description': {'type': 'textarea', 'required': False},
                'icon': {'type': 'text', 'required': False, 'max_length': 100},
                'order_index': {'type': 'number', 'required': False, 'default': 0},
                'is_system': {'type': 'checkbox', 'required': False, 'default': False},
                'is_active': {'type': 'checkbox', 'required': False, 'default': True},
            }
        },
        
        'entity_type': {
            'model': EntityType,
            'name': 'Entity Type',
            'name_plural': 'Entity Types',
            'icon': 'fas fa-table',
            'category': 'Entity Management',
            'list_display': ['module', 'code', 'name', 'is_master', 'is_transactional', 'is_active'],
            'list_filter': ['module_id', 'is_master', 'is_transactional', 'is_active'],
            'search_fields': ['code', 'name', 'description', 'table_name'],
            'readonly_fields': ['created_at', 'updated_at'],
            'ordering': ['module_id', 'order_index', 'name'],
            'form_fields': {
                'module_id': {'type': 'select', 'required': True, 'source': 'module', 'display_field': 'name'},
                'code': {'type': 'text', 'required': True, 'max_length': 50},
                'name': {'type': 'text', 'required': True, 'max_length': 255},
                'description': {'type': 'textarea', 'required': False},
                'table_name': {'type': 'text', 'required': False, 'max_length': 100},
                'is_master': {'type': 'checkbox', 'required': False, 'default': False},
                'is_transactional': {'type': 'checkbox', 'required': False, 'default': True},
                'icon': {'type': 'text', 'required': False, 'max_length': 100},
                'order_index': {'type': 'number', 'required': False, 'default': 0},
                'is_active': {'type': 'checkbox', 'required': False, 'default': True},
            }
        },
        
        'attribute_definition': {
            'model': AttributeDefinition,
            'name': 'Attribute Definition',
            'name_plural': 'Attribute Definitions',
            'icon': 'fas fa-list',
            'category': 'Entity Management',
            'list_display': ['entity_type', 'code', 'name', 'data_type', 'is_required', 'is_unique', 'is_active'],
            'list_filter': ['entity_type_id', 'data_type', 'is_required', 'is_unique', 'is_active'],
            'search_fields': ['code', 'name', 'description'],
            'readonly_fields': ['created_at', 'updated_at'],
            'ordering': ['entity_type_id', 'order_index', 'name'],
            'form_fields': {
                'entity_type_id': {'type': 'select', 'required': True, 'source': 'entity_type', 'display_field': 'name'},
                'code': {'type': 'text', 'required': True, 'max_length': 100},
                'name': {'type': 'text', 'required': True, 'max_length': 255},
                'description': {'type': 'textarea', 'required': False},
                'data_type': {'type': 'select', 'required': True, 'choices': [(e.value, e.value) for e in DataTypeEnum]},
                'max_length': {'type': 'number', 'required': False},
                'decimal_precision': {'type': 'number', 'required': False},
                'decimal_scale': {'type': 'number', 'required': False},
                'default_value': {'type': 'text', 'required': False},
                'is_required': {'type': 'checkbox', 'required': False, 'default': False},
                'is_unique': {'type': 'checkbox', 'required': False, 'default': False},
                'is_indexed': {'type': 'checkbox', 'required': False, 'default': False},
                'validation_rules': {'type': 'json', 'required': False},
                'order_index': {'type': 'number', 'required': False, 'default': 0},
                'is_active': {'type': 'checkbox', 'required': False, 'default': True},
            }
        },
        
        'form_definition': {
            'model': FormDefinition,
            'name': 'Form Definition',
            'name_plural': 'Form Definitions',
            'icon': 'fas fa-edit',
            'category': 'Form Management',
            'list_display': ['entity_type', 'code', 'name', 'form_type', 'layout_type', 'is_default', 'is_active'],
            'list_filter': ['entity_type_id', 'form_type', 'layout_type', 'is_default', 'is_active'],
            'search_fields': ['code', 'name', 'description'],
            'readonly_fields': ['created_at', 'updated_at'],
            'ordering': ['entity_type_id', 'form_type'],
            'form_fields': {
                'entity_type_id': {'type': 'select', 'required': True, 'source': 'entity_type', 'display_field': 'name'},
                'code': {'type': 'text', 'required': True, 'max_length': 100},
                'name': {'type': 'text', 'required': True, 'max_length': 255},
                'description': {'type': 'textarea', 'required': False},
                'form_type': {'type': 'select', 'required': True, 'choices': [(e.value, e.value) for e in FormTypeEnum]},
                'layout_type': {'type': 'select', 'required': False, 'choices': [(e.value, e.value) for e in LayoutTypeEnum]},
                'records_per_page': {'type': 'number', 'required': False, 'default': 10},
                'pages_per_load': {'type': 'number', 'required': False, 'default': 1},
                'allow_inline_edit': {'type': 'checkbox', 'required': False, 'default': False},
                'show_attachment_count': {'type': 'checkbox', 'required': False, 'default': False},
                'mandatory_confirmation': {'type': 'checkbox', 'required': False, 'default': False},
                'is_default': {'type': 'checkbox', 'required': False, 'default': False},
                'is_active': {'type': 'checkbox', 'required': False, 'default': True},
            }
        },
        
        'form_field_configuration': {
            'model': FormFieldConfiguration,
            'name': 'Form Field Configuration',
            'name_plural': 'Form Field Configurations',
            'icon': 'fas fa-wpforms',
            'category': 'Form Management',
            'list_display': ['form_definition', 'attribute_definition', 'field_label', 'field_type', 'is_visible', 'is_required', 'order_index'],
            'list_filter': ['form_definition_id', 'field_type', 'is_visible', 'is_required', 'is_editable'],
            'search_fields': ['field_label'],
            'readonly_fields': ['created_at', 'updated_at'],
            'ordering': ['form_definition_id', 'order_index'],
            'form_fields': {
                'form_definition_id': {'type': 'select', 'required': True, 'source': 'form_definition', 'display_field': 'name'},
                'attribute_definition_id': {'type': 'select', 'required': True, 'source': 'attribute_definition', 'display_field': 'name'},
                'field_label': {'type': 'text', 'required': False, 'max_length': 255},
                'field_type': {'type': 'select', 'required': True, 'choices': [(e.value, e.value) for e in FieldTypeEnum]},
                'placeholder_text': {'type': 'text', 'required': False, 'max_length': 255},
                'help_text': {'type': 'textarea', 'required': False},
                'order_index': {'type': 'number', 'required': False, 'default': 0},
                'grid_column_span': {'type': 'number', 'required': False, 'default': 1, 'min': 1, 'max': 12},
                'grid_row_span': {'type': 'number', 'required': False, 'default': 1, 'min': 1, 'max': 6},
                # NEW: Simplified dropdown configuration
                'dropdown_source_entity_id': {'type': 'select', 'required': False, 'source': 'entity_type', 'display_field': 'name'},
                'dropdown_source_attribute_id': {'type': 'select', 'required': False, 'source': 'attribute_definition', 'display_field': 'name'},
                'dropdown_display_attribute_id': {'type': 'select', 'required': False, 'source': 'attribute_definition', 'display_field': 'name'},
                'show_unique_values_only': {'type': 'checkbox', 'required': False, 'default': False},
                'is_visible': {'type': 'checkbox', 'required': False, 'default': True},
                'is_editable': {'type': 'checkbox', 'required': False, 'default': True},
                'is_required': {'type': 'checkbox', 'required': False, 'default': False},
                'is_searchable': {'type': 'checkbox', 'required': False, 'default': False},
                'is_sortable': {'type': 'checkbox', 'required': False, 'default': False},
                'conditional_visibility_rules': {'type': 'json', 'required': False},
                'conditional_requirement_rules': {'type': 'json', 'required': False},
                'conditional_editability_rules': {'type': 'json', 'required': False},
                'validation_rules': {'type': 'json', 'required': False},
                'css_classes': {'type': 'text', 'required': False, 'max_length': 500},
                'custom_attributes': {'type': 'json', 'required': False},
            }
        },

        'entity_instance': {
            'model': EntityInstance,
            'name': 'Entity Instance',
            'name_plural': 'Entity Instances',
            'icon': 'fas fa-database',
            'category': 'Entity Management',
            'list_display': ['entity_type', 'instance_code', 'workflow_status', 'is_active', 'created_at'],
            'list_filter': ['entity_type_id', 'workflow_status', 'is_active'],
            'search_fields': ['instance_code'],
            'readonly_fields': ['created_at', 'updated_at'],
            'ordering': ['entity_type_id', 'created_at'],
            'form_fields': {
                'entity_type_id': {'type': 'select', 'required': True, 'source': 'entity_type', 'display_field': 'name'},
                'instance_code': {'type': 'text', 'required': False, 'max_length': 255},
                'workflow_status': {'type': 'text', 'required': False, 'max_length': 100},
                'is_active': {'type': 'checkbox', 'required': False, 'default': True},
            }
        },

        'user': {
            'model': User,
            'name': 'User',
            'name_plural': 'Users',
            'icon': 'fas fa-users',
            'category': 'Security',
            'list_display': ['username', 'email', 'full_name', 'is_active', 'last_login', 'created_at'],
            'list_filter': ['is_active', 'last_login', 'created_at'],
            'search_fields': ['username', 'email', 'first_name', 'last_name'],
            'readonly_fields': ['last_login', 'created_at', 'updated_at'],
            'ordering': ['username'],
            'form_fields': {
                'username': {'type': 'text', 'required': True, 'max_length': 100},
                'email': {'type': 'email', 'required': True, 'max_length': 255},
                'first_name': {'type': 'text', 'required': False, 'max_length': 100},
                'last_name': {'type': 'text', 'required': False, 'max_length': 100},
                'password': {'type': 'password', 'required': False, 'help_text': 'Leave blank to keep current password'},
                'is_active': {'type': 'checkbox', 'required': False, 'default': True},
            }
        },

        'role': {
            'model': Role,
            'name': 'Role',
            'name_plural': 'Roles',
            'icon': 'fas fa-shield-alt',
            'category': 'Security',
            'list_display': ['code', 'name', 'is_system', 'is_active', 'created_at'],
            'list_filter': ['is_system', 'is_active'],
            'search_fields': ['code', 'name', 'description'],
            'readonly_fields': ['created_at', 'updated_at'],
            'ordering': ['name'],
            'form_fields': {
                'code': {'type': 'text', 'required': True, 'max_length': 100},
                'name': {'type': 'text', 'required': True, 'max_length': 255},
                'description': {'type': 'textarea', 'required': False},
                'is_system': {'type': 'checkbox', 'required': False, 'default': False},
                'is_active': {'type': 'checkbox', 'required': False, 'default': True},
            }
        },

        'user_role': {
            'model': UserRole,
            'name': 'User Role',
            'name_plural': 'User Roles',
            'icon': 'fas fa-user-shield',
            'category': 'Security',
            'list_display': ['user', 'role', 'created_at'],
            'list_filter': ['user_id', 'role_id'],
            'search_fields': [],
            'readonly_fields': ['created_at'],
            'ordering': ['user_id', 'role_id'],
            'form_fields': {
                'user_id': {'type': 'select', 'required': True, 'source': 'user', 'display_field': 'username'},
                'role_id': {'type': 'select', 'required': True, 'source': 'role', 'display_field': 'name'},
            }
        },

        'entity_permission': {
            'model': EntityPermission,
            'name': 'Entity Permission',
            'name_plural': 'Entity Permissions',
            'icon': 'fas fa-lock',
            'category': 'Security',
            'list_display': ['role', 'entity_type', 'can_read', 'can_create', 'can_update', 'can_delete'],
            'list_filter': ['role_id', 'entity_type_id', 'can_read', 'can_create', 'can_update', 'can_delete'],
            'search_fields': [],
            'readonly_fields': ['created_at', 'updated_at'],
            'ordering': ['role_id', 'entity_type_id'],
            'form_fields': {
                'role_id': {'type': 'select', 'required': True, 'source': 'role', 'display_field': 'name'},
                'entity_type_id': {'type': 'select', 'required': True, 'source': 'entity_type', 'display_field': 'name'},
                'can_read': {'type': 'checkbox', 'required': False, 'default': False},
                'can_create': {'type': 'checkbox', 'required': False, 'default': False},
                'can_update': {'type': 'checkbox', 'required': False, 'default': False},
                'can_delete': {'type': 'checkbox', 'required': False, 'default': False},
                'field_level_permissions': {'type': 'json', 'required': False},
                'row_level_conditions': {'type': 'json', 'required': False},
            }
        },

        'user_favorite_module': {
            'model': UserFavoriteModule,
            'name': 'User Favorite Module',
            'name_plural': 'User Favorite Modules',
            'icon': 'fas fa-star',
            'category': 'Security',
            'list_display': ['user', 'module', 'order_index', 'created_at'],
            'list_filter': ['user_id', 'module_id'],
            'search_fields': [],
            'readonly_fields': ['created_at'],
            'ordering': ['user_id', 'order_index'],
            'form_fields': {
                'user_id': {'type': 'select', 'required': True, 'source': 'user', 'display_field': 'username'},
                'module_id': {'type': 'select', 'required': True, 'source': 'module', 'display_field': 'name'},
                'order_index': {'type': 'number', 'required': False, 'default': 0},
            }
        },

        'workflow_state': {
            'model': WorkflowState,
            'name': 'Workflow State',
            'name_plural': 'Workflow States',
            'icon': 'fas fa-circle',
            'category': 'Workflow',
            'list_display': ['entity_type', 'code', 'name', 'is_initial', 'is_final', 'color', 'order_index'],
            'list_filter': ['entity_type_id', 'is_initial', 'is_final', 'is_active'],
            'search_fields': ['code', 'name'],
            'readonly_fields': ['created_at', 'updated_at'],
            'ordering': ['entity_type_id', 'order_index'],
            'form_fields': {
                'entity_type_id': {'type': 'select', 'required': True, 'source': 'entity_type', 'display_field': 'name'},
                'code': {'type': 'text', 'required': True, 'max_length': 100},
                'name': {'type': 'text', 'required': True, 'max_length': 255},
                'description': {'type': 'textarea', 'required': False},
                'is_initial': {'type': 'checkbox', 'required': False, 'default': False},
                'is_final': {'type': 'checkbox', 'required': False, 'default': False},
                'color': {'type': 'text', 'required': False, 'max_length': 7, 'placeholder': '#ffffff'},
                'order_index': {'type': 'number', 'required': False, 'default': 0},
                'is_active': {'type': 'checkbox', 'required': False, 'default': True},
            }
        },

        'workflow_transition': {
            'model': WorkflowTransition,
            'name': 'Workflow Transition',
            'name_plural': 'Workflow Transitions',
            'icon': 'fas fa-arrow-right',
            'category': 'Workflow',
            'list_display': ['from_state', 'to_state', 'action_name', 'action_code', 'is_active'],
            'list_filter': ['from_state_id', 'to_state_id', 'is_active'],
            'search_fields': ['action_name', 'action_code'],
            'readonly_fields': ['created_at', 'updated_at'],
            'ordering': ['from_state_id', 'to_state_id'],
            'form_fields': {
                'from_state_id': {'type': 'select', 'required': True, 'source': 'workflow_state', 'display_field': 'name'},
                'to_state_id': {'type': 'select', 'required': True, 'source': 'workflow_state', 'display_field': 'name'},
                'action_name': {'type': 'text', 'required': True, 'max_length': 255},
                'action_code': {'type': 'text', 'required': True, 'max_length': 100},
                'conditions': {'type': 'json', 'required': False},
                'required_roles': {'type': 'json', 'required': False},
                'is_active': {'type': 'checkbox', 'required': False, 'default': True},
            }
        },

        'event_configuration': {
            'model': EventConfiguration,
            'name': 'Event Configuration',
            'name_plural': 'Event Configurations',
            'icon': 'fas fa-bolt',
            'category': 'Workflow',
            'list_display': ['entity_type', 'event_type', 'event_name', 'event_code', 'is_active'],
            'list_filter': ['entity_type_id', 'event_type', 'is_active'],
            'search_fields': ['event_name', 'event_code'],
            'readonly_fields': ['created_at', 'updated_at'],
            'ordering': ['entity_type_id', 'event_type'],
            'form_fields': {
                'entity_type_id': {'type': 'select', 'required': True, 'source': 'entity_type', 'display_field': 'name'},
                'event_type': {'type': 'select', 'required': True, 'choices': [(e.value, e.value) for e in EventTypeEnum]},
                'event_name': {'type': 'text', 'required': True, 'max_length': 255},
                'event_code': {'type': 'text', 'required': True, 'max_length': 100},
                'conditions': {'type': 'json', 'required': False},
                'actions': {'type': 'json', 'required': False},
                'is_active': {'type': 'checkbox', 'required': False, 'default': True},
            }
        },

        'approval_type': {
            'model': ApprovalType,
            'name': 'Approval Type',
            'name_plural': 'Approval Types',
            'icon': 'fas fa-check-circle',
            'category': 'Approval',
            'list_display': ['code', 'name', 'is_active', 'created_at'],
            'list_filter': ['is_active'],
            'search_fields': ['code', 'name', 'description'],
            'readonly_fields': ['created_at', 'updated_at'],
            'ordering': ['name'],
            'form_fields': {
                'code': {'type': 'text', 'required': True, 'max_length': 100},
                'name': {'type': 'text', 'required': True, 'max_length': 255},
                'description': {'type': 'textarea', 'required': False},
                'is_active': {'type': 'checkbox', 'required': False, 'default': True},
            }
        },

        'organizational_unit': {
            'model': OrganizationalUnit,
            'name': 'Organizational Unit',
            'name_plural': 'Organizational Units',
            'icon': 'fas fa-sitemap',
            'category': 'Approval',
            'list_display': ['code', 'name', 'unit_type', 'parent_unit', 'manager', 'level_order', 'is_active'],
            'list_filter': ['unit_type', 'is_active'],
            'search_fields': ['code', 'name', 'description'],
            'readonly_fields': ['created_at', 'updated_at'],
            'ordering': ['level_order', 'name'],
            'form_fields': {
                'parent_unit_id': {'type': 'select', 'required': False, 'source': 'organizational_unit', 'display_field': 'name'},
                'code': {'type': 'text', 'required': True, 'max_length': 100},
                'name': {'type': 'text', 'required': True, 'max_length': 255},
                'unit_type': {'type': 'select', 'required': True, 'choices': [(e.value, e.value) for e in UnitTypeEnum]},
                'manager_user_id': {'type': 'select', 'required': False, 'source': 'user', 'display_field': 'username'},
                'description': {'type': 'textarea', 'required': False},
                'level_order': {'type': 'number', 'required': False, 'default': 0},
                'is_active': {'type': 'checkbox', 'required': False, 'default': True},
            }
        },

        'user_organizational_assignment': {
            'model': UserOrganizationalAssignment,
            'name': 'User Organizational Assignment',
            'name_plural': 'User Organizational Assignments',
            'icon': 'fas fa-user-cog',
            'category': 'Approval',
            'list_display': ['user', 'organizational_unit', 'position_title', 'is_primary', 'is_manager', 'effective_from'],
            'list_filter': ['organizational_unit_id', 'is_primary', 'is_manager'],
            'search_fields': ['position_title'],
            'readonly_fields': ['created_at', 'updated_at'],
            'ordering': ['user_id', 'organizational_unit_id'],
            'form_fields': {
                'user_id': {'type': 'select', 'required': True, 'source': 'user', 'display_field': 'username'},
                'organizational_unit_id': {'type': 'select', 'required': True, 'source': 'organizational_unit', 'display_field': 'name'},
                'position_title': {'type': 'text', 'required': False, 'max_length': 255},
                'is_primary': {'type': 'checkbox', 'required': False, 'default': True},
                'is_manager': {'type': 'checkbox', 'required': False, 'default': False},
                'effective_from': {'type': 'date', 'required': True},
                'effective_to': {'type': 'date', 'required': False},
            }
        },

        'audit_log': {
            'model': AuditLog,
            'name': 'Audit Log',
            'name_plural': 'Audit Logs',
            'icon': 'fas fa-history',
            'category': 'Audit',
            'list_display': ['entity_type', 'entity_instance', 'operation', 'user', 'ip_address', 'created_at'],
            'list_filter': ['entity_type_id', 'operation', 'user_id', 'created_at'],
            'search_fields': ['ip_address'],
            'readonly_fields': ['created_at'],
            'ordering': ['-created_at'],
            'form_fields': {
                'entity_type_id': {'type': 'select', 'required': False, 'source': 'entity_type', 'display_field': 'name'},
                'entity_instance_id': {'type': 'number', 'required': False},
                'operation': {'type': 'select', 'required': True, 'choices': [(e.value, e.value) for e in OperationEnum]},
                'old_values': {'type': 'json', 'required': False},
                'new_values': {'type': 'json', 'required': False},
                'user_id': {'type': 'select', 'required': False, 'source': 'user', 'display_field': 'username'},
                'ip_address': {'type': 'text', 'required': False, 'max_length': 45},
                'user_agent': {'type': 'textarea', 'required': False},
            }
        },

        'system_parameter': {
            'model': SystemParameter,
            'name': 'System Parameter',
            'name_plural': 'System Parameters',
            'icon': 'fas fa-cogs',
            'category': 'System',
            'list_display': ['category', 'param_key', 'param_value', 'data_type', 'is_encrypted'],
            'list_filter': ['category', 'data_type', 'is_encrypted'],
            'search_fields': ['category', 'param_key', 'param_value'],
            'readonly_fields': ['created_at', 'updated_at'],
            'ordering': ['category', 'param_key'],
            'form_fields': {
                'category': {'type': 'text', 'required': True, 'max_length': 100},
                'param_key': {'type': 'text', 'required': True, 'max_length': 255},
                'param_value': {'type': 'textarea', 'required': False},
                'data_type': {'type': 'select', 'required': False, 'choices': [(e.value, e.value) for e in SystemParameterDataTypeEnum]},
                'description': {'type': 'textarea', 'required': False},
                'is_encrypted': {'type': 'checkbox', 'required': False, 'default': False},
            }
        },
    }
    
    # Categories for navigation - SIMPLIFIED
    CATEGORIES = {
        'System': {'icon': 'fas fa-cogs', 'order': 1},
        'Entity Management': {'icon': 'fas fa-database', 'order': 2},
        'Form Management': {'icon': 'fas fa-edit', 'order': 3},
        'Security': {'icon': 'fas fa-shield-alt', 'order': 4},
        'Workflow': {'icon': 'fas fa-project-diagram', 'order': 5},
        'Approval': {'icon': 'fas fa-check-circle', 'order': 6},
        'Audit': {'icon': 'fas fa-history', 'order': 7},
    }
    
    @classmethod
    def get_model_config(cls, model_key):
        """Get configuration for a specific model"""
        return cls.MODELS.get(model_key, {})
    
    @classmethod
    def get_navigation_structure(cls):
        """Get structured navigation for admin interface"""
        navigation = {}
        for model_key, config in cls.MODELS.items():
            category = config.get('category', 'Other')
            if category not in navigation:
                navigation[category] = {
                    'models': [],
                    'icon': cls.CATEGORIES.get(category, {}).get('icon', 'fas fa-folder'),
                    'order': cls.CATEGORIES.get(category, {}).get('order', 999)
                }
            navigation[category]['models'].append({
                'key': model_key,
                'name': config['name_plural'],
                'icon': config['icon'],
                'url': url_for('custom_admin.model_list', model_name=model_key)
            })
        
        # Sort categories by order
        return dict(sorted(navigation.items(), key=lambda x: x[1]['order']))
    
    @classmethod
    def get_choices_for_field(cls, model_key, field_name):
        """Get choices for select fields"""
        config = cls.get_model_config(model_key)
        field_config = config.get('form_fields', {}).get(field_name, {})
        
        if 'choices' in field_config:
            return field_config['choices']
        
        if 'source' in field_config:
            source_model_key = field_config['source']
            source_config = cls.get_model_config(source_model_key)
            if source_config:
                source_model = source_config['model']
                display_field = field_config.get('display_field', 'name')
                
                # Get all active records
                query = source_model.query
                if hasattr(source_model, 'is_active'):
                    query = query.filter_by(is_active=True)
                
                records = query.all()
                choices = []
                for record in records:
                    display_value = getattr(record, display_field, str(record.id))
                    # For nested displays like "module.application.name - module.name"
                    if hasattr(record, 'module') and hasattr(record.module, 'application'):
                        display_value = f"{record.module.application.name} - {display_value}"
                    choices.append((record.id, display_value))
                
                return choices
        
        return []

class AdminUtils:
    """Utility functions for admin operations"""
    
    @staticmethod
    def get_model_by_name(model_name):
        """Get model class by name"""
        config = AdminConfig.get_model_config(model_name)
        return config.get('model') if config else None
    
    @staticmethod
    def get_relationship_count(obj, relationship_name):
        """Safely get the count of related objects"""
        try:
            relationship = getattr(obj, relationship_name, None)
            if relationship is None:
                return 0
            
            if hasattr(relationship, 'count'):
                return relationship.count()
            
            if hasattr(relationship, '__len__'):
                return len(relationship)
            
            if relationship:
                return 1
            
            return 0
        except Exception as e:
            print(f"Error getting relationship count for {relationship_name}: {e}")
            return 0
    
    @staticmethod
    def get_display_value(obj, field_name):
        """Get display value for a field, handling relationships"""
        if not obj:
            return ''
        
        try:
            # Handle nested attributes like 'module.application.name'
            if '.' in field_name:
                parts = field_name.split('.')
                value = obj
                for part in parts:
                    if value is None:
                        break
                    value = getattr(value, part, None)
                return str(value) if value is not None else ''
            
            # Handle direct attributes
            value = getattr(obj, field_name, None)
            
            # Special handling for foreign key relationships
            if hasattr(obj.__class__, field_name):
                attr = getattr(obj.__class__, field_name)
                if hasattr(attr.property, 'mapper'):  # It's a relationship
                    related_obj = getattr(obj, field_name)
                    if related_obj:
                        # Try to get name, then code, then id
                        for attr_name in ['name', 'code', 'title', 'username']:
                            if hasattr(related_obj, attr_name):
                                return getattr(related_obj, attr_name)
                        return str(related_obj.id)
                    return ''
            
            # Handle special field types
            if isinstance(value, bool):
                return 'Yes' if value else 'No'
            elif isinstance(value, datetime):
                return value.strftime('%Y-%m-%d %H:%M')
            elif value is None:
                return ''
            
            return str(value)
            
        except Exception as e:
            return f'Error: {str(e)}'
    
    @staticmethod
    def apply_filters(query, model_config, filters):
        """Apply filters to query"""
        model = model_config['model']
        
        for field_name, value in filters.items():
            if not value:
                continue
                
            if hasattr(model, field_name):
                field = getattr(model, field_name)
                
                # Handle different filter types
                if isinstance(value, str) and value.strip():
                    if 'date' in field_name.lower():
                        # Date filtering
                        try:
                            date_value = datetime.strptime(value, '%Y-%m-%d')
                            query = query.filter(field >= date_value)
                        except ValueError:
                            pass
                    else:
                        # Text filtering
                        query = query.filter(field.ilike(f'%{value}%'))
                elif isinstance(value, bool) or value in ['true', 'false']:
                    bool_value = value if isinstance(value, bool) else value.lower() == 'true'
                    query = query.filter(field == bool_value)
                else:
                    query = query.filter(field == value)
        
        return query
    
    @staticmethod
    def apply_search(query, model_config, search_term):
        """Apply search to query"""
        if not search_term:
            return query
        
        model = model_config['model']
        search_fields = model_config.get('search_fields', [])
        
        if not search_fields:
            return query
        
        # Build OR conditions for search fields
        conditions = []
        for field_name in search_fields:
            if hasattr(model, field_name):
                field = getattr(model, field_name)
                conditions.append(field.ilike(f'%{search_term}%'))
        
        if conditions:
            from sqlalchemy import or_
            query = query.filter(or_(*conditions))
        
        return query
    
    @staticmethod
    def get_field_value_for_form(obj, field_name, field_config):
        """Get the appropriate value for a form field, handling foreign keys and enums properly"""
        if not obj or not hasattr(obj, field_name):
            return None
            
        value = getattr(obj, field_name)
        
        # Handle select fields (foreign keys)
        if field_config.get('type') == 'select':
            # Check if this is an enum field by looking at the choices
            choices = field_config.get('choices', [])
            if choices:
                # This is an enum field, extract the enum value
                if hasattr(value, 'value'):
                    return value.value
                elif hasattr(value, 'name'):
                    return value.name
                else:
                    return value
            else:
                # This is a foreign key field
                if field_config.get('source'):
                    if field_name.endswith('_id'):
                        return value
                    else:
                        if value and hasattr(value, 'id'):
                            return value.id
                        return value
        
        # Handle JSON fields
        elif isinstance(value, (dict, list)):
            return json.dumps(value, indent=2)
        
        # Handle datetime fields
        elif hasattr(value, 'strftime'):
            return value
            
        # Handle enum fields that aren't select fields
        elif hasattr(value, 'value'):
            return value.value
        elif hasattr(value, 'name'):
            return value.name
            
        # Default case
        return value

# ROUTES START HERE

@admin_bp.route('/')
@login_required
def dashboard():
    """Admin dashboard with statistics"""
    stats = {}
    
    # Calculate statistics for each model
    for model_key, config in AdminConfig.MODELS.items():
        model = config['model']
        try:
            total_count = model.query.count()
            active_count = 0
            if hasattr(model, 'is_active'):
                active_count = model.query.filter_by(is_active=True).count()
            
            stats[model_key] = {
                'name': config['name_plural'],
                'icon': config['icon'],
                'total': total_count,
                'active': active_count,
                'category': config.get('category', 'Other'),
                'url': url_for('custom_admin.model_list', model_name=model_key)
            }
        except Exception as e:
            print(f"Error calculating stats for {model_key}: {e}")
            stats[model_key] = {
                'name': config['name_plural'],
                'icon': config['icon'],
                'total': 0,
                'active': 0,
                'category': config.get('category', 'Other'),
                'url': url_for('custom_admin.model_list', model_name=model_key)
            }
    
    # Get navigation structure
    navigation = AdminConfig.get_navigation_structure()
    
    # Recent activities
    recent_activities = []
    try:
        if AuditLog.query.first():
            recent_logs = AuditLog.query.order_by(AuditLog.created_at.desc()).limit(10).all()
            for log in recent_logs:
                recent_activities.append({
                    'action': f"{log.operation.value} {log.entity_type.name if log.entity_type else 'Unknown'}",
                    'user': log.user.username if log.user else 'System',
                    'time': log.created_at,
                    'ip': log.ip_address
                })
    except Exception as e:
        print(f"Error loading recent activities: {e}")
    
    return render_template('admin/dashboard.html', 
                         stats=stats, 
                         navigation=navigation,
                         recent_activities=recent_activities)

@admin_bp.route('/models/<model_name>')
@login_required
def model_list(model_name):
    """Generic model list view"""
    config = AdminConfig.get_model_config(model_name)
    if not config:
        flash(f'Model {model_name} not found', 'error')
        return redirect(url_for('custom_admin.dashboard'))
    
    model = config['model']
    
    # Get pagination parameters
    page = request.args.get('page', 1, type=int)
    per_page = request.args.get('per_page', 25, type=int)
    
    # Get filters and search
    filters = {}
    search_term = request.args.get('search', '').strip()
    
    # Build base query
    query = model.query
    
    # Apply eager loading for relationships to avoid N+1 queries
    list_display = config.get('list_display', [])
    for field in list_display:
        if '.' in field:  # Relationship field
            rel_name = field.split('.')[0]
            if hasattr(model, rel_name):
                query = query.options(joinedload(getattr(model, rel_name)))
    
    # Apply filters
    for filter_field in config.get('list_filter', []):
        filter_value = request.args.get(f'filter_{filter_field}')
        if filter_value:
            filters[filter_field] = filter_value
    
    query = AdminUtils.apply_filters(query, config, filters)
    
    # Apply search
    query = AdminUtils.apply_search(query, config, search_term)
    
    # Apply ordering
    ordering = config.get('ordering', ['id'])
    for order_field in ordering:
        if hasattr(model, order_field):
            query = query.order_by(getattr(model, order_field))
    
    # Get total count for statistics
    total_count = query.count()
    
    # Apply pagination
    try:
        pagination = query.paginate(
            page=page, 
            per_page=per_page, 
            error_out=False
        )
        objects = pagination.items
    except Exception as e:
        flash(f'Error loading data: {str(e)}', 'error')
        objects = []
        pagination = None
    
    # Get filter choices for dropdowns
    filter_choices = {}
    for filter_field in config.get('list_filter', []):
        if hasattr(model, filter_field):
            field = getattr(model, filter_field)
            
            # For foreign key fields, get related objects
            if hasattr(field.property, 'mapper'):
                related_model = field.property.mapper.class_
                choices = related_model.query.all()
                filter_choices[filter_field] = [(obj.id, str(getattr(obj, 'name', obj.id))) for obj in choices]
            # For boolean fields
            elif hasattr(field.type, 'python_type') and field.type.python_type == bool:
                filter_choices[filter_field] = [(True, 'Yes'), (False, 'No')]
            # For enum fields
            elif hasattr(field.type, 'enums'):
                filter_choices[filter_field] = [(enum, enum) for enum in field.type.enums]
    
    # Get navigation structure
    navigation = AdminConfig.get_navigation_structure()
    
    return render_template('admin/model_list.html',
                         config=config,
                         model_name=model_name,
                         objects=objects,
                         pagination=pagination,
                         total_count=total_count,
                         search_term=search_term,
                         filters=filters,
                         filter_choices=filter_choices,
                         navigation=navigation)

@admin_bp.route('/models/<model_name>/create', methods=['GET', 'POST'])
@login_required
def model_create(model_name):
    """Generic model create view"""
    config = AdminConfig.get_model_config(model_name)
    if not config:
        flash(f'Model {model_name} not found', 'error')
        return redirect(url_for('custom_admin.dashboard'))
    
    model = config['model']
    
    if request.method == 'POST':
        try:
            # Create new instance
            instance = model()
            
            # Set form fields
            form_fields = config.get('form_fields', {})
            for field_name, field_config in form_fields.items():
                field_value = request.form.get(field_name)
                
                # Handle different field types
                if field_config['type'] == 'checkbox':
                    field_value = bool(field_value)
                elif field_config['type'] == 'number':
                    field_value = int(field_value) if field_value else (field_config.get('default', 0) if field_config.get('required') else None)
                elif field_config['type'] == 'select' and field_value:
                    field_value = int(field_value)
                elif field_config['type'] == 'password' and field_value:
                    field_value = generate_password_hash(field_value)
                elif field_config['type'] == 'json' and field_value:
                    try:
                        field_value = json.loads(field_value)
                    except json.JSONDecodeError:
                        field_value = None
                elif not field_value and field_config.get('default') is not None:
                    field_value = field_config['default']
                
                # Skip readonly fields and empty non-required fields
                if field_name in config.get('readonly_fields', []):
                    continue
                
                if hasattr(instance, field_name):
                    setattr(instance, field_name, field_value)
            
            # Set audit fields
            if hasattr(instance, 'created_by'):
                instance.created_by = current_user.username
            if hasattr(instance, 'updated_by'):
                instance.updated_by = current_user.username
            
            # Save to database
            db.session.add(instance)
            db.session.commit()
            
            flash(f'{config["name"]} created successfully!', 'success')
            return redirect(url_for('custom_admin.model_list', model_name=model_name))
            
        except Exception as e:
            db.session.rollback()
            flash(f'Error creating {config["name"]}: {str(e)}', 'error')
    
    # Get form choices for select fields
    form_choices = {}
    form_fields = config.get('form_fields', {})
    for field_name, field_config in form_fields.items():
        if field_config['type'] == 'select':
            choices = AdminConfig.get_choices_for_field(model_name, field_name)
            form_choices[field_name] = choices
    
    navigation = AdminConfig.get_navigation_structure()
    
    return render_template('admin/model_form.html',
                         config=config,
                         model_name=model_name,
                         instance=None,
                         form_choices=form_choices,
                         navigation=navigation,
                         action='create')

@admin_bp.route('/models/<model_name>/<int:object_id>')
@login_required
def model_detail(model_name, object_id):
    """Generic model detail view"""
    config = AdminConfig.get_model_config(model_name)
    if not config:
        flash(f'Model {model_name} not found', 'error')
        return redirect(url_for('custom_admin.dashboard'))
    
    model = config['model']
    instance = model.query.get_or_404(object_id)
    
    # Get all fields for display
    inspector = inspect(model)
    all_fields = []
    
    # Add regular columns
    for column in inspector.columns:
        if column.name not in config.get('readonly_fields', []):
            all_fields.append({
                'name': column.name,
                'label': column.name.replace('_', ' ').title(),
                'value': AdminUtils.get_display_value(instance, column.name),
                'type': str(column.type)
            })
    
    # Add relationships
    for relationship in inspector.relationships:
        if relationship.direction.name == 'MANYTOONE':  # Foreign key relationships
            all_fields.append({
                'name': relationship.key,
                'label': relationship.key.replace('_', ' ').title(),
                'value': AdminUtils.get_display_value(instance, relationship.key),
                'type': 'relationship'
            })
    
    navigation = AdminConfig.get_navigation_structure()
    
    return render_template('admin/model_detail.html',
                         config=config,
                         model_name=model_name,
                         instance=instance,
                         all_fields=all_fields,
                         navigation=navigation)

@admin_bp.route('/models/<model_name>/<int:object_id>/edit', methods=['GET', 'POST'])
@login_required
def model_edit(model_name, object_id):
    """Generic model edit view"""
    config = AdminConfig.get_model_config(model_name)
    if not config:
        flash(f'Model {model_name} not found', 'error')
        return redirect(url_for('custom_admin.dashboard'))
    
    model = config['model']
    instance = model.query.get_or_404(object_id)
    
    if request.method == 'POST':
        try:
            # Update form fields
            form_fields = config.get('form_fields', {})
            for field_name, field_config in form_fields.items():
                # Skip readonly fields
                if field_name in config.get('readonly_fields', []):
                    continue
                
                field_value = request.form.get(field_name)
                
                # Handle different field types
                if field_config['type'] == 'checkbox':
                    field_value = bool(field_value)
                elif field_config['type'] == 'number':
                    field_value = int(field_value) if field_value else None
                elif field_config['type'] == 'select' and field_value:
                    # Check if this is an enum field
                    choices = field_config.get('choices', [])
                    if choices:
                        # This is an enum field, convert string back to enum
                        if hasattr(model, field_name):
                            column = getattr(model.__table__.columns, field_name, None)
                            if column is not None and hasattr(column.type, 'enum_class'):
                                enum_class = column.type.enum_class
                                for enum_val in enum_class:
                                    if enum_val.value == field_value:
                                        field_value = enum_val
                                        break
                    else:
                        # Regular foreign key field
                        field_value = int(field_value)
                elif field_config['type'] == 'password':
                    # Only update password if provided
                    if field_value:
                        field_value = generate_password_hash(field_value)
                    else:
                        continue
                elif field_config['type'] == 'json' and field_value:
                    try:
                        field_value = json.loads(field_value)
                    except json.JSONDecodeError:
                        field_value = None
                
                if hasattr(instance, field_name):
                    setattr(instance, field_name, field_value)
            
            # Set audit fields
            if hasattr(instance, 'updated_by'):
                instance.updated_by = current_user.username
            if hasattr(instance, 'updated_at'):
                instance.updated_at = datetime.utcnow()
            
            # Save to database
            db.session.commit()
            
            flash(f'{config["name"]} updated successfully!', 'success')
            return redirect(url_for('custom_admin.model_detail', model_name=model_name, object_id=object_id))
            
        except Exception as e:
            db.session.rollback()
            flash(f'Error updating {config["name"]}: {str(e)}', 'error')
    
    # Get current values for form
    current_values = {}
    form_fields = config.get('form_fields', {})
    
    for field_name, field_config in form_fields.items():
        current_values[field_name] = AdminUtils.get_field_value_for_form(instance, field_name, field_config)
    
    # Get form choices for select fields
    form_choices = {}
    for field_name, field_config in form_fields.items():
        if field_config['type'] == 'select':
            choices = AdminConfig.get_choices_for_field(model_name, field_name)
            form_choices[field_name] = choices
    
    navigation = AdminConfig.get_navigation_structure()
    
    return render_template('admin/model_form.html',
                         config=config,
                         model_name=model_name,
                         instance=instance,
                         current_values=current_values,
                         form_choices=form_choices,
                         navigation=navigation,
                         action='edit')

@admin_bp.route('/models/<model_name>/<int:object_id>/delete', methods=['POST'])
@login_required
def model_delete(model_name, object_id):
    """Generic model delete view"""
    config = AdminConfig.get_model_config(model_name)
    if not config:
        flash(f'Model {model_name} not found', 'error')
        return redirect(url_for('custom_admin.dashboard'))
    
    model = config['model']
    instance = model.query.get_or_404(object_id)
    
    try:
        # Check for dependencies using the safe count method
        inspector = inspect(model)
        dependencies = []
        
        for relationship in inspector.relationships:
            if relationship.direction.name == 'ONETOMANY':
                # Use the safe count method from AdminUtils
                count = AdminUtils.get_relationship_count(instance, relationship.key)
                
                if count > 0:
                    dependencies.append(f'{relationship.key}: {count} records')
        
        if dependencies:
            flash(f'Cannot delete {config["name"]}. Dependencies found: {", ".join(dependencies)}', 'error')
            return redirect(url_for('custom_admin.model_detail', model_name=model_name, object_id=object_id))
        
        # Delete the instance
        db.session.delete(instance)
        db.session.commit()
        
        flash(f'{config["name"]} deleted successfully!', 'success')
        return redirect(url_for('custom_admin.model_list', model_name=model_name))
        
    except Exception as e:
        db.session.rollback()
        flash(f'Error deleting {config["name"]}: {str(e)}', 'error')
        return redirect(url_for('custom_admin.model_detail', model_name=model_name, object_id=object_id))

# API endpoints for AJAX operations
@admin_bp.route('/api/models/<model_name>/choices/<field_name>')
@login_required
def get_field_choices(model_name, field_name):
    """Get choices for a specific field via AJAX"""
    try:
        choices = AdminConfig.get_choices_for_field(model_name, field_name)
        return jsonify(choices)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@admin_bp.route('/api/models/<model_name>/bulk-action', methods=['POST'])
@login_required
def bulk_action(model_name):
    """Handle bulk actions on multiple objects"""
    config = AdminConfig.get_model_config(model_name)
    if not config:
        return jsonify({'error': 'Model not found'}), 404
    
    model = config['model']
    action = request.json.get('action')
    object_ids = request.json.get('object_ids', [])
    
    if not action or not object_ids:
        return jsonify({'error': 'Action and object IDs required'}), 400
    
    try:
        objects = model.query.filter(model.id.in_(object_ids)).all()
        
        if action == 'delete':
            for obj in objects:
                db.session.delete(obj)
            db.session.commit()
            return jsonify({'message': f'Deleted {len(objects)} records'})
        
        elif action == 'activate' and hasattr(model, 'is_active'):
            for obj in objects:
                obj.is_active = True
            db.session.commit()
            return jsonify({'message': f'Activated {len(objects)} records'})
        
        elif action == 'deactivate' and hasattr(model, 'is_active'):
            for obj in objects:
                obj.is_active = False
            db.session.commit()
            return jsonify({'message': f'Deactivated {len(objects)} records'})
        
        else:
            return jsonify({'error': 'Unknown action'}), 400
    
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

# Template context processors and filters
@admin_bp.context_processor
def admin_context():
    """Add common variables to admin templates"""
    return {
        'admin_navigation': AdminConfig.get_navigation_structure(),
        'admin_utils': AdminUtils,
        'current_time': datetime.utcnow()
    }

@admin_bp.app_template_filter('admin_display_value')
def admin_display_value_filter(obj, field_name):
    """Template filter to get display value for any field"""
    return AdminUtils.get_display_value(obj, field_name)

@admin_bp.app_template_filter('relationship_count')
def relationship_count_filter(obj, relationship_name):
    """Template filter to safely get relationship count"""
    return AdminUtils.get_relationship_count(obj, relationship_name)

================
File: custom_admin/templates/admin/base.html
================
<!-- templates/admin/base.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="csrf-token" content="{{ csrf_token() }}">
    <title>{% block title %}Admin - Port Management System{% endblock %}</title>
    
    <!-- Bootstrap 4 CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <!-- Custom Admin CSS -->
    <style>
        :root {
            --admin-primary: #007bff;
            --admin-secondary: #6c757d;
            --admin-success: #28a745;
            --admin-info: #17a2b8;
            --admin-warning: #ffc107;
            --admin-danger: #dc3545;
            --admin-light: #f8f9fa;
            --admin-dark: #343a40;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
            background-color: #f4f6f9;
            font-size: 14px;
        }
        
        /* Sidebar */
        .admin-sidebar {
            position: fixed;
            top: 0;
            left: 0;
            width: 250px;
            height: 100vh;
            background: linear-gradient(180deg, #2c3e50 0%, #34495e 100%);
            color: white;
            overflow-y: auto;
            z-index: 1030;
            transition: all 0.3s ease;
        }
        
        .admin-sidebar.collapsed {
            width: 70px;
        }
        
        .sidebar-brand {
            padding: 20px 15px;
            text-align: center;
            border-bottom: 1px solid rgba(255,255,255,0.1);
            background: rgba(0,0,0,0.1);
        }
        
        .sidebar-brand h4 {
            margin: 0;
            font-size: 18px;
            font-weight: 600;
        }
        
        .sidebar-brand .brand-text {
            transition: opacity 0.3s ease;
        }
        
        .admin-sidebar.collapsed .brand-text {
            opacity: 0;
        }
        
        .sidebar-nav {
            padding: 15px 0;
        }
        
        .nav-category {
            margin-bottom: 20px;
        }
        
        .nav-category-title {
            padding: 8px 15px;
            font-size: 11px;
            text-transform: uppercase;
            font-weight: 600;
            color: rgba(255,255,255,0.6);
            letter-spacing: 0.5px;
            border-bottom: 1px solid rgba(255,255,255,0.1);
            margin-bottom: 5px;
            transition: opacity 0.3s ease;
        }
        
        .admin-sidebar.collapsed .nav-category-title {
            opacity: 0;
            height: 1px;
            padding: 0;
            margin: 0;
            overflow: hidden;
        }
        
        .nav-item {
            margin: 1px 8px;
        }
        
        .nav-link {
            display: flex;
            align-items: center;
            padding: 10px 12px;
            color: rgba(255,255,255,0.8);
            text-decoration: none;
            border-radius: 6px;
            transition: all 0.2s ease;
            font-size: 13px;
            position: relative;
        }
        
        .nav-link:hover {
            background: rgba(255,255,255,0.1);
            color: white;
            text-decoration: none;
            transform: translateX(2px);
        }
        
        .nav-link.active {
            background: var(--admin-primary);
            color: white;
            box-shadow: 0 2px 8px rgba(0, 123, 255, 0.3);
        }
        
        .nav-link i {
            width: 18px;
            margin-right: 10px;
            text-align: center;
            font-size: 14px;
        }
        
        .nav-link-text {
            transition: opacity 0.3s ease;
        }
        
        .admin-sidebar.collapsed .nav-link-text {
            opacity: 0;
        }
        
        /* Tooltip for collapsed sidebar */
        .admin-sidebar.collapsed .nav-link {
            justify-content: center;
            position: relative;
        }
        
        .admin-sidebar.collapsed .nav-link::after {
            content: attr(data-tooltip);
            position: absolute;
            left: 60px;
            top: 50%;
            transform: translateY(-50%);
            background: #333;
            color: white;
            padding: 5px 10px;
            border-radius: 4px;
            font-size: 12px;
            white-space: nowrap;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.3s ease;
            z-index: 1000;
        }
        
        .admin-sidebar.collapsed .nav-link:hover::after {
            opacity: 1;
        }
        
        /* Main content */
        .admin-main {
            margin-left: 250px;
            min-height: 100vh;
            transition: margin-left 0.3s ease;
        }
        
        .admin-main.expanded {
            margin-left: 70px;
        }
        
        /* Header */
        .admin-header {
            background: white;
            padding: 15px 25px;
            border-bottom: 1px solid #dee2e6;
            box-shadow: 0 2px 4px rgba(0,0,0,0.04);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .header-left {
            display: flex;
            align-items: center;
        }
        
        .sidebar-toggle {
            background: none;
            border: none;
            font-size: 18px;
            color: var(--admin-secondary);
            margin-right: 15px;
            cursor: pointer;
            transition: color 0.2s ease;
        }
        
        .sidebar-toggle:hover {
            color: var(--admin-primary);
        }
        
        .breadcrumb {
            background: none;
            padding: 0;
            margin: 0;
            font-size: 13px;
        }
        
        .breadcrumb-item a {
            color: var(--admin-primary);
            text-decoration: none;
        }
        
        .breadcrumb-item.active {
            font-weight: 600;
        }
        
        /* Content */
        .admin-content {
            padding: 25px;
        }
        
        .page-header {
            margin-bottom: 25px;
        }
        
        .page-title {
            font-size: 24px;
            font-weight: 600;
            color: var(--admin-dark);
            margin: 0;
        }
        
        .page-subtitle {
            color: var(--admin-secondary);
            margin: 5px 0 0 0;
            font-size: 14px;
        }
        
        /* Cards */
        .card {
            border: none;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.08);
            margin-bottom: 20px;
        }
        
        .card-header {
            background: #f8f9fa;
            border-bottom: 1px solid #dee2e6;
            padding: 15px 20px;
            font-weight: 600;
            font-size: 16px;
        }
        
        .card-body {
            padding: 20px;
        }
        
        /* Tables */
        .table {
            font-size: 13px;
            margin-bottom: 0;
        }
        
        .table th {
            border-top: none;
            border-bottom: 2px solid #dee2e6;
            font-weight: 600;
            color: var(--admin-dark);
            background: #f8f9fa;
            padding: 12px 8px;
            font-size: 12px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .table td {
            padding: 12px 8px;
            vertical-align: middle;
            border-top: 1px solid #f0f0f0;
        }
        
        .table-hover tbody tr:hover {
            background-color: #f8f9fa;
        }
        
        /* Buttons */
        .btn {
            font-size: 13px;
            font-weight: 500;
            border-radius: 6px;
            padding: 8px 16px;
            transition: all 0.2s ease;
        }
        
        .btn-sm {
            padding: 4px 8px;
            font-size: 12px;
        }
        
        .btn-primary {
            background: var(--admin-primary);
            border-color: var(--admin-primary);
        }
        
        .btn-primary:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(0, 123, 255, 0.3);
        }
        
        /* Forms */
        .form-group label {
            font-weight: 600;
            color: var(--admin-dark);
            margin-bottom: 5px;
        }
        
        .form-control {
            border-radius: 6px;
            border: 1px solid #ced4da;
            font-size: 14px;
            transition: all 0.2s ease;
        }
        
        .form-control:focus {
            border-color: var(--admin-primary);
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }
        
        /* Alerts */
        .alert {
            border-radius: 6px;
            border: none;
            font-size: 14px;
            margin-bottom: 20px;
        }
        
        .alert-success {
            background: #d4edda;
            color: #155724;
            border-left: 4px solid var(--admin-success);
        }
        
        .alert-danger {
            background: #f8d7da;
            color: #721c24;
            border-left: 4px solid var(--admin-danger);
        }
        
        .alert-warning {
            background: #fff3cd;
            color: #856404;
            border-left: 4px solid var(--admin-warning);
        }
        
        .alert-info {
            background: #d1ecf1;
            color: #0c5460;
            border-left: 4px solid var(--admin-info);
        }
        
        /* Badges */
        .badge {
            font-size: 11px;
            font-weight: 500;
            padding: 4px 8px;
        }
        
        /* Action buttons */
        .btn-action {
            padding: 4px 8px;
            margin: 0 2px;
            border-radius: 4px;
            font-size: 12px;
            border: none;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .btn-view {
            background: #e3f2fd;
            color: #1976d2;
        }
        
        .btn-view:hover {
            background: #1976d2;
            color: white;
        }
        
        .btn-edit {
            background: #f3e5f5;
            color: #7b1fa2;
        }
        
        .btn-edit:hover {
            background: #7b1fa2;
            color: white;
        }
        
        .btn-delete {
            background: #ffebee;
            color: #c62828;
        }
        
        .btn-delete:hover {
            background: #c62828;
            color: white;
        }
        
        /* Stats cards */
        .stats-card {
            background: white;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.08);
            text-align: center;
            transition: transform 0.2s ease;
            margin-bottom: 20px;
        }
        
        .stats-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.12);
        }
        
        .stats-number {
            font-size: 28px;
            font-weight: 700;
            margin-bottom: 5px;
        }
        
        .stats-label {
            color: var(--admin-secondary);
            font-size: 13px;
            font-weight: 500;
        }
        
        /* Loading */
        .loading {
            opacity: 0.6;
            pointer-events: none;
        }
        
        .spinner-border-sm {
            width: 1rem;
            height: 1rem;
        }
        
        /* Responsive */
        @media (max-width: 768px) {
            .admin-sidebar {
                transform: translateX(-100%);
            }
            
            .admin-sidebar.show {
                transform: translateX(0);
            }
            
            .admin-main {
                margin-left: 0;
            }
            
            .admin-main.expanded {
                margin-left: 0;
            }
            
            .admin-content {
                padding: 15px;
            }
        }
        
        /* Checkbox styling */
        .custom-checkbox {
            margin-right: 10px;
        }
        
        /* Pagination */
        .pagination {
            margin: 20px 0;
        }
        
        .page-link {
            color: var(--admin-primary);
            border-color: #dee2e6;
        }
        
        .page-item.active .page-link {
            background-color: var(--admin-primary);
            border-color: var(--admin-primary);
        }
        
        /* JSON Editor */
        .json-editor {
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            font-size: 12px;
            background: #f8f9fa;
            border: 1px solid #ced4da;
            border-radius: 4px;
            padding: 10px;
        }
        
        /* Search and filter */
        .filters-section {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 6px;
            margin-bottom: 20px;
        }
        
        .filter-toggle {
            cursor: pointer;
            color: var(--admin-primary);
            font-weight: 500;
        }
    </style>
    
    {% block extra_css %}{% endblock %}
</head>
<body>
    <!-- Sidebar -->
    <div class="admin-sidebar" id="adminSidebar">
        <div class="sidebar-brand">
            <h4>
                <i class="fas fa-anchor"></i>
                <span class="brand-text">PortWiz Admin</span>
            </h4>
        </div>
        
        <nav class="sidebar-nav">
            <!-- Dashboard -->
            <div class="nav-item">
                <a href="{{ url_for('custom_admin.dashboard') }}" 
                   class="nav-link {{ 'active' if request.endpoint == 'custom_admin.dashboard' else '' }}"
                   data-tooltip="Dashboard">
                    <i class="fas fa-tachometer-alt"></i>
                    <span class="nav-link-text">Dashboard</span>
                </a>
            </div>
            
            <!-- Dynamic Navigation -->
            {% for category, category_data in navigation.items() %}
            <div class="nav-category">
                <div class="nav-category-title">
                    <i class="{{ category_data.icon }}"></i>
                    {{ category }}
                </div>
                {% for model in category_data.models %}
                <div class="nav-item">
                    <a href="{{ model.url }}" 
                       class="nav-link"
                       data-tooltip="{{ model.name }}">
                        <i class="{{ model.icon }}"></i>
                        <span class="nav-link-text">{{ model.name }}</span>
                    </a>
                </div>
                {% endfor %}
            </div>
            {% endfor %}
        </nav>
    </div>
    
    <!-- Main Content -->
    <div class="admin-main" id="adminMain">
        <!-- Header -->
        <header class="admin-header">
            <div class="header-left">
                <button class="sidebar-toggle" id="sidebarToggle" type="button">
                    <i class="fas fa-bars"></i>
                </button>
                {% block breadcrumb %}
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item">
                            <a href="{{ url_for('custom_admin.dashboard') }}">
                                <i class="fas fa-home"></i> Admin
                            </a>
                        </li>
                        {% if config %}
                        <li class="breadcrumb-item">
                            <a href="{{ url_for('custom_admin.model_list', model_name=model_name) }}">
                                {{ config.name_plural }}
                            </a>
                        </li>
                        {% endif %}
                    </ol>
                </nav>
                {% endblock %}
            </div>
            
            <div class="header-right">
                <div class="dropdown">
                    <button class="btn btn-outline-secondary btn-sm dropdown-toggle" 
                            type="button" data-toggle="dropdown">
                        <i class="fas fa-user"></i>
                        {{ current_user.full_name or current_user.username }}
                    </button>
                    <div class="dropdown-menu dropdown-menu-right">
                        <a class="dropdown-item" href="{{ url_for('dashboard') }}">
                            <i class="fas fa-home"></i> Main Dashboard
                        </a>
                        <div class="dropdown-divider"></div>
                        <a class="dropdown-item" href="{{ url_for('logout') }}">
                            <i class="fas fa-sign-out-alt"></i> Logout
                        </a>
                    </div>
                </div>
            </div>
        </header>
        
        <!-- Content -->
        <main class="admin-content">
            <!-- Flash Messages -->
            {% with messages = get_flashed_messages(with_categories=true) %}
                {% if messages %}
                    {% for category, message in messages %}
                        <div class="alert alert-{{ 'danger' if category == 'error' else category }} alert-dismissible fade show">
                            <i class="fas fa-{{ 'check-circle' if category == 'success' else 'exclamation-triangle' if category == 'warning' else 'times-circle' if category == 'error' else 'info-circle' }}"></i>
                            {{ message }}
                            <button type="button" class="close" data-dismiss="alert">
                                <span>&times;</span>
                            </button>
                        </div>
                    {% endfor %}
                {% endif %}
            {% endwith %}
            
            {% block content %}{% endblock %}
        </main>
    </div>
    
    <!-- Bootstrap 4 JS and dependencies -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.min.js"></script>
    
    <!-- Custom Admin JavaScript -->
    <script>
        $(document).ready(function() {
            // Sidebar toggle
            $('#sidebarToggle').click(function() {
                $('#adminSidebar').toggleClass('collapsed');
                $('#adminMain').toggleClass('expanded');
                
                // Store preference
                localStorage.setItem('sidebarCollapsed', $('#adminSidebar').hasClass('collapsed'));
            });
            
            // Restore sidebar state
            if (localStorage.getItem('sidebarCollapsed') === 'true') {
                $('#adminSidebar').addClass('collapsed');
                $('#adminMain').addClass('expanded');
            }
            
            // Mobile sidebar toggle
            $(window).resize(function() {
                if ($(window).width() <= 768) {
                    $('#adminSidebar').removeClass('collapsed');
                    $('#adminMain').removeClass('expanded');
                }
            });
            
            // Set active nav link
            var currentPath = window.location.pathname;
            $('.nav-link').each(function() {
                if ($(this).attr('href') === currentPath) {
                    $(this).addClass('active');
                }
            });
            
            // Auto-hide alerts
            setTimeout(function() {
                $('.alert').fadeOut('slow');
            }, 5000);
            
            // Form validation
            $('form').on('submit', function(e) {
                var isValid = true;
                $(this).find('[required]').each(function() {
                    if (!$(this).val().trim()) {
                        $(this).addClass('is-invalid');
                        isValid = false;
                    } else {
                        $(this).removeClass('is-invalid');
                    }
                });
                
                if (!isValid) {
                    e.preventDefault();
                    showAlert('Please fill in all required fields.', 'danger');
                    return false;
                }
            });
            
            // Remove validation on input
            $('.form-control').on('input', function() {
                $(this).removeClass('is-invalid');
            });
            
            // Confirm delete
            $('.btn-delete, .delete-btn').click(function(e) {
                if (!confirm('Are you sure you want to delete this item? This action cannot be undone.')) {
                    e.preventDefault();
                    return false;
                }
            });
            
            // Bulk actions
            $('#selectAll').change(function() {
                $('.select-row').prop('checked', $(this).prop('checked'));
                updateBulkActions();
            });
            
            $('.select-row').change(function() {
                updateBulkActions();
            });
            
            $('#bulkActionBtn').click(function() {
                var action = $('#bulkAction').val();
                var selectedIds = [];
                
                $('.select-row:checked').each(function() {
                    selectedIds.push($(this).val());
                });
                
                if (selectedIds.length === 0) {
                    showAlert('Please select items to perform bulk action.', 'warning');
                    return;
                }
                
                if (!confirm(`Are you sure you want to ${action} ${selectedIds.length} items?`)) {
                    return;
                }
                
                performBulkAction(action, selectedIds);
            });
            
            // Search functionality
            $('#searchForm').on('submit', function(e) {
                var searchTerm = $('#searchInput').val().trim();
                if (!searchTerm) {
                    e.preventDefault();
                    return false;
                }
            });
            
            // Filter toggle
            $('.filter-toggle').click(function() {
                $('.filters-section .collapse').collapse('toggle');
                $(this).find('i').toggleClass('fa-chevron-down fa-chevron-up');
            });
            
            // Dependent dropdowns
            $('[data-dependent]').change(function() {
                var dependentField = $(this).data('dependent');
                var sourceValue = $(this).val();
                
                if (sourceValue) {
                    loadDependentChoices(dependentField, $(this).data('source'), sourceValue);
                } else {
                    $('#' + dependentField).html('<option value="">Select...</option>');
                }
            });
            
            // JSON editor formatting
            $('.json-editor').each(function() {
                try {
                    var jsonText = $(this).val();
                    if (jsonText) {
                        var formatted = JSON.stringify(JSON.parse(jsonText), null, 2);
                        $(this).val(formatted);
                    }
                } catch (e) {
                    // Invalid JSON, leave as is
                }
            });
        });
        
        // Helper functions
        function showAlert(message, type) {
            var alertHtml = `
                <div class="alert alert-${type} alert-dismissible fade show">
                    <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'danger' ? 'times-circle' : 'info-circle'}"></i>
                    ${message}
                    <button type="button" class="close" data-dismiss="alert">
                        <span>&times;</span>
                    </button>
                </div>
            `;
            $('.admin-content').prepend(alertHtml);
            
            setTimeout(function() {
                $('.alert').first().fadeOut('slow', function() {
                    $(this).remove();
                });
            }, 5000);
        }
        
        function updateBulkActions() {
            var selectedCount = $('.select-row:checked').length;
            if (selectedCount > 0) {
                $('#bulkActions').show();
                $('#selectedCount').text(selectedCount);
            } else {
                $('#bulkActions').hide();
            }
        }
        
        function performBulkAction(action, selectedIds) {
            var modelName = $('#bulkActionForm').data('model');
            
            $.ajax({
                url: `/custom-admin/api/models/${modelName}/bulk-action`,
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': $('meta[name=csrf-token]').attr('content')
                },
                data: JSON.stringify({
                    action: action,
                    object_ids: selectedIds
                }),
                success: function(response) {
                    showAlert(response.message, 'success');
                    setTimeout(function() {
                        location.reload();
                    }, 1500);
                },
                error: function(xhr) {
                    var errorMsg = xhr.responseJSON ? xhr.responseJSON.error : 'An error occurred';
                    showAlert(errorMsg, 'danger');
                }
            });
        }
        
        function loadDependentChoices(fieldId, sourceModel, sourceValue) {
            var fieldName = $('#' + fieldId).data('field');
            
            $.ajax({
                url: `/custom-admin/api/models/${sourceModel}/choices/${fieldName}`,
                method: 'GET',
                data: { parent_id: sourceValue },
                success: function(choices) {
                    var $field = $('#' + fieldId);
                    $field.html('<option value="">Select...</option>');
                    
                    choices.forEach(function(choice) {
                        $field.append(`<option value="${choice[0]}">${choice[1]}</option>`);
                    });
                },
                error: function() {
                    showAlert('Error loading dependent choices', 'danger');
                }
            });
        }
        
        function setLoading(element, loading) {
            if (loading) {
                $(element).prop('disabled', true);
                var originalText = $(element).text();
                $(element).data('original-text', originalText);
                $(element).html('<span class="spinner-border spinner-border-sm mr-2"></span>Loading...');
            } else {
                $(element).prop('disabled', false);
                $(element).text($(element).data('original-text'));
            }
        }
        
        // CSRF token for AJAX requests
        $.ajaxSetup({
            beforeSend: function(xhr, settings) {
                if (!/^(GET|HEAD|OPTIONS|TRACE)$/i.test(settings.type) && !this.crossDomain) {
                    xhr.setRequestHeader("X-CSRFToken", $('meta[name=csrf-token]').attr('content'));
                }
            }
        });
        
        // Export functionality
        function exportData(format) {
            var url = new URL(window.location.href);
            url.searchParams.set('export', format);
            window.open(url.toString(), '_blank');
        }
        
        // Quick search
        function quickSearch() {
            var searchTerm = $('#quickSearch').val().toLowerCase();
            $('.searchable-row').each(function() {
                var text = $(this).text().toLowerCase();
                if (text.includes(searchTerm)) {
                    $(this).show();
                } else {
                    $(this).hide();
                }
            });
        }
        
        // Auto-save for forms (optional)
        function enableAutoSave() {
            var formData = {};
            
            $('form .form-control').on('change', function() {
                var fieldName = $(this).attr('name');
                var fieldValue = $(this).val();
                formData[fieldName] = fieldValue;
                
                // Save to localStorage
                localStorage.setItem('formDraft_' + window.location.pathname, JSON.stringify(formData));
                
                // Show auto-save indicator
                showAutoSaveIndicator();
            });
        }
        
        function showAutoSaveIndicator() {
            if (!$('.auto-save-indicator').length) {
                $('form').append('<div class="auto-save-indicator text-muted"><i class="fas fa-save"></i> Auto-saved</div>');
                setTimeout(function() {
                    $('.auto-save-indicator').fadeOut(function() {
                        $(this).remove();
                    });
                }, 2000);
            }
        }
        
        // Initialize tooltips and popovers
        $('[data-toggle="tooltip"]').tooltip();
        $('[data-toggle="popover"]').popover();
    </script>
    
    {% block extra_js %}{% endblock %}
</body>
</html>

================
File: custom_admin/templates/admin/dashboard.html
================
<!-- templates/admin/dashboard.html -->
{% extends "admin/base.html" %}

{% block title %}Admin Dashboard - Port Management System{% endblock %}

{% block content %}
<div class="page-header">
    <h1 class="page-title">
        <i class="fas fa-tachometer-alt"></i>
        Admin Dashboard
    </h1>
    <p class="page-subtitle">Overview of your Port Management System</p>
</div>

<!-- Statistics Cards -->
<div class="row">
    {% for model_key, stat in stats.items() %}
    <div class="col-lg-3 col-md-6 mb-4">
        <div class="stats-card">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <div>
                    <i class="{{ stat.icon }} text-primary" style="font-size: 24px;"></i>
                </div>
                <div class="text-right">
                    <div class="stats-number text-primary">{{ stat.total }}</div>
                    {% if stat.active != stat.total %}
                    <small class="text-muted">{{ stat.active }} active</small>
                    {% endif %}
                </div>
            </div>
            <div class="d-flex justify-content-between align-items-center">
                <h6 class="stats-label mb-0">{{ stat.name }}</h6>
                <a href="{{ stat.url }}" class="btn btn-outline-primary btn-sm">
                    <i class="fas fa-arrow-right"></i>
                </a>
            </div>
        </div>
    </div>
    {% endfor %}
</div>

<!-- Quick Actions -->
<div class="row">
    <div class="col-lg-8">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="fas fa-bolt"></i>
                    Quick Actions
                </h5>
            </div>
            <div class="card-body">
                <div class="row">
                    {% set quick_actions = [
                        {'name': 'Add Application', 'url': url_for('custom_admin.model_create', model_name='application'), 'icon': 'fas fa-plus-circle', 'color': 'primary'},
                        {'name': 'Add Module', 'url': url_for('custom_admin.model_create', model_name='module'), 'icon': 'fas fa-folder-plus', 'color': 'success'},
                        {'name': 'Add Entity Type', 'url': url_for('custom_admin.model_create', model_name='entity_type'), 'icon': 'fas fa-table', 'color': 'info'},
                        {'name': 'Add User', 'url': url_for('custom_admin.model_create', model_name='user'), 'icon': 'fas fa-user-plus', 'color': 'warning'},
                        {'name': 'Add Role', 'url': url_for('custom_admin.model_create', model_name='role'), 'icon': 'fas fa-shield-alt', 'color': 'secondary'},
                        {'name': 'Add Lookup Type', 'url': url_for('custom_admin.model_create', model_name='lookup_type'), 'icon': 'fas fa-tags', 'color': 'dark'}
                    ] %}
                    
                    {% for action in quick_actions %}
                    <div class="col-lg-4 col-md-6 mb-3">
                        <a href="{{ action.url }}" class="btn btn-outline-{{ action.color }} btn-block text-left">
                            <i class="{{ action.icon }}"></i>
                            {{ action.name }}
                        </a>
                    </div>
                    {% endfor %}
                </div>
            </div>
        </div>
    </div>
    
    <div class="col-lg-4">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="fas fa-info-circle"></i>
                    System Information
                </h5>
            </div>
            <div class="card-body">
                <table class="table table-sm table-borderless">
                    <tr>
                        <td><strong>Version:</strong></td>
                        <td>1.0.0</td>
                    </tr>
                    <tr>
                        <td><strong>Environment:</strong></td>
                        <td><span class="badge badge-warning">Development</span></td>
                    </tr>
                    <tr>
                        <td><strong>Database:</strong></td>
                        <td>SQLite</td>
                    </tr>
                    <tr>
                        <td><strong>Current User:</strong></td>
                        <td>{{ current_user.full_name or current_user.username }}</td>
                    </tr>
                    <tr>
                        <td><strong>Last Login:</strong></td>
                        <td>{{ current_user.last_login.strftime('%Y-%m-%d %H:%M') if current_user.last_login else 'First login' }}</td>
                    </tr>
                </table>
                
                <hr>
                
                <div class="text-center">
                    <a href="{{ url_for('dashboard') }}" class="btn btn-primary btn-sm">
                        <i class="fas fa-home"></i>
                        Main Dashboard
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Recent Activities -->
{% if recent_activities %}
<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="fas fa-history"></i>
                    Recent Activities
                </h5>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Action</th>
                                <th>User</th>
                                <th>Time</th>
                                <th>IP Address</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for activity in recent_activities %}
                            <tr>
                                <td>{{ activity.action }}</td>
                                <td>{{ activity.user }}</td>
                                <td>{{ activity.time.strftime('%Y-%m-%d %H:%M:%S') }}</td>
                                <td>{{ activity.ip or 'N/A' }}</td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
{% endif %}

<!-- Categories Overview -->
<div class="row">
    {% for category, category_data in navigation.items() %}
    <div class="col-lg-4 col-md-6 mb-4">
        <div class="card">
            <div class="card-header">
                <h6 class="mb-0">
                    <i class="{{ category_data.icon }}"></i>
                    {{ category }}
                </h6>
            </div>
            <div class="card-body">
                <div class="list-group list-group-flush">
                    {% for model in category_data.models %}
                    <a href="{{ model.url }}" class="list-group-item list-group-item-action d-flex justify-content-between align-items-center">
                        <div>
                            <i class="{{ model.icon }}"></i>
                            {{ model.name }}
                        </div>
                        {% set model_stat = stats.get(model.key.replace('-', '_')) %}
                        {% if model_stat %}
                        <span class="badge badge-primary badge-pill">{{ model_stat.total }}</span>
                        {% endif %}
                    </a>
                    {% endfor %}
                </div>
            </div>
        </div>
    </div>
    {% endfor %}
</div>

<!-- Charts Section (Optional - can be expanded) -->
<div class="row">
    <div class="col-lg-6">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="fas fa-chart-pie"></i>
                    Data Distribution
                </h5>
            </div>
            <div class="card-body">
                <canvas id="dataDistributionChart" height="200"></canvas>
            </div>
        </div>
    </div>
    
    <div class="col-lg-6">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="fas fa-chart-line"></i>
                    Activity Trend
                </h5>
            </div>
            <div class="card-body">
                <canvas id="activityTrendChart" height="200"></canvas>
            </div>
        </div>
    </div>
</div>

{% endblock %}

{% block extra_js %}
<!-- Chart.js for charts (optional) -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    $(document).ready(function() {
        // Initialize charts
        initializeCharts();
        
        // Auto-refresh dashboard every 5 minutes
        setInterval(function() {
            console.log('Auto-refreshing dashboard stats...');
            // You can implement AJAX refresh here
        }, 5 * 60 * 1000);
    });
    
    function initializeCharts() {
        // Data Distribution Chart
        var ctx1 = document.getElementById('dataDistributionChart').getContext('2d');
        var dataDistributionChart = new Chart(ctx1, {
            type: 'doughnut',
            data: {
                labels: [
                    {% for model_key, stat in stats.items() %}
                    '{{ stat.name }}'{% if not loop.last %},{% endif %}
                    {% endfor %}
                ],
                datasets: [{
                    data: [
                        {% for model_key, stat in stats.items() %}
                        {{ stat.total }}{% if not loop.last %},{% endif %}
                        {% endfor %}
                    ],
                    backgroundColor: [
                        '#007bff', '#28a745', '#ffc107', '#dc3545', 
                        '#17a2b8', '#6f42c1', '#fd7e14', '#20c997'
                    ]
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                legend: {
                    position: 'bottom'
                }
            }
        });
        
        // Activity Trend Chart (sample data)
        var ctx2 = document.getElementById('activityTrendChart').getContext('2d');
        var activityTrendChart = new Chart(ctx2, {
            type: 'line',
            data: {
                labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
                datasets: [{
                    label: 'Activities',
                    data: [12, 19, 8, 15, 22, 8, 16],
                    borderColor: '#007bff',
                    backgroundColor: 'rgba(0, 123, 255, 0.1)',
                    tension: 0.4
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    }
    
    // Refresh stats
    function refreshStats() {
        $.ajax({
            url: '{{ url_for("custom_admin.dashboard") }}',
            method: 'GET',
            success: function() {
                location.reload();
            },
            error: function() {
                showAlert('Error refreshing dashboard', 'danger');
            }
        });
    }
</script>
{% endblock %}

================
File: custom_admin/templates/admin/entity_data_view.html
================
{% extends 'admin/base.html' %}

{% block body %}
<div class="admin-full-width">
    <h2>{{ entity_type.name }} Data</h2>
    <p>Data records for {{ entity_type.name }} entity type.</p>
    
    <div style="margin-bottom: 15px;">
        <a href="{{ url_for('.index') }}" class="btn btn-secondary">← Back to Entity Types</a>
    </div>
    
    {% if instances_data %}
    <div class="table-responsive">
        <table class="table table-striped" style="font-size: 12px;">
            <thead>
                <tr style="background-color: #f8f9fa;">
                    <th>ID</th>
                    <th>Instance Code</th>
                    <th>Status</th>
                    <th>Created At</th>
                    <th>Updated At</th>
                </tr>
            </thead>
            <tbody>
                {% for instance in instances_data %}
                <tr>
                    <td>{{ instance.id }}</td>
                    <td>{{ instance.instance_code or '-' }}</td>
                    <td>{{ instance.workflow_status or 'Active' }}</td>
                    <td>{{ instance.created_at.strftime('%Y-%m-%d %H:%M') if instance.created_at else '-' }}</td>
                    <td>{{ instance.updated_at.strftime('%Y-%m-%d %H:%M') if instance.updated_at else '-' }}</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
    
    {% if pagination and pagination.pages > 1 %}
    <div style="text-align: center; margin-top: 20px;">
        {% if pagination.has_prev %}
        <a href="{{ url_for('.view_entity_data', entity_type_id=entity_type.id, page=pagination.prev_num) }}" 
           class="btn btn-sm btn-outline-primary">« Previous</a>
        {% endif %}
        
        {% for page_num in pagination.iter_pages() %}
            {% if page_num %}
                {% if page_num != pagination.page %}
                <a href="{{ url_for('.view_entity_data', entity_type_id=entity_type.id, page=page_num) }}" 
                   class="btn btn-sm btn-outline-primary">{{ page_num }}</a>
                {% else %}
                <span class="btn btn-sm btn-primary">{{ page_num }}</span>
                {% endif %}
            {% else %}
            <span class="btn btn-sm btn-outline-secondary disabled">...</span>
            {% endif %}
        {% endfor %}
        
        {% if pagination.has_next %}
        <a href="{{ url_for('.view_entity_data', entity_type_id=entity_type.id, page=pagination.next_num) }}" 
           class="btn btn-sm btn-outline-primary">Next »</a>
        {% endif %}
    </div>
    {% endif %}
    
    {% else %}
    <div class="text-center" style="margin-top: 50px;">
        <p>No data records found for this entity type.</p>
    </div>
    {% endif %}
</div>
{% endblock %}

================
File: custom_admin/templates/admin/entity_data.html
================
{% extends 'admin/base.html' %}

{% block body %}
<div class="admin-full-width">
    <h2>Entity Data Viewer</h2>
    <p>Browse and view data for all entity types in the system.</p>
    
    {% if entity_types %}
    <div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); gap: 15px; margin-top: 20px;">
        {% for entity_type in entity_types %}
        <div style="border: 1px solid #ddd; border-radius: 4px; padding: 15px; background: white;">
            <div style="font-weight: 600; margin-bottom: 8px;">{{ entity_type.name }}</div>
            <div style="font-size: 12px; color: #666; margin-bottom: 10px;">{{ entity_type.description or 'No description' }}</div>
            <div style="font-size: 11px; color: #999; margin-bottom: 10px;">
                Module: {{ entity_type.module.name }}<br>
                Records: {{ entity_type.entity_instances.count() }}
            </div>
            <a href="{{ url_for('.view_entity_data', entity_type_id=entity_type.id) }}" 
               class="btn btn-primary btn-sm">View Data</a>
        </div>
        {% endfor %}
    </div>
    {% else %}
    <div class="text-center" style="margin-top: 50px;">
        <p>No entity types found.</p>
    </div>
    {% endif %}
</div>
{% endblock %}

================
File: custom_admin/templates/admin/model_detail.html
================
<!-- templates/admin/model_detail.html -->
{% extends "admin/base.html" %}

{% block title %}{{ config.name }} Details - Admin{% endblock %}

{% block breadcrumb %}
<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item">
            <a href="{{ url_for('custom_admin.dashboard') }}">
                <i class="fas fa-home"></i> Admin
            </a>
        </li>
        <li class="breadcrumb-item">
            <a href="{{ url_for('custom_admin.model_list', model_name=model_name) }}">
                {{ config.name_plural }}
            </a>
        </li>
        <li class="breadcrumb-item active">Details</li>
    </ol>
</nav>
{% endblock %}

{% block content %}
<div class="page-header">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h1 class="page-title">
                <i class="{{ config.icon }}"></i>
                {{ config.name }} Details
            </h1>
            <p class="page-subtitle">
                {% if hasattr(instance, 'name') %}
                {{ instance.name }}
                {% elif hasattr(instance, 'code') %}
                {{ instance.code }}
                {% elif hasattr(instance, 'username') %}
                {{ instance.username }}
                {% else %}
                ID: {{ instance.id }}
                {% endif %}
            </p>
        </div>
        <div class="btn-group">
            <a href="{{ url_for('custom_admin.model_edit', model_name=model_name, object_id=instance.id) }}" 
               class="btn btn-primary">
                <i class="fas fa-edit"></i>
                Edit
            </a>
            <button type="button" class="btn btn-outline-secondary dropdown-toggle dropdown-toggle-split" 
                    data-toggle="dropdown">
                <span class="sr-only">Toggle Dropdown</span>
            </button>
            <div class="dropdown-menu dropdown-menu-right">
                <a class="dropdown-item" href="{{ url_for('custom_admin.model_create', model_name=model_name) }}">
                    <i class="fas fa-plus"></i> Create New
                </a>
                <div class="dropdown-divider"></div>
                <form method="POST" 
                      action="{{ url_for('custom_admin.model_delete', model_name=model_name, object_id=instance.id) }}" 
                      style="display: inline;">
                    <input type="hidden" name="csrf_token" value="{{ csrf_token() }}">
                    <button type="submit" 
                            class="dropdown-item text-danger"
                            onclick="return confirmDelete('{{ config.name }}')">
                        <i class="fas fa-trash"></i> Delete
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-lg-8">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="fas fa-info-circle"></i>
                    {{ config.name }} Information
                </h5>
            </div>
            <div class="card-body">
                <div class="row">
                    {% for field in all_fields %}
                    <div class="col-md-6 mb-3">
                        <strong>{{ field.label }}:</strong><br>
                        {% if field.value %}
                            {% if field.type == 'relationship' %}
                            <span class="badge badge-info">{{ field.value }}</span>
                            {% elif field.name.endswith('_at') %}
                            <small class="text-muted">{{ field.value }}</small>
                            {% elif field.name.startswith('is_') %}
                                {% if field.value == 'Yes' %}
                                <span class="badge badge-success">{{ field.value }}</span>
                                {% else %}
                                <span class="badge badge-secondary">{{ field.value }}</span>
                                {% endif %}
                            {% else %}
                            {{ field.value }}
                            {% endif %}
                        {% else %}
                        <span class="text-muted">-</span>
                        {% endif %}
                    </div>
                    {% endfor %}
                </div>
            </div>
        </div>
    </div>
    
    <div class="col-lg-4">
        <!-- Actions Card -->
        <div class="card">
            <div class="card-header">
                <h6 class="mb-0">
                    <i class="fas fa-tools"></i>
                    Actions
                </h6>
            </div>
            <div class="card-body">
                <div class="d-grid gap-2">
                    <a href="{{ url_for('custom_admin.model_edit', model_name=model_name, object_id=instance.id) }}" 
                       class="btn btn-primary btn-sm">
                        <i class="fas fa-edit"></i>
                        Edit {{ config.name }}
                    </a>
                    <a href="{{ url_for('custom_admin.model_create', model_name=model_name) }}" 
                       class="btn btn-outline-primary btn-sm">
                        <i class="fas fa-plus"></i>
                        Create New {{ config.name }}
                    </a>
                    <a href="{{ url_for('custom_admin.model_list', model_name=model_name) }}" 
                       class="btn btn-outline-secondary btn-sm">
                        <i class="fas fa-list"></i>
                        Back to List
                    </a>
                </div>
            </div>
        </div>
        
        <!-- Metadata Card -->
        <div class="card">
            <div class="card-header">
                <h6 class="mb-0">
                    <i class="fas fa-database"></i>
                    Metadata
                </h6>
            </div>
            <div class="card-body">
                <table class="table table-sm table-borderless">
                    <tr>
                        <td><strong>ID:</strong></td>
                        <td>{{ instance.id }}</td>
                    </tr>
                    {% if hasattr(instance, 'created_at') and instance.created_at %}
                    <tr>
                        <td><strong>Created:</strong></td>
                        <td>
                            {{ instance.created_at.strftime('%Y-%m-%d %H:%M') }}
                            {% if hasattr(instance, 'created_by') and instance.created_by %}
                            <br><small class="text-muted">by {{ instance.created_by }}</small>
                            {% endif %}
                        </td>
                    </tr>
                    {% endif %}
                    {% if hasattr(instance, 'updated_at') and instance.updated_at %}
                    <tr>
                        <td><strong>Updated:</strong></td>
                        <td>
                            {{ instance.updated_at.strftime('%Y-%m-%d %H:%M') }}
                            {% if hasattr(instance, 'updated_by') and instance.updated_by %}
                            <br><small class="text-muted">by {{ instance.updated_by }}</small>
                            {% endif %}
                        </td>
                    </tr>
                    {% endif %}
                </table>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script>
    function confirmDelete(itemType) {
        return confirm('Are you sure you want to delete this ' + itemType + '? This action cannot be undone.');
    }
</script>
{% endblock %}

================
File: custom_admin/templates/admin/model_form.html
================
<!-- templates/admin/model_form.html -->
{% extends "admin/base.html" %}

{% block title %}{{ action.title() }} {{ config.name }} - Admin{% endblock %}

{% block breadcrumb %}
<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item">
            <a href="{{ url_for('custom_admin.dashboard') }}">
                <i class="fas fa-home"></i> Admin
            </a>
        </li>
        <li class="breadcrumb-item">
            <a href="{{ url_for('custom_admin.model_list', model_name=model_name) }}">
                {{ config.name_plural }}
            </a>
        </li>
        <li class="breadcrumb-item active">
            {{ action.title() }} {{ config.name }}
        </li>
    </ol>
</nav>
{% endblock %}

{% block content %}
<div class="page-header">
    <h1 class="page-title">
        <i class="{{ config.icon }}"></i>
        {{ action.title() }} {{ config.name }}
    </h1>
    {% if action == 'edit' and instance %}
    <p class="page-subtitle">
        {% if instance.name is defined %}
        Editing: {{ instance.name }}
        {% elif instance.code is defined %}
        Editing: {{ instance.code }}
        {% elif instance.username is defined %}
        Editing: {{ instance.username }}
        {% else %}
        ID: {{ instance.id }}
        {% endif %}
    </p>
    {% endif %}
</div>

<div class="row">
    <div class="col-lg-8">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="fas fa-{{ 'plus' if action == 'create' else 'edit' }}"></i>
                    {{ config.name }} Information
                </h5>
            </div>
            <div class="card-body">
                <form method="POST" id="modelForm" novalidate>
                    <input type="hidden" name="csrf_token" value="{{ csrf_token() }}">
                    
                    {% set form_fields = config.form_fields %}
                    {% set readonly_fields = config.get('readonly_fields', []) %}
                    
                    <!-- Dynamic Form Fields -->
                    {% for field_name, field_config in form_fields.items() %}
                    {% if field_name not in readonly_fields %}
                    <div class="form-group">
                        {% set field_label = field_config.get('label', field_name.replace('_', ' ').title()) %}
                        <label for="{{ field_name }}" class="form-label">
                            {{ field_label }}
                            {% if field_config.get('required', False) %}
                            <span class="text-danger">*</span>
                            {% endif %}
                        </label>
                        
                        {% set current_value = current_values.get(field_name) if current_values else None %}
                        {% set current_value = current_value if current_value is not none else field_config.get('default', '') %}
                        
                        <!-- Text Input -->
                        {% if field_config.type == 'text' %}
                        <input type="text" 
                               class="form-control" 
                               id="{{ field_name }}" 
                               name="{{ field_name }}"
                               value="{{ current_value }}"
                               {% if field_config.get('max_length') %}maxlength="{{ field_config.max_length }}"{% endif %}
                               {% if field_config.get('required', False) %}required{% endif %}
                               placeholder="{{ field_config.get('placeholder', '') }}">
                        
                        <!-- Email Input -->
                        {% elif field_config.type == 'email' %}
                        <input type="email" 
                               class="form-control" 
                               id="{{ field_name }}" 
                               name="{{ field_name }}"
                               value="{{ current_value }}"
                               {% if field_config.get('required', False) %}required{% endif %}
                               placeholder="{{ field_config.get('placeholder', 'Enter email address') }}">
                        
                        <!-- Password Input -->
                        {% elif field_config.type == 'password' %}
                        <input type="password" 
                               class="form-control" 
                               id="{{ field_name }}" 
                               name="{{ field_name }}"
                               {% if field_config.get('required', False) and action == 'create' %}required{% endif %}
                               placeholder="{{ field_config.get('placeholder', 'Enter password') }}">
                        {% if action == 'edit' %}
                        <small class="form-text text-muted">Leave blank to keep current password</small>
                        {% endif %}
                        
                        <!-- Number Input -->
                        {% elif field_config.type == 'number' %}
                        <input type="number" 
                               class="form-control" 
                               id="{{ field_name }}" 
                               name="{{ field_name }}"
                               value="{{ current_value }}"
                               {% if field_config.get('min') is defined %}min="{{ field_config.min }}"{% endif %}
                               {% if field_config.get('max') is defined %}max="{{ field_config.max }}"{% endif %}
                               {% if field_config.get('step') is defined %}step="{{ field_config.step }}"{% endif %}
                               {% if field_config.get('required', False) %}required{% endif %}
                               placeholder="{{ field_config.get('placeholder', '0') }}">
                        
                        <!-- Textarea -->
                        {% elif field_config.type == 'textarea' %}
                        <textarea class="form-control" 
                                  id="{{ field_name }}" 
                                  name="{{ field_name }}"
                                  rows="{{ field_config.get('rows', 3) }}"
                                  {% if field_config.get('required', False) %}required{% endif %}
                                  placeholder="{{ field_config.get('placeholder', '') }}">{{ current_value }}</textarea>
                        
                        <!-- Select Dropdown -->
                        {% elif field_config.type == 'select' %}
                        <select class="form-control" 
                                id="{{ field_name }}" 
                                name="{{ field_name }}"
                                {% if field_config.get('required', False) %}required{% endif %}
                                {% if field_config.get('source') %}data-dependent="{{ field_config.get('dependent_field', '') }}" data-source="{{ field_config.source }}"{% endif %}>
                            <option value="">Select {{ field_label }}...</option>
                            {% if form_choices.get(field_name) %}
                                {% for choice_value, choice_label in form_choices[field_name] %}
                                <option value="{{ choice_value }}" 
                                        {% if current_value and (current_value|string == choice_value|string) %}selected{% endif %}>
                                    {{ choice_label }}
                                </option>
                                {% endfor %}
                            {% endif %}
                        </select>
                        
                        <!-- Special handling for Form Field Configuration dropdown fields -->
                        {% if model_name == 'form_field_configuration' %}
                            {% if field_name == 'dropdown_source_entity_id' %}
                            <small class="form-text text-muted">Select the entity type to source dropdown options from</small>
                            {% elif field_name == 'dropdown_source_attribute_id' %}
                            <small class="form-text text-muted">Select the attribute that provides the dropdown values</small>
                            {% elif field_name == 'dropdown_display_attribute_id' %}
                            <small class="form-text text-muted">Optional: Select different attribute for display text</small>
                            {% endif %}
                        {% endif %}
                        
                        <!-- Checkbox -->
                        {% elif field_config.type == 'checkbox' %}
                        <div class="custom-control custom-checkbox">
                            <input type="checkbox" 
                                   class="custom-control-input" 
                                   id="{{ field_name }}" 
                                   name="{{ field_name }}"
                                   value="true"
                                   {% if current_value %}checked{% endif %}>
                            <label class="custom-control-label" for="{{ field_name }}">
                                {{ field_config.get('checkbox_label', 'Yes') }}
                            </label>
                        </div>
                        
                        <!-- Special checkbox help for Form Field Configuration -->
                        {% if model_name == 'form_field_configuration' and field_name == 'show_unique_values_only' %}
                        <small class="form-text text-muted">When checked, only unique values will be shown in dropdown</small>
                        {% endif %}
                        
                        <!-- Date Input -->
                        {% elif field_config.type == 'date' %}
                        <input type="date" 
                               class="form-control" 
                               id="{{ field_name }}" 
                               name="{{ field_name }}"
                               value="{{ current_value.strftime('%Y-%m-%d') if current_value else '' }}"
                               {% if field_config.get('required', False) %}required{% endif %}>
                        
                        <!-- DateTime Input -->
                        {% elif field_config.type == 'datetime-local' %}
                        <input type="datetime-local" 
                               class="form-control" 
                               id="{{ field_name }}" 
                               name="{{ field_name }}"
                               value="{{ current_value.strftime('%Y-%m-%dT%H:%M') if current_value else '' }}"
                               {% if field_config.get('required', False) %}required{% endif %}>
                        
                        <!-- JSON Editor -->
                        {% elif field_config.type == 'json' %}
                        <textarea class="form-control json-editor" 
                                  id="{{ field_name }}" 
                                  name="{{ field_name }}"
                                  rows="6"
                                  placeholder='{"key": "value"}'
                                  data-json-field="true">{{ current_value }}</textarea>
                        <small class="form-text text-muted">Enter valid JSON data</small>
                        
                        {% else %}
                        <!-- Default text input for any other type -->
                        <input type="text" 
                               class="form-control" 
                               id="{{ field_name }}" 
                               name="{{ field_name }}"
                               value="{{ current_value }}"
                               placeholder="{{ field_config.get('placeholder', '') }}"
                               {% if field_config.get('max_length') %}maxlength="{{ field_config.max_length }}"{% endif %}
                               {% if field_config.get('required', False) %}required{% endif %}>
                        {% endif %}
                        
                        <!-- Help Text -->
                        {% if field_config.get('help_text') %}
                        <small class="form-text text-muted">{{ field_config.help_text }}</small>
                        {% endif %}
                        
                        <!-- Validation Feedback -->
                        <div class="invalid-feedback"></div>
                    </div>
                    {% endif %}
                    {% endfor %}
                    
                    <!-- Form Actions -->
                    <div class="form-group">
                        <div class="btn-toolbar justify-content-between">
                            <div class="btn-group">
                                <button type="submit" class="btn btn-primary" id="saveBtn">
                                    <i class="fas fa-save"></i>
                                    {{ 'Create' if action == 'create' else 'Update' }} {{ config.name }}
                                </button>
                                
                                {% if action == 'edit' %}
                                <button type="submit" name="save_and_continue" class="btn btn-outline-primary" id="saveAndContinueBtn">
                                    <i class="fas fa-save"></i>
                                    Save and Continue Editing
                                </button>
                                {% endif %}
                            </div>
                            
                            <div class="btn-group">
                                {% if action == 'create' %}
                                <button type="button" class="btn btn-outline-secondary" onclick="resetForm()">
                                    <i class="fas fa-undo"></i>
                                    Reset
                                </button>
                                {% endif %}
                                
                                <a href="{{ url_for('custom_admin.model_list', model_name=model_name) }}" 
                                   class="btn btn-secondary">
                                    <i class="fas fa-times"></i>
                                    Cancel
                                </a>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
    
    <!-- Sidebar with additional info -->
    <div class="col-lg-4">
        {% if action == 'edit' and instance %}
        <!-- Instance Information -->
        <div class="card">
            <div class="card-header">
                <h6 class="mb-0">
                    <i class="fas fa-info-circle"></i>
                    {{ config.name }} Details
                </h6>
            </div>
            <div class="card-body">
                <table class="table table-sm table-borderless">
                    <tr>
                        <td><strong>ID:</strong></td>
                        <td>{{ instance.id }}</td>
                    </tr>
                    {% if instance.created_at is defined and instance.created_at %}
                    <tr>
                        <td><strong>Created:</strong></td>
                        <td>
                            <small>{{ instance.created_at.strftime('%Y-%m-%d %H:%M') }}</small>
                            {% if instance.created_by is defined and instance.created_by %}
                            <br><small class="text-muted">by {{ instance.created_by }}</small>
                            {% endif %}
                        </td>
                    </tr>
                    {% endif %}
                    {% if instance.updated_at is defined and instance.updated_at %}
                    <tr>
                        <td><strong>Updated:</strong></td>
                        <td>
                            <small>{{ instance.updated_at.strftime('%Y-%m-%d %H:%M') }}</small>
                            {% if instance.updated_by is defined and instance.updated_by %}
                            <br><small class="text-muted">by {{ instance.updated_by }}</small>
                            {% endif %}
                        </td>
                    </tr>
                    {% endif %}
                </table>
                
                <hr>
                
                <div class="d-flex justify-content-between">
                    <a href="{{ url_for('custom_admin.model_detail', model_name=model_name, object_id=instance.id) }}" 
                       class="btn btn-outline-primary btn-sm">
                        <i class="fas fa-eye"></i>
                        View Details
                    </a>
                    
                    <form method="POST" 
                          action="{{ url_for('custom_admin.model_delete', model_name=model_name, object_id=instance.id) }}" 
                          style="display: inline;">
                        <input type="hidden" name="csrf_token" value="{{ csrf_token() }}">
                        <button type="submit" 
                                class="btn btn-outline-danger btn-sm" 
                                onclick="return confirmDelete('{{ config.name }}')">
                            <i class="fas fa-trash"></i>
                            Delete
                        </button>
                    </form>
                </div>
            </div>
        </div>
        {% endif %}
        
        <!-- Help Card -->
        <div class="card">
            <div class="card-header">
                <h6 class="mb-0">
                    <i class="fas fa-question-circle"></i>
                    Help & Tips
                </h6>
            </div>
            <div class="card-body">
                <ul class="list-unstyled mb-0">
                    <li class="mb-2">
                        <i class="fas fa-lightbulb text-warning"></i>
                        <small>Fields marked with <span class="text-danger">*</span> are required</small>
                    </li>
                    <li class="mb-2">
                        <i class="fas fa-keyboard text-info"></i>
                        <small>Use <kbd>Ctrl+S</kbd> to save quickly</small>
                    </li>
                    {% if action == 'create' %}
                    <li class="mb-2">
                        <i class="fas fa-plus text-success"></i>
                        <small>After creating, you can add related records</small>
                    </li>
                    {% endif %}
                    
                    <!-- Special help for Form Field Configuration -->
                    {% if model_name == 'form_field_configuration' %}
                    <li class="mb-2">
                        <i class="fas fa-info text-info"></i>
                        <small><strong>Dropdown Setup:</strong> For SELECT/MULTISELECT fields, configure dropdown source entity and attributes</small>
                    </li>
                    <li class="mb-2">
                        <i class="fas fa-table text-primary"></i>
                        <small><strong>Source Entity:</strong> Choose master or transactional entity for dropdown data</small>
                    </li>
                    <li class="mb-2">
                        <i class="fas fa-columns text-secondary"></i>
                        <small><strong>Source Attribute:</strong> Column that provides dropdown values</small>
                    </li>
                    <li class="mb-2">
                        <i class="fas fa-eye text-success"></i>
                        <small><strong>Display Attribute:</strong> Optional - different column for display text</small>
                    </li>
                    {% endif %}
                </ul>
            </div>
        </div>
        
        <!-- Related Actions -->
        {% if action == 'edit' and instance %}
        <div class="card">
            <div class="card-header">
                <h6 class="mb-0">
                    <i class="fas fa-link"></i>
                    Related Actions
                </h6>
            </div>
            <div class="card-body">
                <!-- Add related model quick links based on relationships -->
                {% if model_name == 'application' %}
                <a href="{{ url_for('custom_admin.model_list', model_name='module') }}?filter_application_id={{ instance.id }}" 
                   class="btn btn-outline-secondary btn-sm btn-block">
                    <i class="fas fa-folder"></i>
                    View Modules
                </a>
                {% elif model_name == 'module' %}
                <a href="{{ url_for('custom_admin.model_list', model_name='entity_type') }}?filter_module_id={{ instance.id }}" 
                   class="btn btn-outline-secondary btn-sm btn-block">
                    <i class="fas fa-table"></i>
                    View Entity Types
                </a>
                {% elif model_name == 'entity_type' %}
                <a href="{{ url_for('custom_admin.model_list', model_name='attribute_definition') }}?filter_entity_type_id={{ instance.id }}" 
                   class="btn btn-outline-secondary btn-sm btn-block">
                    <i class="fas fa-list"></i>
                    View Attributes
                </a>
                <a href="{{ url_for('custom_admin.model_list', model_name='form_definition') }}?filter_entity_type_id={{ instance.id }}" 
                   class="btn btn-outline-secondary btn-sm btn-block">
                    <i class="fas fa-edit"></i>
                    View Forms
                </a>
                {% elif model_name == 'form_definition' %}
                <a href="{{ url_for('custom_admin.model_list', model_name='form_field_configuration') }}?filter_form_definition_id={{ instance.id }}" 
                   class="btn btn-outline-secondary btn-sm btn-block">
                    <i class="fas fa-wpforms"></i>
                    View Form Fields
                </a>
                {% endif %}
                
                <a href="{{ url_for('custom_admin.model_create', model_name=model_name) }}" 
                   class="btn btn-outline-primary btn-sm btn-block">
                    <i class="fas fa-plus"></i>
                    Create Another {{ config.name }}
                </a>
            </div>
        </div>
        {% endif %}
    </div>
</div>

<!-- Form Field Configuration Dependent Dropdowns Modal -->
{% if model_name == 'form_field_configuration' %}
<div class="modal fade" id="dropdownConfigHelp" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-question-circle"></i>
                    Dropdown Configuration Guide
                </h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h6>How to Configure Dropdowns:</h6>
                <ol>
                    <li><strong>Field Type:</strong> Set to SELECT or MULTISELECT</li>
                    <li><strong>Source Entity:</strong> Choose the entity type that contains the data (e.g., Vessel, Customer)</li>
                    <li><strong>Source Attribute:</strong> Choose the column that provides the actual values</li>
                    <li><strong>Display Attribute:</strong> Optional - choose a different column for user-friendly display</li>
                    <li><strong>Unique Values Only:</strong> Check to show only distinct values</li>
                </ol>
                
                <div class="alert alert-info">
                    <i class="fas fa-lightbulb"></i>
                    <strong>Example:</strong> For a "Vessel Name" dropdown:
                    <ul class="mb-0 mt-2">
                        <li>Source Entity: Vessel (master)</li>
                        <li>Source Attribute: VESSEL_NAME</li>
                        <li>Display Attribute: VESSEL_NAME (same)</li>
                        <li>Unique Values: Yes</li>
                    </ul>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Add help button for form field config -->
<div style="position: fixed; bottom: 20px; right: 20px; z-index: 1000;">
    <button type="button" class="btn btn-info btn-sm" data-toggle="modal" data-target="#dropdownConfigHelp">
        <i class="fas fa-question-circle"></i>
        Help
    </button>
</div>
{% endif %}

{% endblock %}

{% block extra_js %}
<script>
    $(document).ready(function() {
        // Form validation
        $('#modelForm').on('submit', function(e) {
            var isValid = validateForm();
            if (!isValid) {
                e.preventDefault();
                showAlert('Please fix the errors below', 'danger');
                return false;
            }
            
            // Show loading state
            setLoading('#saveBtn', true);
            if ($('#saveAndContinueBtn').length) {
                setLoading('#saveAndContinueBtn', true);
            }
        });
        
        // Real-time validation
        $('.form-control').on('blur', function() {
            validateField($(this));
        });
        
        // JSON field formatting
        $('[data-json-field="true"]').each(function() {
            try {
                var jsonText = $(this).val();
                if (jsonText && jsonText.trim()) {
                    var formatted = JSON.stringify(JSON.parse(jsonText), null, 2);
                    $(this).val(formatted);
                }
            } catch (e) {
                // Invalid JSON, leave as is
            }
        });
        
        // JSON validation on change
        $('[data-json-field="true"]').on('blur', function() {
            var $field = $(this);
            var jsonText = $field.val().trim();
            
            if (jsonText) {
                try {
                    JSON.parse(jsonText);
                    $field.removeClass('is-invalid').addClass('is-valid');
                    $field.siblings('.invalid-feedback').text('');
                } catch (e) {
                    $field.removeClass('is-valid').addClass('is-invalid');
                    $field.siblings('.invalid-feedback').text('Invalid JSON format');
                }
            } else {
                $field.removeClass('is-invalid is-valid');
            }
        });
        
        // Dependent dropdowns for Form Field Configuration
        {% if model_name == 'form_field_configuration' %}
        
        // When entity type changes, update attribute dropdowns
        $('#dropdown_source_entity_id').on('change', function() {
            var entityId = $(this).val();
            var sourceAttrSelect = $('#dropdown_source_attribute_id');
            var displayAttrSelect = $('#dropdown_display_attribute_id');
            
            // Clear existing options
            sourceAttrSelect.html('<option value="">Select Source Attribute...</option>');
            displayAttrSelect.html('<option value="">Select Display Attribute...</option>');
            
            if (entityId) {
                // Load attributes for the selected entity
                loadEntityAttributes(entityId, sourceAttrSelect, displayAttrSelect);
            }
        });
        
        // When field type changes, show/hide dropdown configuration
        $('#field_type').on('change', function() {
            var fieldType = $(this).val();
            var dropdownFields = $('#dropdown_source_entity_id, #dropdown_source_attribute_id, #dropdown_display_attribute_id, #show_unique_values_only');
            
            if (fieldType === 'SELECT' || fieldType === 'MULTISELECT') {
                dropdownFields.closest('.form-group').show();
                showAlert('Configure dropdown source for this SELECT field below', 'info');
            } else {
                dropdownFields.closest('.form-group').hide();
            }
        });
        
        // Trigger on page load
        $('#field_type').trigger('change');
        
        function loadEntityAttributes(entityId, sourceSelect, displaySelect) {
            $.ajax({
                url: '/custom-admin/api/entity/' + entityId + '/attributes',
                method: 'GET',
                success: function(attributes) {
                    attributes.forEach(function(attr) {
                        var option = '<option value="' + attr.id + '">' + attr.name + ' (' + attr.code + ')</option>';
                        sourceSelect.append(option);
                        displaySelect.append(option);
                    });
                },
                error: function() {
                    showAlert('Error loading entity attributes', 'danger');
                }
            });
        }
        
        {% endif %}
        
        // Keyboard shortcuts
        $(document).on('keydown', function(e) {
            // Ctrl+S to save
            if ((e.ctrlKey || e.metaKey) && e.key === 's') {
                e.preventDefault();
                $('#saveBtn').click();
            }
            
            // Escape to cancel
            if (e.key === 'Escape') {
                if (confirm('Are you sure you want to cancel? Any unsaved changes will be lost.')) {
                    window.location.href = '{{ url_for("custom_admin.model_list", model_name=model_name) }}';
                }
            }
        });
        
        // Warn before leaving with unsaved changes
        var originalFormData = $('#modelForm').serialize();
        
        $(window).on('beforeunload', function(e) {
            var currentFormData = $('#modelForm').serialize();
            if (originalFormData !== currentFormData) {
                var message = 'You have unsaved changes. Are you sure you want to leave?';
                e.returnValue = message;
                return message;
            }
        });
        
        // Remove beforeunload when form is submitted
        $('#modelForm').on('submit', function() {
            $(window).off('beforeunload');
        });
        
        // Character counters for text fields
        $('.form-control[maxlength]').each(function() {
            var $field = $(this);
            var maxLength = $field.attr('maxlength');
            var $counter = $('<small class="form-text text-muted char-counter"></small>');
            $field.after($counter);
            
            function updateCounter() {
                var remaining = maxLength - $field.val().length;
                $counter.text(remaining + ' characters remaining');
                
                if (remaining < 10) {
                    $counter.removeClass('text-muted').addClass('text-warning');
                } else if (remaining < 0) {
                    $counter.removeClass('text-muted text-warning').addClass('text-danger');
                } else {
                    $counter.removeClass('text-warning text-danger').addClass('text-muted');
                }
            }
            
            $field.on('input', updateCounter);
            updateCounter();
        });
        
        // Auto-resize textareas
        $('textarea').each(function() {
            $(this).on('input', function() {
                this.style.height = 'auto';
                this.style.height = (this.scrollHeight) + 'px';
            });
        });
    });
    
    function validateForm() {
        var isValid = true;
        
        // Clear previous validation
        $('.form-control').removeClass('is-invalid is-valid');
        $('.invalid-feedback').text('');
        
        // Validate required fields
        $('[required]').each(function() {
            if (!validateField($(this))) {
                isValid = false;
            }
        });
        
        // Validate JSON fields
        $('[data-json-field="true"]').each(function() {
            var $field = $(this);
            var jsonText = $field.val().trim();
            
            if (jsonText) {
                try {
                    JSON.parse(jsonText);
                } catch (e) {
                    $field.addClass('is-invalid');
                    $field.siblings('.invalid-feedback').text('Invalid JSON format');
                    isValid = false;
                }
            }
        });
        
        // Validate email fields
        $('input[type="email"]').each(function() {
            var $field = $(this);
            var email = $field.val().trim();
            
            if (email && !isValidEmail(email)) {
                $field.addClass('is-invalid');
                $field.siblings('.invalid-feedback').text('Please enter a valid email address');
                isValid = false;
            }
        });
        
        return isValid;
    }
    
    function validateField($field) {
        var isValid = true;
        var value = $field.val().trim();
        var fieldType = $field.attr('type');
        
        // Required field validation
        if ($field.prop('required') && !value) {
            $field.addClass('is-invalid');
            $field.siblings('.invalid-feedback').text('This field is required');
            isValid = false;
        }
        // Email validation
        else if (fieldType === 'email' && value && !isValidEmail(value)) {
            $field.addClass('is-invalid');
            $field.siblings('.invalid-feedback').text('Please enter a valid email address');
            isValid = false;
        }
        // Number validation
        else if (fieldType === 'number' && value && isNaN(value)) {
            $field.addClass('is-invalid');
            $field.siblings('.invalid-feedback').text('Please enter a valid number');
            isValid = false;
        }
        else {
            $field.removeClass('is-invalid').addClass('is-valid');
            $field.siblings('.invalid-feedback').text('');
        }
        
        return isValid;
    }
    
    function isValidEmail(email) {
        var emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
    }
    
    function resetForm() {
        if (confirm('Are you sure you want to reset the form? All changes will be lost.')) {
            $('#modelForm')[0].reset();
            $('.form-control').removeClass('is-invalid is-valid');
            $('.invalid-feedback').text('');
        }
    }
    
    function confirmDelete(itemType) {
        return confirm('Are you sure you want to delete this ' + itemType + '? This action cannot be undone.');
    }
</script>
{% endblock %}

================
File: custom_admin/templates/admin/model_list.html
================
<!-- templates/admin/model_list.html -->
{% extends "admin/base.html" %}

{% block title %}{{ config.name_plural }} - Admin{% endblock %}

{% block breadcrumb %}
<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item">
            <a href="{{ url_for('custom_admin.dashboard') }}">
                <i class="fas fa-home"></i> Admin
            </a>
        </li>
        <li class="breadcrumb-item active">{{ config.name_plural }}</li>
    </ol>
</nav>
{% endblock %}

{% block content %}
<div class="page-header">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h1 class="page-title">
                <i class="{{ config.icon }}"></i>
                {{ config.name_plural }}
            </h1>
            <p class="page-subtitle">Manage {{ config.name_plural.lower() }} in your system</p>
        </div>
        <div>
            <a href="{{ url_for('custom_admin.model_create', model_name=model_name) }}" 
               class="btn btn-primary">
                <i class="fas fa-plus"></i>
                Add {{ config.name }}
            </a>
        </div>
    </div>
</div>

<!-- Search and Filters -->
<div class="card mb-4">
    <div class="card-body">
        <form method="GET" id="searchForm" class="row">
            <!-- Search -->
            <div class="col-md-4">
                <div class="form-group mb-0">
                    <div class="input-group">
                        <input type="text" 
                               class="form-control" 
                               name="search" 
                               id="searchInput"
                               placeholder="Search {{ config.name_plural.lower() }}..." 
                               value="{{ search_term }}">
                        <div class="input-group-append">
                            <button class="btn btn-outline-secondary" type="submit">
                                <i class="fas fa-search"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Quick Filters -->
            {% if config.list_filter %}
            {% for filter_field in config.list_filter[:3] %}
            {% if filter_choices.get(filter_field) %}
            <div class="col-md-2">
                <div class="form-group mb-0">
                    <select class="form-control" 
                            name="filter_{{ filter_field }}" 
                            onchange="this.form.submit()">
                        <option value="">All {{ filter_field.replace('_', ' ').title() }}</option>
                        {% for choice_value, choice_label in filter_choices[filter_field] %}
                        <option value="{{ choice_value }}" 
                                {% if filters.get(filter_field) == choice_value|string %}selected{% endif %}>
                            {{ choice_label }}
                        </option>
                        {% endfor %}
                    </select>
                </div>
            </div>
            {% endif %}
            {% endfor %}
            {% endif %}
            
            <!-- Actions -->
            <div class="col-md-2">
                <div class="btn-group">
                    <button type="button" class="btn btn-outline-secondary filter-toggle" 
                            data-toggle="collapse" data-target="#advancedFilters">
                        <i class="fas fa-filter"></i>
                        <i class="fas fa-chevron-down ml-1"></i>
                    </button>
                    <button type="button" class="btn btn-outline-secondary" 
                            onclick="exportData('csv')" title="Export CSV">
                        <i class="fas fa-download"></i>
                    </button>
                    <button type="button" class="btn btn-outline-secondary" 
                            onclick="location.reload()" title="Refresh">
                        <i class="fas fa-sync"></i>
                    </button>
                </div>
            </div>
        </form>
        
        <!-- Advanced Filters -->
        {% if config.list_filter|length > 3 %}
        <div class="collapse mt-3" id="advancedFilters">
            <div class="filters-section">
                <h6><i class="fas fa-sliders-h"></i> Advanced Filters</h6>
                <form method="GET" class="row">
                    <input type="hidden" name="search" value="{{ search_term }}">
                    {% for filter_field in config.list_filter[3:] %}
                    {% if filter_choices.get(filter_field) %}
                    <div class="col-md-3 mb-2">
                        <label class="form-label">{{ filter_field.replace('_', ' ').title() }}</label>
                        <select class="form-control form-control-sm" name="filter_{{ filter_field }}">
                            <option value="">All</option>
                            {% for choice_value, choice_label in filter_choices[filter_field] %}
                            <option value="{{ choice_value }}" 
                                    {% if filters.get(filter_field) == choice_value|string %}selected{% endif %}>
                                {{ choice_label }}
                            </option>
                            {% endfor %}
                        </select>
                    </div>
                    {% endif %}
                    {% endfor %}
                    <div class="col-12 mt-2">
                        <button type="submit" class="btn btn-primary btn-sm">
                            <i class="fas fa-filter"></i> Apply Filters
                        </button>
                        <a href="{{ url_for('custom_admin.model_list', model_name=model_name) }}" 
                           class="btn btn-secondary btn-sm ml-2">
                            <i class="fas fa-times"></i> Clear
                        </a>
                    </div>
                </form>
            </div>
        </div>
        {% endif %}
    </div>
</div>

<!-- Results Summary -->
<div class="d-flex justify-content-between align-items-center mb-3">
    <div>
        <h6 class="mb-0">
            {% if search_term or filters %}
            Showing {{ pagination.total if pagination else objects|length }} results
            {% if search_term %}for "{{ search_term }}"{% endif %}
            {% else %}
            {{ total_count }} {{ config.name_plural.lower() }} total
            {% endif %}
        </h6>
    </div>
    
    <!-- Bulk Actions -->
    <div id="bulkActions" style="display: none;" data-model="{{ model_name }}">
        <div class="btn-group">
            <select class="form-control form-control-sm" id="bulkAction" style="width: auto;">
                <option value="">Bulk Actions</option>
                <option value="delete">Delete Selected</option>
                {% if 'is_active' in config.form_fields %}
                <option value="activate">Activate Selected</option>
                <option value="deactivate">Deactivate Selected</option>
                {% endif %}
            </select>
            <button type="button" class="btn btn-warning btn-sm" id="bulkActionBtn">
                Apply to <span id="selectedCount">0</span> items
            </button>
        </div>
    </div>
</div>

<!-- Data Table -->
<div class="card">
    <div class="card-body p-0">
        {% if objects %}
        <div class="table-responsive">
            <table class="table table-hover mb-0">
                <thead>
                    <tr>
                        <th style="width: 40px;">
                            <div class="custom-control custom-checkbox">
                                <input type="checkbox" class="custom-control-input" id="selectAll">
                                <label class="custom-control-label" for="selectAll"></label>
                            </div>
                        </th>
                        {% for field in config.list_display %}
                        <th>
                            {% set field_label = field.replace('_', ' ').replace('.', ' ').title() %}
                            {{ field_label }}
                            {% if field in config.get('ordering', []) %}
                            <i class="fas fa-sort text-muted"></i>
                            {% endif %}
                        </th>
                        {% endfor %}
                        <th style="width: 120px;">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {% for obj in objects %}
                    <tr class="searchable-row">
                        <td>
                            <div class="custom-control custom-checkbox">
                                <input type="checkbox" 
                                       class="custom-control-input select-row" 
                                       id="select{{ obj.id }}"
                                       value="{{ obj.id }}">
                                <label class="custom-control-label" for="select{{ obj.id }}"></label>
                            </div>
                        </td>
                        {% for field in config.list_display %}
                        <td>
                            {% set display_value = get_display_value(obj, field) %}
                            
                            {% if field == 'is_active' %}
                                {% if display_value == 'Yes' %}
                                <span class="badge badge-success">Active</span>
                                {% else %}
                                <span class="badge badge-secondary">Inactive</span>
                                {% endif %}
                            {% elif field.endswith('_at') and display_value %}
                                <small class="text-muted">
                                    {{ display_value }}
                                </small>
                            {% elif field == 'is_system' %}
                                {% if display_value == 'Yes' %}
                                <span class="badge badge-info">System</span>
                                {% endif %}
                            {% elif field == 'is_master' %}
                                {% if display_value == 'Yes' %}
                                <span class="badge badge-warning">Master</span>
                                {% endif %}
                            {% elif field == 'is_transactional' %}
                                {% if display_value == 'Yes' %}
                                <span class="badge badge-primary">Transactional</span>
                                {% endif %}
                            {% elif field.endswith('_type') and display_value %}
                                <span class="badge badge-light">{{ display_value }}</span>
                            {% else %}
                                {% set display_str = display_value|string %}
                                {% if display_str|length > 50 %}
                                <span title="{{ display_str }}">
                                    {{ display_str[:50] }}...
                                </span>
                                {% else %}
                                {{ display_str or '-' }}
                                {% endif %}
                            {% endif %}
                        </td>
                        {% endfor %}
                        <td>
                            <div class="btn-group btn-group-sm">
                                <a href="{{ url_for('custom_admin.model_detail', model_name=model_name, object_id=obj.id) }}" 
                                   class="btn btn-action btn-view" title="View">
                                    <i class="fas fa-eye"></i>
                                </a>
                                <a href="{{ url_for('custom_admin.model_edit', model_name=model_name, object_id=obj.id) }}" 
                                   class="btn btn-action btn-edit" title="Edit">
                                    <i class="fas fa-edit"></i>
                                </a>
                                <form method="POST" 
                                      action="{{ url_for('custom_admin.model_delete', model_name=model_name, object_id=obj.id) }}" 
                                      style="display: inline;">
                                    <input type="hidden" name="csrf_token" value="{{ csrf_token() }}">
                                    <button type="submit" 
                                            class="btn btn-action btn-delete" 
                                            title="Delete"
                                            onclick="return confirmDelete('{{ config.name }}')">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </form>
                            </div>
                        </td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
        
        <!-- Pagination -->
        {% if pagination and pagination.pages > 1 %}
        <div class="card-footer">
            <div class="row align-items-center">
                <div class="col-sm-6">
                    <small class="text-muted">
                        Showing {{ ((pagination.page - 1) * pagination.per_page) + 1 }} to 
                        {{ pagination.page * pagination.per_page if pagination.page * pagination.per_page < pagination.total else pagination.total }} 
                        of {{ pagination.total }} entries
                    </small>
                </div>
                <div class="col-sm-6">
                    <nav>
                        <ul class="pagination pagination-sm justify-content-end mb-0">
                            {% if pagination.has_prev %}
                            <li class="page-item">
                                <a class="page-link" href="{{ url_for('custom_admin.model_list', model_name=model_name, page=pagination.prev_num, search=search_term, **filters) }}">
                                    <i class="fas fa-chevron-left"></i>
                                </a>
                            </li>
                            {% endif %}
                            
                            {% for page_num in pagination.iter_pages() %}
                                {% if page_num %}
                                    {% if page_num != pagination.page %}
                                    <li class="page-item">
                                        <a class="page-link" href="{{ url_for('custom_admin.model_list', model_name=model_name, page=page_num, search=search_term, **filters) }}">
                                            {{ page_num }}
                                        </a>
                                    </li>
                                    {% else %}
                                    <li class="page-item active">
                                        <span class="page-link">{{ page_num }}</span>
                                    </li>
                                    {% endif %}
                                {% else %}
                                <li class="page-item disabled">
                                    <span class="page-link">...</span>
                                </li>
                                {% endif %}
                            {% endfor %}
                            
                            {% if pagination.has_next %}
                            <li class="page-item">
                                <a class="page-link" href="{{ url_for('custom_admin.model_list', model_name=model_name, page=pagination.next_num, search=search_term, **filters) }}">
                                    <i class="fas fa-chevron-right"></i>
                                </a>
                            </li>
                            {% endif %}
                        </ul>
                    </nav>
                </div>
            </div>
        </div>
        {% endif %}
        
        {% else %}
        <!-- Empty State -->
        <div class="text-center py-5">
            <i class="{{ config.icon }} text-muted" style="font-size: 64px; opacity: 0.3;"></i>
            <h5 class="mt-3 text-muted">No {{ config.name_plural }} Found</h5>
            {% if search_term or filters %}
            <p class="text-muted">
                No results match your search criteria. 
                <a href="{{ url_for('custom_admin.model_list', model_name=model_name) }}">Clear filters</a>
            </p>
            {% else %}
            <p class="text-muted">
                Get started by creating your first {{ config.name.lower() }}.
            </p>
            <a href="{{ url_for('custom_admin.model_create', model_name=model_name) }}" 
               class="btn btn-primary">
                <i class="fas fa-plus"></i>
                Create {{ config.name }}
            </a>
            {% endif %}
        </div>
        {% endif %}
    </div>
</div>

<!-- Quick View Modal -->
<div class="modal fade" id="quickViewModal" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Quick View</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body" id="quickViewContent">
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="sr-only">Loading...</span>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <a href="#" class="btn btn-primary" id="quickViewEditBtn">
                    <i class="fas fa-edit"></i> Edit
                </a>
            </div>
        </div>
    </div>
</div>

{% endblock %}

{% block extra_js %}
<script>
    $(document).ready(function() {
        // Quick search functionality
        let searchTimeout;
        $('#searchInput').on('input', function() {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(function() {
                $('#searchForm').submit();
            }, 500);
        });
        
        // Quick view functionality
        $('.btn-view').on('click', function(e) {
            e.preventDefault();
            var url = $(this).attr('href');
            
            $('#quickViewModal').modal('show');
            $('#quickViewEditBtn').attr('href', url.replace('/models/', '/models/').replace('/', '/edit'));
            
            // Load content via AJAX
            $.get(url, function(data) {
                // Extract content from the detail page
                var content = $(data).find('.admin-content').html();
                $('#quickViewContent').html(content);
            }).fail(function() {
                $('#quickViewContent').html('<p class="text-danger">Error loading content</p>');
            });
        });
        
        // Auto-save search preferences
        $('#searchForm').on('submit', function() {
            var searchTerm = $('#searchInput').val();
            localStorage.setItem('lastSearch_{{ model_name }}', searchTerm);
        });
        
        // Restore search preferences
        var lastSearch = localStorage.getItem('lastSearch_{{ model_name }}');
        if (lastSearch && !$('#searchInput').val()) {
            $('#searchInput').val(lastSearch);
        }
        
        // Enhanced table interactions
        $('tbody tr').on('dblclick', function() {
            var viewBtn = $(this).find('.btn-view');
            if (viewBtn.length) {
                viewBtn[0].click();
            }
        });
        
        // Keyboard shortcuts
        $(document).on('keydown', function(e) {
            // Ctrl+N for new
            if ((e.ctrlKey || e.metaKey) && e.key === 'n') {
                e.preventDefault();
                window.location.href = '{{ url_for("custom_admin.model_create", model_name=model_name) }}';
            }
            // Ctrl+F for search
            if ((e.ctrlKey || e.metaKey) && e.key === 'f') {
                e.preventDefault();
                $('#searchInput').focus();
            }
        });
        
        // Show keyboard shortcuts help
        $('[data-toggle="tooltip"]').tooltip();
        
        // Add tooltips for action buttons
        $('.btn-view').attr('title', 'View details (Double-click row)');
        $('.btn-edit').attr('title', 'Edit item');
        $('.btn-delete').attr('title', 'Delete item');
    });
    
    function confirmDelete(itemType) {
        return confirm(`Are you sure you want to delete this ${itemType}? This action cannot be undone.`);
    }
    
    function quickSearch() {
        var searchTerm = $('#quickSearch').val().toLowerCase();
        $('.searchable-row').each(function() {
            var text = $(this).text().toLowerCase();
            if (text.includes(searchTerm)) {
                $(this).show();
            } else {
                $(this).hide();
            }
        });
    }
    
    // Export functionality
    function exportData(format) {
        var url = new URL(window.location.href);
        url.searchParams.set('export', format);
        window.open(url.toString(), '_blank');
    }
</script>
{% endblock %}

================
File: entity_designer/__init__.py
================
# entity_designer/__init__.py
"""
Entity Designer - Unified Entity Management Interface
Single-page admin for managing entities, attributes, and forms
"""

from flask import Blueprint, render_template, request, redirect, url_for, flash, jsonify
from flask_login import login_required, current_user
from sqlalchemy import and_, or_
from models import *
import json
from datetime import datetime

# Create blueprint
entity_designer_bp = Blueprint('entity_designer', __name__, 
                              url_prefix='/entity-designer', 
                              template_folder='templates')

class EntityDesignerConfig:
    """Configuration for the Entity Designer interface"""
    
    FIELD_TYPE_OPTIONS = [
        ('TEXT', 'Text Input'),
        ('TEXTAREA', 'Text Area'),
        ('NUMBER', 'Number'),
        ('DECIMAL', 'Decimal'),
        ('EMAIL', 'Email'),
        ('PASSWORD', 'Password'),
        ('CHECKBOX', 'Checkbox'),
        ('SELECT', 'Dropdown Select'),
        ('MULTISELECT', 'Multi-Select'),
        ('DATE', 'Date'),
        ('DATETIME', 'Date & Time'),
        ('FILE', 'File Upload'),
        ('IMAGE', 'Image Upload')
    ]
    
    DATA_TYPE_OPTIONS = [
        ('VARCHAR', 'Text (VARCHAR)'),
        ('TEXT', 'Long Text'),
        ('INT', 'Integer'),
        ('BIGINT', 'Big Integer'),
        ('DECIMAL', 'Decimal'),
        ('BOOLEAN', 'Boolean'),
        ('DATE', 'Date'),
        ('DATETIME', 'Date Time'),
        ('JSON', 'JSON Data')
    ]
    
    FORM_TYPE_OPTIONS = [
        ('LIST', 'List View'),
        ('DETAIL', 'Detail View'),
        ('CREATE', 'Create Form'),
        ('EDIT', 'Edit Form'),
        ('SEARCH', 'Search Form')
    ]

class EntityDesignerUtils:
    """Utility functions for Entity Designer"""
    
    @staticmethod
    def get_entity_summary(entity_type):
        """Get comprehensive summary of entity configuration"""
        attributes_count = entity_type.attribute_definitions.filter_by(is_active=True).count()
        forms_count = entity_type.form_definitions.filter_by(is_active=True).count()
        instances_count = entity_type.entity_instances.filter_by(is_active=True).count()
        
        return {
            'id': entity_type.id,
            'code': entity_type.code,
            'name': entity_type.name,
            'description': entity_type.description,
            'module': entity_type.module.name,
            'application': entity_type.module.application.name,
            'is_master': entity_type.is_master,
            'is_transactional': entity_type.is_transactional,
            'attributes_count': attributes_count,
            'forms_count': forms_count,
            'instances_count': instances_count,
            'icon': entity_type.icon or 'table_view'
        }
    
    @staticmethod
    def get_entity_details(entity_type_id):
        """Get complete entity configuration including attributes and forms"""
        entity_type = EntityType.query.get(entity_type_id)
        if not entity_type:
            return None
        
        # Get attributes with their form configurations
        attributes = []
        attr_definitions = AttributeDefinition.query.filter_by(
            entity_type_id=entity_type_id,
            is_active=True
        ).order_by(AttributeDefinition.order_index).all()
        
        for attr in attr_definitions:
            attr_data = {
                'id': attr.id,
                'code': attr.code,
                'name': attr.name,
                'description': attr.description,
                'data_type': attr.data_type.value,
                'max_length': attr.max_length,
                'is_required': attr.is_required,
                'is_unique': attr.is_unique,
                'default_value': attr.default_value,
                'order_index': attr.order_index,
                'form_configs': []
            }
            
            # Get form field configurations for this attribute
            form_configs = FormFieldConfiguration.query.filter_by(
                attribute_definition_id=attr.id
            ).join(FormDefinition).all()
            
            for config in form_configs:
                config_data = {
                    'id': config.id,
                    'form_type': config.form_definition.form_type.value,
                    'field_type': config.field_type.value,
                    'field_label': config.field_label,
                    'is_visible': config.is_visible,
                    'is_editable': config.is_editable,
                    'is_required': config.is_required,
                    'order_index': config.order_index,
                    'dropdown_source_entity_id': config.dropdown_source_entity_id,
                    'dropdown_source_attribute_id': config.dropdown_source_attribute_id,
                    'show_unique_values_only': config.show_unique_values_only
                }
                attr_data['form_configs'].append(config_data)
            
            attributes.append(attr_data)
        
        # Get forms summary
        forms = []
        form_definitions = FormDefinition.query.filter_by(
            entity_type_id=entity_type_id,
            is_active=True
        ).all()
        
        for form in form_definitions:
            form_data = {
                'id': form.id,
                'code': form.code,
                'name': form.name,
                'form_type': form.form_type.value,
                'layout_type': form.layout_type.value,
                'is_default': form.is_default,
                'field_count': form.form_field_configurations.filter_by(is_visible=True).count()
            }
            forms.append(form_data)
        
        return {
            'entity': EntityDesignerUtils.get_entity_summary(entity_type),
            'attributes': attributes,
            'forms': forms
        }
    
    @staticmethod
    def create_default_forms(entity_type_id):
        """Create default forms for an entity type"""
        entity_type = EntityType.query.get(entity_type_id)
        if not entity_type:
            return False
        
        # Get all attributes
        attributes = AttributeDefinition.query.filter_by(
            entity_type_id=entity_type_id,
            is_active=True
        ).order_by(AttributeDefinition.order_index).all()
        
        form_types = [
            (FormTypeEnum.LIST, 'List View', LayoutTypeEnum.SINGLE_COLUMN),
            (FormTypeEnum.DETAIL, 'Detail View', LayoutTypeEnum.TWO_COLUMN),
            (FormTypeEnum.CREATE, 'Create Form', LayoutTypeEnum.TWO_COLUMN),
            (FormTypeEnum.EDIT, 'Edit Form', LayoutTypeEnum.TWO_COLUMN)
        ]
        
        try:
            for form_type, form_name, layout_type in form_types:
                # Create form definition
                form_def = FormDefinition(
                    entity_type_id=entity_type_id,
                    code=f"{entity_type.code}_{form_type.value}",
                    name=f"{entity_type.name} {form_name}",
                    form_type=form_type,
                    layout_type=layout_type,
                    records_per_page=25 if form_type == FormTypeEnum.LIST else 1,
                    is_default=True,
                    is_active=True,
                    created_by=current_user.username
                )
                db.session.add(form_def)
                db.session.flush()
                
                # Create field configurations for each attribute
                for attr in attributes:
                    field_type = EntityDesignerUtils.get_default_field_type(attr)
                    is_editable = form_type in [FormTypeEnum.CREATE, FormTypeEnum.EDIT]
                    
                    field_config = FormFieldConfiguration(
                        form_definition_id=form_def.id,
                        attribute_definition_id=attr.id,
                        field_label=attr.name,
                        field_type=field_type,
                        order_index=attr.order_index,
                        is_visible=True,
                        is_editable=is_editable,
                        is_required=attr.is_required and is_editable,
                        created_by=current_user.username
                    )
                    db.session.add(field_config)
            
            db.session.commit()
            return True
            
        except Exception as e:
            db.session.rollback()
            print(f"Error creating default forms: {e}")
            return False
    
    @staticmethod
    def get_default_field_type(attribute):
        """Determine default field type for an attribute"""
        mapping = {
            DataTypeEnum.VARCHAR: FieldTypeEnum.TEXT,
            DataTypeEnum.TEXT: FieldTypeEnum.TEXTAREA,
            DataTypeEnum.INT: FieldTypeEnum.NUMBER,
            DataTypeEnum.BIGINT: FieldTypeEnum.NUMBER,
            DataTypeEnum.DECIMAL: FieldTypeEnum.DECIMAL,
            DataTypeEnum.BOOLEAN: FieldTypeEnum.CHECKBOX,
            DataTypeEnum.DATE: FieldTypeEnum.DATE,
            DataTypeEnum.DATETIME: FieldTypeEnum.DATETIME
        }
        return mapping.get(attribute.data_type, FieldTypeEnum.TEXT)

# Main Entity Designer Routes

@entity_designer_bp.route('/')
@login_required
def index():
    """Main Entity Designer interface"""
    # Get all modules with their entities
    modules = Module.query.filter_by(is_active=True).join(Application).order_by(
        Application.order_index, 
        Module.order_index
    ).all()
    
    entity_summaries = []
    for module in modules:
        entity_types = module.entity_types.filter_by(is_active=True).order_by(EntityType.order_index).all()
        for entity_type in entity_types:
            summary = EntityDesignerUtils.get_entity_summary(entity_type)
            entity_summaries.append(summary)
    
    return render_template('entity_designer/index.html', 
                         entity_summaries=entity_summaries,
                         modules=modules)

@entity_designer_bp.route('/entity/<int:entity_id>')
@login_required
def entity_detail(entity_id):
    """Get entity details via AJAX"""
    details = EntityDesignerUtils.get_entity_details(entity_id)
    if not details:
        return jsonify({'error': 'Entity not found'}), 404
    
    return jsonify(details)

@entity_designer_bp.route('/entity/<int:entity_id>/save', methods=['POST'])
@login_required
def save_entity(entity_id):
    """Save entity configuration"""
    try:
        data = request.json
        entity_type = EntityType.query.get(entity_id)
        if not entity_type:
            return jsonify({'error': 'Entity not found'}), 404
        
        # Update entity basic info
        if 'entity' in data:
            entity_info = data['entity']
            entity_type.name = entity_info.get('name', entity_type.name)
            entity_type.description = entity_info.get('description', entity_type.description)
            entity_type.icon = entity_info.get('icon', entity_type.icon)
            entity_type.is_master = entity_info.get('is_master', entity_type.is_master)
            entity_type.is_transactional = entity_info.get('is_transactional', entity_type.is_transactional)
            entity_type.updated_by = current_user.username
        
        # Update attributes
        if 'attributes' in data:
            for attr_data in data['attributes']:
                attr_id = attr_data.get('id')
                if attr_id:
                    # Update existing attribute
                    attr = AttributeDefinition.query.get(attr_id)
                    if attr and attr.entity_type_id == entity_id:
                        attr.name = attr_data.get('name', attr.name)
                        attr.description = attr_data.get('description', attr.description)
                        attr.is_required = attr_data.get('is_required', attr.is_required)
                        attr.is_unique = attr_data.get('is_unique', attr.is_unique)
                        attr.max_length = attr_data.get('max_length', attr.max_length)
                        attr.default_value = attr_data.get('default_value', attr.default_value)
                        attr.order_index = attr_data.get('order_index', attr.order_index)
                        attr.updated_by = current_user.username
                else:
                    # Create new attribute
                    data_type = DataTypeEnum(attr_data.get('data_type', 'VARCHAR'))
                    new_attr = AttributeDefinition(
                        entity_type_id=entity_id,
                        code=attr_data.get('code', ''),
                        name=attr_data.get('name', ''),
                        description=attr_data.get('description', ''),
                        data_type=data_type,
                        max_length=attr_data.get('max_length'),
                        is_required=attr_data.get('is_required', False),
                        is_unique=attr_data.get('is_unique', False),
                        default_value=attr_data.get('default_value'),
                        order_index=attr_data.get('order_index', 0),
                        is_active=True,
                        created_by=current_user.username
                    )
                    db.session.add(new_attr)
        
        # Update form field configurations
        if 'form_configs' in data:
            for config_data in data['form_configs']:
                config_id = config_data.get('id')
                if config_id:
                    config = FormFieldConfiguration.query.get(config_id)
                    if config:
                        config.field_type = FieldTypeEnum(config_data.get('field_type', config.field_type.value))
                        config.field_label = config_data.get('field_label', config.field_label)
                        config.is_visible = config_data.get('is_visible', config.is_visible)
                        config.is_editable = config_data.get('is_editable', config.is_editable)
                        config.is_required = config_data.get('is_required', config.is_required)
                        config.order_index = config_data.get('order_index', config.order_index)
                        
                        # Handle dropdown configuration
                        if config_data.get('dropdown_source_entity_id'):
                            config.dropdown_source_entity_id = config_data['dropdown_source_entity_id']
                            config.dropdown_source_attribute_id = config_data.get('dropdown_source_attribute_id')
                            config.show_unique_values_only = config_data.get('show_unique_values_only', False)
                        
                        config.updated_by = current_user.username
        
        db.session.commit()
        return jsonify({'success': True, 'message': 'Entity saved successfully'})
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

@entity_designer_bp.route('/entity/<int:entity_id>/attribute', methods=['POST'])
@login_required
def add_attribute(entity_id):
    """Add new attribute to entity"""
    try:
        data = request.json
        entity_type = EntityType.query.get(entity_id)
        if not entity_type:
            return jsonify({'error': 'Entity not found'}), 404
        
        # Get next order index
        max_order = db.session.query(db.func.max(AttributeDefinition.order_index)).filter_by(
            entity_type_id=entity_id
        ).scalar() or 0
        
        # Create new attribute
        attribute = AttributeDefinition(
            entity_type_id=entity_id,
            code=data.get('code', ''),
            name=data.get('name', ''),
            description=data.get('description', ''),
            data_type=DataTypeEnum(data.get('data_type', 'VARCHAR')),
            max_length=data.get('max_length'),
            is_required=data.get('is_required', False),
            is_unique=data.get('is_unique', False),
            order_index=max_order + 1,
            is_active=True,
            created_by=current_user.username
        )
        db.session.add(attribute)
        db.session.flush()
        
        # Auto-create form field configurations for existing forms
        existing_forms = FormDefinition.query.filter_by(
            entity_type_id=entity_id,
            is_active=True
        ).all()
        
        for form_def in existing_forms:
            field_type = EntityDesignerUtils.get_default_field_type(attribute)
            is_editable = form_def.form_type in [FormTypeEnum.CREATE, FormTypeEnum.EDIT]
            
            field_config = FormFieldConfiguration(
                form_definition_id=form_def.id,
                attribute_definition_id=attribute.id,
                field_label=attribute.name,
                field_type=field_type,
                order_index=attribute.order_index,
                is_visible=True,
                is_editable=is_editable,
                is_required=attribute.is_required and is_editable,
                created_by=current_user.username
            )
            db.session.add(field_config)
        
        db.session.commit()
        
        return jsonify({
            'success': True, 
            'attribute_id': attribute.id,
            'message': 'Attribute added successfully'
        })
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

@entity_designer_bp.route('/entity/<int:entity_id>/attribute/<int:attr_id>', methods=['DELETE'])
@login_required
def delete_attribute(entity_id, attr_id):
    """Delete attribute and its form configurations"""
    try:
        attribute = AttributeDefinition.query.filter_by(
            id=attr_id,
            entity_type_id=entity_id
        ).first()
        
        if not attribute:
            return jsonify({'error': 'Attribute not found'}), 404
        
        # Check if attribute is used in any instances
        instance_count = 0
        if attribute.data_type in [DataTypeEnum.VARCHAR, DataTypeEnum.TEXT]:
            instance_count = AttributeValueText.query.filter_by(
                attribute_definition_id=attr_id
            ).count()
        elif attribute.data_type in [DataTypeEnum.INT, DataTypeEnum.BIGINT, DataTypeEnum.DECIMAL]:
            instance_count = AttributeValueNumeric.query.filter_by(
                attribute_definition_id=attr_id
            ).count()
        # Add other type checks as needed
        
        if instance_count > 0:
            return jsonify({
                'error': f'Cannot delete attribute. It has {instance_count} data records.'
            }), 400
        
        # Delete form field configurations first
        FormFieldConfiguration.query.filter_by(
            attribute_definition_id=attr_id
        ).delete()
        
        # Delete attribute
        db.session.delete(attribute)
        db.session.commit()
        
        return jsonify({'success': True, 'message': 'Attribute deleted successfully'})
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

@entity_designer_bp.route('/entity/<int:entity_id>/generate-forms', methods=['POST'])
@login_required
def generate_default_forms(entity_id):
    """Generate default forms for entity"""
    try:
        success = EntityDesignerUtils.create_default_forms(entity_id)
        if success:
            return jsonify({'success': True, 'message': 'Default forms generated successfully'})
        else:
            return jsonify({'error': 'Failed to generate forms'}), 500
            
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@entity_designer_bp.route('/dropdown-sources')
@login_required
def get_dropdown_sources():
    """Get available entities and attributes for dropdown configuration"""
    entities = EntityType.query.filter_by(is_active=True).all()
    
    entity_data = []
    for entity in entities:
        attributes = AttributeDefinition.query.filter_by(
            entity_type_id=entity.id,
            is_active=True
        ).order_by(AttributeDefinition.order_index).all()
        
        entity_data.append({
            'id': entity.id,
            'name': entity.name,
            'code': entity.code,
            'attributes': [{
                'id': attr.id,
                'code': attr.code,
                'name': attr.name,
                'data_type': attr.data_type.value
            } for attr in attributes]
        })
    
    return jsonify(entity_data)

@entity_designer_bp.route('/entity/<int:entity_id>/form-config', methods=['POST'])
@login_required
def save_form_config(entity_id):
    """Save form field configuration"""
    try:
        data = request.json
        entity_type = EntityType.query.get(entity_id)
        if not entity_type:
            return jsonify({'error': 'Entity not found'}), 404
        
        form_type = FormTypeEnum(data.get('form_type'))
        attribute_id = data.get('attribute_id')
        
        # Find or create form definition
        form_def = FormDefinition.query.filter_by(
            entity_type_id=entity_id,
            form_type=form_type,
            is_active=True
        ).first()
        
        if not form_def:
            return jsonify({'error': 'Form definition not found'}), 404
        
        # Find or create form field configuration
        field_config = FormFieldConfiguration.query.filter_by(
            form_definition_id=form_def.id,
            attribute_definition_id=attribute_id
        ).first()
        
        if not field_config:
            field_config = FormFieldConfiguration(
                form_definition_id=form_def.id,
                attribute_definition_id=attribute_id,
                field_label=data.get('field_label', ''),
                field_type=FieldTypeEnum(data.get('field_type', 'TEXT')),
                order_index=data.get('order_index', 0),
                is_visible=True,
                is_editable=True,
                is_required=False,
                created_by=current_user.username
            )
            db.session.add(field_config)
        
        # Update configuration
        if 'field_type' in data:
            field_config.field_type = FieldTypeEnum(data['field_type'])
        if 'is_visible' in data:
            field_config.is_visible = data['is_visible']
        if 'is_editable' in data:
            field_config.is_editable = data['is_editable']
        if 'is_required' in data:
            field_config.is_required = data['is_required']
        if 'dropdown_source_entity_id' in data:
            field_config.dropdown_source_entity_id = data['dropdown_source_entity_id'] or None
        if 'dropdown_source_attribute_id' in data:
            field_config.dropdown_source_attribute_id = data['dropdown_source_attribute_id'] or None
        if 'show_unique_values_only' in data:
            field_config.show_unique_values_only = data['show_unique_values_only']
        
        field_config.updated_by = current_user.username
        field_config.updated_at = datetime.utcnow()
        
        db.session.commit()
        
        return jsonify({
            'success': True,
            'message': 'Form configuration saved successfully'
        })
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

@entity_designer_bp.route('/create-entity', methods=['POST'])
@login_required
def create_entity():
    """Create new entity type"""
    try:
        data = request.json
        
        # Get module
        module = Module.query.get(data.get('module_id'))
        if not module:
            return jsonify({'error': 'Module not found'}), 404
        
        # Create entity type
        entity_type = EntityType(
            module_id=data['module_id'],
            code=data['code'],
            name=data['name'],
            description=data.get('description', ''),
            icon=data.get('icon', 'table_view'),
            is_master=data.get('is_master', False),
            is_transactional=data.get('is_transactional', True),
            order_index=data.get('order_index', 0),
            is_active=True,
            created_by=current_user.username
        )
        db.session.add(entity_type)
        db.session.flush()
        
        # Create basic attributes if provided
        if 'attributes' in data:
            for i, attr_data in enumerate(data['attributes'], 1):
                attribute = AttributeDefinition(
                    entity_type_id=entity_type.id,
                    code=attr_data['code'],
                    name=attr_data['name'],
                    description=attr_data.get('description', ''),
                    data_type=DataTypeEnum(attr_data.get('data_type', 'VARCHAR')),
                    max_length=attr_data.get('max_length'),
                    is_required=attr_data.get('is_required', False),
                    is_unique=attr_data.get('is_unique', False),
                    order_index=i,
                    is_active=True,
                    created_by=current_user.username
                )
                db.session.add(attribute)
        
        db.session.commit()
        
        # Generate default forms
        EntityDesignerUtils.create_default_forms(entity_type.id)
        
        return jsonify({
            'success': True, 
            'entity_id': entity_type.id,
            'message': 'Entity created successfully'
        })
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

================
File: entity_designer/templates/entity_designer/base.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="csrf-token" content="{{ csrf_token() }}">
    <title>{% block title %}Entity Designer - Port Management System{% endblock %}</title>
    
    <!-- Bootstrap 5 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Bootstrap Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
</head>
<body>
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container-fluid">
            <a class="navbar-brand" href="{{ url_for('entity_designer.index') }}">
                <i class="bi bi-diagram-3"></i>
                Entity Designer
            </a>
            
            <div class="navbar-nav ms-auto">
                <a class="nav-link" href="{{ url_for('dashboard') }}">
                    <i class="bi bi-house"></i> Dashboard
                </a>
                <a class="nav-link" href="/custom-admin/">
                    <i class="bi bi-gear"></i> System Admin
                </a>
                <div class="dropdown">
                    <a class="nav-link dropdown-toggle" href="#" data-bs-toggle="dropdown">
                        <i class="bi bi-person"></i> {{ current_user.username }}
                    </a>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="{{ url_for('logout') }}">Logout</a></li>
                    </ul>
                </div>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <div class="container-fluid py-3">
        <!-- Flash Messages -->
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                    <div class="alert alert-{{ 'danger' if category == 'error' else category }} alert-dismissible fade show">
                        {{ message }}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                {% endfor %}
            {% endif %}
        {% endwith %}

        {% block content %}{% endblock %}
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        // CSRF token for AJAX
        function getCSRFToken() {
            return document.querySelector('meta[name="csrf-token"]').getAttribute('content');
        }
        
        // Show toast notification
        function showToast(message, type = 'info') {
            const toastContainer = document.getElementById('toast-container') || 
                (() => {
                    const container = document.createElement('div');
                    container.id = 'toast-container';
                    container.className = 'toast-container position-fixed top-0 end-0 p-3';
                    container.style.zIndex = '9999';
                    document.body.appendChild(container);
                    return container;
                })();
            
            const toast = document.createElement('div');
            toast.className = `toast align-items-center text-bg-${type} border-0`;
            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">${message}</div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                </div>
            `;
            
            toastContainer.appendChild(toast);
            const bsToast = new bootstrap.Toast(toast);
            bsToast.show();
            
            toast.addEventListener('hidden.bs.toast', () => toast.remove());
        }
        
        // API helper
        async function apiCall(url, method = 'GET', data = null) {
            const options = {
                method,
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': getCSRFToken()
                }
            };
            
            if (data && method !== 'GET') {
                options.body = JSON.stringify(data);
            }
            
            try {
                const response = await fetch(url, options);
                const result = await response.json();
                
                if (!response.ok) {
                    throw new Error(result.error || 'Request failed');
                }
                
                return result;
            } catch (error) {
                showToast(error.message, 'danger');
                throw error;
            }
        }
    </script>
    
    {% block extra_js %}{% endblock %}
</body>
</html>

================
File: entity_designer/templates/entity_designer/index.html
================
{% extends "entity_designer/base.html" %}

{% block content %}
<div class="row">
    <div class="col-md-4">
        <!-- Entity List Panel -->
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h6 class="mb-0">
                    <i class="bi bi-table"></i> Entities
                </h6>
                <button class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#createEntityModal">
                    <i class="bi bi-plus"></i> New
                </button>
            </div>
            <div class="card-body p-0">
                <div class="list-group list-group-flush" style="max-height: 70vh; overflow-y: auto;">
                    {% for entity in entity_summaries %}
                    <div class="list-group-item list-group-item-action" 
                         onclick="loadEntity({{ entity.id }})" 
                         id="entity-{{ entity.id }}"
                         style="cursor: pointer; border-left: 3px solid {{ '#17a2b8' if entity.is_master else '#28a745' }};">
                        <div class="d-flex justify-content-between align-items-start">
                            <div class="flex-grow-1">
                                <h6 class="mb-1">{{ entity.name }}</h6>
                                <p class="mb-1 text-muted small">{{ entity.application }} > {{ entity.module }}</p>
                                <div class="d-flex gap-1">
                                    {% if entity.is_master %}
                                    <span class="badge bg-info">Master</span>
                                    {% endif %}
                                    {% if entity.is_transactional %}
                                    <span class="badge bg-success">Transactional</span>
                                    {% endif %}
                                </div>
                            </div>
                            <div class="text-end">
                                <small class="text-muted">
                                    {{ entity.attributes_count }} attrs<br>
                                    {{ entity.instances_count }} records
                                </small>
                            </div>
                        </div>
                    </div>
                    {% endfor %}
                </div>
            </div>
        </div>
    </div>
    
    <div class="col-md-8">
        <!-- Entity Designer Panel -->
        <div id="designerPanel" class="card" style="display: none;">
            <div class="card-header">
                <h5 class="mb-0" id="entityTitle">
                    <i class="bi bi-pencil-square"></i> Entity Designer
                </h5>
            </div>
            <div class="card-body">
                <!-- Entity Basic Info Tab -->
                <ul class="nav nav-tabs" id="designerTabs">
                    <li class="nav-item">
                        <button class="nav-link active" data-bs-toggle="tab" data-bs-target="#basicTab">
                            <i class="bi bi-info-circle"></i> Basic Info
                        </button>
                    </li>
                    <li class="nav-item">
                        <button class="nav-link" data-bs-toggle="tab" data-bs-target="#attributesTab">
                            <i class="bi bi-list-ul"></i> Attributes
                        </button>
                    </li>
                    <li class="nav-item">
                        <button class="nav-link" data-bs-toggle="tab" data-bs-target="#formsTab">
                            <i class="bi bi-card-text"></i> Forms
                        </button>
                    </li>
                </ul>
                
                <div class="tab-content mt-3">
                    <!-- Basic Info Tab -->
                    <div class="tab-pane fade show active" id="basicTab">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Entity Name</label>
                                    <input type="text" class="form-control" id="entityName">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Description</label>
                                    <textarea class="form-control" id="entityDescription" rows="3"></textarea>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Icon</label>
                                    <input type="text" class="form-control" id="entityIcon" placeholder="table_view">
                                </div>
                                <div class="row">
                                    <div class="col-6">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" id="isMaster">
                                            <label class="form-check-label" for="isMaster">Master Data</label>
                                        </div>
                                    </div>
                                    <div class="col-6">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" id="isTransactional">
                                            <label class="form-check-label" for="isTransactional">Transactional</label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <button class="btn btn-primary btn-sm" onclick="saveBasicInfo()">
                            <i class="bi bi-save"></i> Save Basic Info
                        </button>
                    </div>
                    
                    <!-- Attributes Tab -->
                    <div class="tab-pane fade" id="attributesTab">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h6 class="mb-0">Attributes</h6>
                            <button class="btn btn-success btn-sm" onclick="addAttribute()">
                                <i class="bi bi-plus"></i> Add Attribute
                            </button>
                        </div>
                        
                        <div id="attributesList">
                            <!-- Attributes will be loaded here -->
                        </div>
                    </div>
                    
                    <!-- Forms Tab -->
                    <div class="tab-pane fade" id="formsTab">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h6 class="mb-0">Form Configurations</h6>
                            <button class="btn btn-success btn-sm" onclick="generateForms()">
                                <i class="bi bi-magic"></i> Generate Forms
                            </button>
                        </div>
                        
                        <!-- Form Type Selector -->
                        <div class="mb-3">
                            <select class="form-select form-select-sm" id="formTypeSelector" onchange="loadFormFields()">
                                <option value="">Select Form Type to Configure</option>
                                <option value="LIST">List View</option>
                                <option value="DETAIL">Detail View</option>
                                <option value="CREATE">Create Form</option>
                                <option value="EDIT">Edit Form</option>
                            </select>
                        </div>
                        
                        <!-- Form Fields Configuration -->
                        <div id="formFieldsConfig" style="display: none;">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <small class="text-muted">Configure how fields appear in the selected form</small>
                                <button class="btn btn-primary btn-sm" onclick="saveFormConfig()">
                                    <i class="bi bi-save"></i> Save Form
                                </button>
                            </div>
                            
                            <div class="table-responsive">
                                <table class="table table-sm table-bordered">
                                    <thead>
                                        <tr>
                                            <th style="width: 150px;">Attribute</th>
                                            <th style="width: 120px;">Field Type</th>
                                            <th style="width: 80px;">Visible</th>
                                            <th style="width: 80px;">Editable</th>
                                            <th style="width: 80px;">Required</th>
                                            <th>Dropdown Source</th>
                                        </tr>
                                    </thead>
                                    <tbody id="formFieldsTable">
                                        <!-- Form fields will be loaded here -->
                                    </tbody>
                                </table>
                            </div>
                        </div>
                        
                        <div id="formsList">
                            <!-- Forms summary will be loaded here -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Welcome Panel -->
        <div id="welcomePanel" class="card">
            <div class="card-body welcome-panel">
                <i class="bi bi-diagram-3" style="font-size: 4rem; opacity: 0.8;"></i>
                <h4 class="mt-3 mb-2">Entity Designer</h4>
                <p class="mb-4" style="opacity: 0.9;">Design and configure your entities, attributes, and forms in one place</p>
                <div class="row text-center">
                    <div class="col-4">
                        <i class="bi bi-table" style="font-size: 2rem; opacity: 0.7;"></i>
                        <p class="mt-2 mb-0" style="font-size: 11px;">Manage Entities</p>
                    </div>
                    <div class="col-4">
                        <i class="bi bi-list-ul" style="font-size: 2rem; opacity: 0.7;"></i>
                        <p class="mt-2 mb-0" style="font-size: 11px;">Configure Attributes</p>
                    </div>
                    <div class="col-4">
                        <i class="bi bi-card-text" style="font-size: 2rem; opacity: 0.7;"></i>
                        <p class="mt-2 mb-0" style="font-size: 11px;">Design Forms</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Create Entity Modal -->
<div class="modal fade" id="createEntityModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create New Entity</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Module</label>
                    <select class="form-select" id="newEntityModule">
                        <option value="">Select Module</option>
                        {% for module in modules %}
                        <option value="{{ module.id }}">{{ module.application.name }} > {{ module.name }}</option>
                        {% endfor %}
                    </select>
                </div>
                <div class="mb-3">
                    <label class="form-label">Code</label>
                    <input type="text" class="form-control" id="newEntityCode" placeholder="ENTITY_CODE">
                </div>
                <div class="mb-3">
                    <label class="form-label">Name</label>
                    <input type="text" class="form-control" id="newEntityName" placeholder="Entity Name">
                </div>
                <div class="mb-3">
                    <label class="form-label">Description</label>
                    <textarea class="form-control" id="newEntityDescription" rows="2"></textarea>
                </div>
                <div class="row">
                    <div class="col-6">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="newIsMaster">
                            <label class="form-check-label" for="newIsMaster">Master Data</label>
                        </div>
                    </div>
                    <div class="col-6">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="newIsTransactional" checked>
                            <label class="form-check-label" for="newIsTransactional">Transactional</label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="createEntity()">Create Entity</button>
            </div>
        </div>
    </div>
</div>

<!-- Add Attribute Modal -->
<div class="modal fade" id="addAttributeModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add New Attribute</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Code</label>
                    <input type="text" class="form-control" id="newAttrCode" placeholder="ATTRIBUTE_CODE">
                </div>
                <div class="mb-3">
                    <label class="form-label">Name</label>
                    <input type="text" class="form-control" id="newAttrName" placeholder="Attribute Name">
                </div>
                <div class="mb-3">
                    <label class="form-label">Data Type</label>
                    <select class="form-select" id="newAttrDataType">
                        <option value="VARCHAR">Text (VARCHAR)</option>
                        <option value="TEXT">Long Text</option>
                        <option value="INT">Integer</option>
                        <option value="DECIMAL">Decimal</option>
                        <option value="BOOLEAN">Boolean</option>
                        <option value="DATE">Date</option>
                        <option value="DATETIME">Date Time</option>
                    </select>
                </div>
                <div class="mb-3">
                    <label class="form-label">Max Length (for text fields)</label>
                    <input type="number" class="form-control" id="newAttrMaxLength">
                </div>
                <div class="row">
                    <div class="col-6">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="newAttrRequired">
                            <label class="form-check-label" for="newAttrRequired">Required</label>
                        </div>
                    </div>
                    <div class="col-6">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="newAttrUnique">
                            <label class="form-check-label" for="newAttrUnique">Unique</label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="saveNewAttribute()">Add Attribute</button>
            </div>
        </div>
    </div>
</div>

{% endblock %}

{% block extra_js %}
<script>
let currentEntityId = null;
let currentEntityData = null;

// Load entity details
async function loadEntity(entityId) {
    try {
        // Highlight selected entity
        document.querySelectorAll('.list-group-item').forEach(item => {
            item.classList.remove('active');
        });
        document.getElementById(`entity-${entityId}`).classList.add('active');
        
        // Load entity data
        const data = await apiCall(`/entity-designer/entity/${entityId}`);
        currentEntityId = entityId;
        currentEntityData = data;
        
        // Show designer panel
        document.getElementById('welcomePanel').style.display = 'none';
        document.getElementById('designerPanel').style.display = 'block';
        
        // Update title
        document.getElementById('entityTitle').innerHTML = `
            <i class="bi bi-pencil-square"></i> ${data.entity.name} Designer
        `;
        
        // Reset form type selector
        document.getElementById('formTypeSelector').value = '';
        document.getElementById('formFieldsConfig').style.display = 'none';
        
        // Load basic info
        loadBasicInfo(data.entity);
        
        // Load attributes
        loadAttributes(data.attributes);
        
        // Load forms
        loadForms(data.forms);
        
    } catch (error) {
        console.error('Failed to load entity:', error);
    }
}

// Load basic info tab
function loadBasicInfo(entity) {
    document.getElementById('entityName').value = entity.name || '';
    document.getElementById('entityDescription').value = entity.description || '';
    document.getElementById('entityIcon').value = entity.icon || '';
    document.getElementById('isMaster').checked = entity.is_master || false;
    document.getElementById('isTransactional').checked = entity.is_transactional || false;
}

// Load attributes tab
function loadAttributes(attributes) {
    const container = document.getElementById('attributesList');
    container.innerHTML = '';
    
    attributes.forEach((attr, index) => {
        const attributeHtml = `
            <div class="attribute-item p-3" data-attr-id="${attr.id}">
                <div class="row">
                    <div class="col-md-8">
                        <div class="row">
                            <div class="col-6">
                                <label class="form-label">Code</label>
                                <input type="text" class="form-control form-control-sm" 
                                       value="${attr.code}" readonly>
                            </div>
                            <div class="col-6">
                                <label class="form-label">Name</label>
                                <input type="text" class="form-control form-control-sm" 
                                       value="${attr.name}" 
                                       onchange="updateAttribute(${attr.id}, 'name', this.value)">
                            </div>
                        </div>
                        <div class="row mt-2">
                            <div class="col-4">
                                <label class="form-label">Data Type</label>
                                <select class="form-select form-select-sm" disabled>
                                    <option>${attr.data_type}</option>
                                </select>
                            </div>
                            <div class="col-4">
                                <label class="form-label">Max Length</label>
                                <input type="number" class="form-control form-control-sm" 
                                       value="${attr.max_length || ''}"
                                       onchange="updateAttribute(${attr.id}, 'max_length', this.value)">
                            </div>
                            <div class="col-4 pt-4">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" 
                                           ${attr.is_required ? 'checked' : ''}
                                           onchange="updateAttribute(${attr.id}, 'is_required', this.checked)">
                                    <label class="form-check-label">Required</label>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="text-end">
                            <small class="text-muted">Form Configs: ${attr.form_configs.length}</small>
                            <br>
                            <button class="btn btn-outline-danger btn-sm mt-2" 
                                    onclick="deleteAttribute(${attr.id})">
                                <i class="bi bi-trash"></i> Delete
                            </button>
                        </div>
                        
                        <!-- Form Configurations for this attribute -->
                        <div class="mt-3">
                            ${attr.form_configs.map(config => `
                                <div class="form-config-item p-2 mb-1">
                                    <small><strong>${config.form_type}</strong></small>
                                    <div class="row mt-1">
                                        <div class="col-6">
                                            <select class="form-select form-select-sm" 
                                                    onchange="updateFormConfig(${config.id}, 'field_type', this.value)">
                                                <option value="TEXT" ${config.field_type === 'TEXT' ? 'selected' : ''}>Text</option>
                                                <option value="TEXTAREA" ${config.field_type === 'TEXTAREA' ? 'selected' : ''}>Textarea</option>
                                                <option value="NUMBER" ${config.field_type === 'NUMBER' ? 'selected' : ''}>Number</option>
                                                <option value="SELECT" ${config.field_type === 'SELECT' ? 'selected' : ''}>Select</option>
                                                <option value="CHECKBOX" ${config.field_type === 'CHECKBOX' ? 'selected' : ''}>Checkbox</option>
                                                <option value="DATE" ${config.field_type === 'DATE' ? 'selected' : ''}>Date</option>
                                            </select>
                                        </div>
                                        <div class="col-6">
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" 
                                                       ${config.is_visible ? 'checked' : ''}
                                                       onchange="updateFormConfig(${config.id}, 'is_visible', this.checked)">
                                                <label class="form-check-label small">Visible</label>
                                            </div>
                                        </div>
                                    </div>
                                    ${config.field_type === 'SELECT' ? `
                                        <div class="mt-2">
                                            <select class="form-select form-select-sm" 
                                                    onchange="updateFormConfig(${config.id}, 'dropdown_source_entity_id', this.value)">
                                                <option value="">Select Source Entity</option>
                                                <!-- Will be populated via JS -->
                                            </select>
                                        </div>
                                    ` : ''}
                                </div>
                            `).join('')}
                        </div>
                    </div>
                </div>
            </div>
        `;
        container.innerHTML += attributeHtml;
    });
}

// Load forms tab
function loadForms(forms) {
    const container = document.getElementById('formsList');
    container.innerHTML = '';
    
    const formsHtml = `
        <div class="table-responsive">
            <table class="table table-sm">
                <thead>
                    <tr>
                        <th>Form Type</th>
                        <th>Name</th>
                        <th>Layout</th>
                        <th>Fields</th>
                        <th>Default</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    ${forms.map(form => `
                        <tr>
                            <td><span class="badge bg-secondary">${form.form_type}</span></td>
                            <td>${form.name}</td>
                            <td>${form.layout_type}</td>
                            <td>${form.field_count}</td>
                            <td>${form.is_default ? '<i class="bi bi-check text-success"></i>' : ''}</td>
                            <td>
                                <button class="btn btn-outline-primary btn-sm" onclick="selectFormType('${form.form_type}')">
                                    <i class="bi bi-gear"></i> Configure
                                </button>
                            </td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        </div>
    `;
    container.innerHTML = formsHtml;
}

// Select form type and load its fields
function selectFormType(formType) {
    document.getElementById('formTypeSelector').value = formType;
    loadFormFields();
}

// Load form fields for configuration
async function loadFormFields() {
    const formType = document.getElementById('formTypeSelector').value;
    const formFieldsConfig = document.getElementById('formFieldsConfig');
    const formFieldsTable = document.getElementById('formFieldsTable');
    
    if (!formType || !currentEntityData) {
        formFieldsConfig.style.display = 'none';
        return;
    }
    
    formFieldsConfig.style.display = 'block';
    
    // Get dropdown sources for configuration
    let dropdownSources = [];
    try {
        dropdownSources = await apiCall('/entity-designer/dropdown-sources');
    } catch (error) {
        console.error('Failed to load dropdown sources:', error);
    }
    
    // Build form fields table
    const tableRows = currentEntityData.attributes.map(attr => {
        // Find form config for this attribute and form type
        const formConfig = attr.form_configs.find(config => config.form_type === formType) || {
            field_type: getDefaultFieldType(attr.data_type),
            is_visible: true,
            is_editable: formType === 'CREATE' || formType === 'EDIT',
            is_required: attr.is_required && (formType === 'CREATE' || formType === 'EDIT'),
            dropdown_source_entity_id: null,
            dropdown_source_attribute_id: null
        };
        
        return `
            <tr data-attr-id="${attr.id}" data-form-type="${formType}">
                <td>
                    <strong>${attr.name}</strong><br>
                    <small class="text-muted">${attr.code}</small>
                </td>
                <td>
                    <select class="form-select form-select-sm" 
                            onchange="updateFormField(${attr.id}, 'field_type', this.value)">
                        <option value="TEXT" ${formConfig.field_type === 'TEXT' ? 'selected' : ''}>Text</option>
                        <option value="TEXTAREA" ${formConfig.field_type === 'TEXTAREA' ? 'selected' : ''}>Textarea</option>
                        <option value="NUMBER" ${formConfig.field_type === 'NUMBER' ? 'selected' : ''}>Number</option>
                        <option value="DECIMAL" ${formConfig.field_type === 'DECIMAL' ? 'selected' : ''}>Decimal</option>
                        <option value="SELECT" ${formConfig.field_type === 'SELECT' ? 'selected' : ''}>Dropdown</option>
                        <option value="MULTISELECT" ${formConfig.field_type === 'MULTISELECT' ? 'selected' : ''}>Multi-Select</option>
                        <option value="CHECKBOX" ${formConfig.field_type === 'CHECKBOX' ? 'selected' : ''}>Checkbox</option>
                        <option value="DATE" ${formConfig.field_type === 'DATE' ? 'selected' : ''}>Date</option>
                        <option value="DATETIME" ${formConfig.field_type === 'DATETIME' ? 'selected' : ''}>DateTime</option>
                    </select>
                </td>
                <td>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" 
                               ${formConfig.is_visible ? 'checked' : ''}
                               onchange="updateFormField(${attr.id}, 'is_visible', this.checked)">
                    </div>
                </td>
                <td>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" 
                               ${formConfig.is_editable ? 'checked' : ''}
                               ${formType === 'DETAIL' || formType === 'LIST' ? 'disabled' : ''}
                               onchange="updateFormField(${attr.id}, 'is_editable', this.checked)">
                    </div>
                </td>
                <td>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" 
                               ${formConfig.is_required ? 'checked' : ''}
                               ${!formConfig.is_editable ? 'disabled' : ''}
                               onchange="updateFormField(${attr.id}, 'is_required', this.checked)">
                    </div>
                </td>
                <td>
                    <div class="dropdown-config" style="display: ${formConfig.field_type === 'SELECT' || formConfig.field_type === 'MULTISELECT' ? 'block' : 'none'};">
                        <select class="form-select form-select-sm mb-1" 
                                onchange="updateFormField(${attr.id}, 'dropdown_source_entity_id', this.value)">
                            <option value="">Select Entity</option>
                            ${dropdownSources.map(entity => 
                                `<option value="${entity.id}" ${formConfig.dropdown_source_entity_id == entity.id ? 'selected' : ''}>
                                    ${entity.name}
                                </option>`
                            ).join('')}
                        </select>
                        ${formConfig.dropdown_source_entity_id ? `
                            <select class="form-select form-select-sm" 
                                    onchange="updateFormField(${attr.id}, 'dropdown_source_attribute_id', this.value)">
                                <option value="">Select Attribute</option>
                                ${(() => {
                                    const sourceEntity = dropdownSources.find(e => e.id == formConfig.dropdown_source_entity_id);
                                    return sourceEntity ? sourceEntity.attributes.map(sourceAttr => 
                                        `<option value="${sourceAttr.id}" ${formConfig.dropdown_source_attribute_id == sourceAttr.id ? 'selected' : ''}>
                                            ${sourceAttr.name}
                                        </option>`
                                    ).join('') : '';
                                })()}
                            </select>
                        ` : ''}
                    </div>
                </td>
            </tr>
        `;
    }).join('');
    
    formFieldsTable.innerHTML = tableRows;
    
    // Add change handler for field type to show/hide dropdown config
    formFieldsTable.querySelectorAll('select').forEach(select => {
        if (select.onchange && select.onchange.toString().includes('field_type')) {
            const originalHandler = select.onchange;
            select.onchange = function(e) {
                originalHandler.call(this, e);
                const row = this.closest('tr');
                const dropdownConfig = row.querySelector('.dropdown-config');
                if (this.value === 'SELECT' || this.value === 'MULTISELECT') {
                    dropdownConfig.style.display = 'block';
                } else {
                    dropdownConfig.style.display = 'none';
                }
            };
        }
    });
}

// Update form field configuration  
async function updateFormField(attrId, field, value) {
    const formType = document.getElementById('formTypeSelector').value;
    if (!formType || !currentEntityId) return;
    
    // Update the current entity data in memory
    const attribute = currentEntityData.attributes.find(a => a.id === attrId);
    if (!attribute) return;
    
    let formConfig = attribute.form_configs.find(config => config.form_type === formType);
    if (!formConfig) {
        // Create new form config in memory
        formConfig = {
            id: null,
            form_type: formType,
            field_type: getDefaultFieldType(attribute.data_type),
            is_visible: true,
            is_editable: formType === 'CREATE' || formType === 'EDIT',
            is_required: false,
            dropdown_source_entity_id: null,
            dropdown_source_attribute_id: null
        };
        attribute.form_configs.push(formConfig);
    }
    
    // Update field
    formConfig[field] = value;
    
    // If changing entity source, reload attributes dropdown
    if (field === 'dropdown_source_entity_id') {
        const row = document.querySelector(`tr[data-attr-id="${attrId}"]`);
        if (row && value) {
            loadAttributesForEntity(value, attrId);
        }
    }
    
    // Save to server (debounced)
    clearTimeout(window.formConfigTimer);
    window.formConfigTimer = setTimeout(async () => {
        try {
            await apiCall(`/entity-designer/entity/${currentEntityId}/form-config`, 'POST', {
                form_type: formType,
                attribute_id: attrId,
                field_type: formConfig.field_type,
                is_visible: formConfig.is_visible,
                is_editable: formConfig.is_editable,
                is_required: formConfig.is_required,
                dropdown_source_entity_id: formConfig.dropdown_source_entity_id,
                dropdown_source_attribute_id: formConfig.dropdown_source_attribute_id
            });
            
            // Show subtle success indicator
            const row = document.querySelector(`tr[data-attr-id="${attrId}"]`);
            if (row) {
                row.style.backgroundColor = '#d4edda';
                setTimeout(() => {
                    row.style.backgroundColor = '';
                }, 1000);
            }
            
        } catch (error) {
            console.error('Failed to update form config:', error);
            showToast('Failed to save changes', 'danger');
        }
    }, 800);
}

// Load attributes dropdown for entity
async function loadAttributesForEntity(entityId, targetAttrId) {
    try {
        const dropdownSources = await apiCall('/entity-designer/dropdown-sources');
        const sourceEntity = dropdownSources.find(e => e.id == entityId);
        
        if (sourceEntity) {
            const row = document.querySelector(`tr[data-attr-id="${targetAttrId}"]`);
            const attrSelect = row.querySelector('select:last-child');
            
            attrSelect.innerHTML = '<option value="">Select Attribute</option>';
            sourceEntity.attributes.forEach(attr => {
                const option = document.createElement('option');
                option.value = attr.id;
                option.textContent = `${attr.name} (${attr.code})`;
                attrSelect.appendChild(option);
            });
        }
    } catch (error) {
        console.error('Failed to load attributes:', error);
    }
}

// Save entire form configuration
async function saveFormConfig() {
    const formType = document.getElementById('formTypeSelector').value;
    if (!formType || !currentEntityData) return;
    
    const form = currentEntityData.forms.find(f => f.form_type === formType);
    if (!form) {
        showToast('Form not found', 'warning');
        return;
    }
    
    try {
        const formConfigs = [];
        
        // Collect all form field configurations
        currentEntityData.attributes.forEach(attr => {
            const formConfig = attr.form_configs.find(config => config.form_type === formType);
            if (formConfig) {
                formConfigs.push({
                    id: formConfig.id,
                    form_definition_id: form.id,
                    attribute_definition_id: attr.id,
                    field_type: formConfig.field_type,
                    is_visible: formConfig.is_visible,
                    is_editable: formConfig.is_editable,
                    is_required: formConfig.is_required,
                    dropdown_source_entity_id: formConfig.dropdown_source_entity_id,
                    dropdown_source_attribute_id: formConfig.dropdown_source_attribute_id
                });
            }
        });
        
        await apiCall(`/entity-designer/entity/${currentEntityId}/save`, 'POST', {
            form_configs: formConfigs
        });
        
        showToast(`${formType} form configuration saved successfully`, 'success');
        
    } catch (error) {
        console.error('Failed to save form config:', error);
    }
}

// Get default field type for data type
function getDefaultFieldType(dataType) {
    const mapping = {
        'VARCHAR': 'TEXT',
        'TEXT': 'TEXTAREA', 
        'INT': 'NUMBER',
        'BIGINT': 'NUMBER',
        'DECIMAL': 'DECIMAL',
        'BOOLEAN': 'CHECKBOX',
        'DATE': 'DATE',
        'DATETIME': 'DATETIME'
    };
    return mapping[dataType] || 'TEXT';
}

// Save basic info
async function saveBasicInfo() {
    if (!currentEntityId) return;
    
    const data = {
        entity: {
            name: document.getElementById('entityName').value,
            description: document.getElementById('entityDescription').value,
            icon: document.getElementById('entityIcon').value,
            is_master: document.getElementById('isMaster').checked,
            is_transactional: document.getElementById('isTransactional').checked
        }
    };
    
    try {
        await apiCall(`/entity-designer/entity/${currentEntityId}/save`, 'POST', data);
        showToast('Basic info saved successfully', 'success');
        
        // Refresh entity list
        location.reload();
        
    } catch (error) {
        console.error('Failed to save basic info:', error);
    }
}

// Add new attribute
function addAttribute() {
    const modal = new bootstrap.Modal(document.getElementById('addAttributeModal'));
    modal.show();
}

// Save new attribute
async function saveNewAttribute() {
    if (!currentEntityId) return;
    
    const data = {
        code: document.getElementById('newAttrCode').value,
        name: document.getElementById('newAttrName').value,
        data_type: document.getElementById('newAttrDataType').value,
        max_length: document.getElementById('newAttrMaxLength').value || null,
        is_required: document.getElementById('newAttrRequired').checked,
        is_unique: document.getElementById('newAttrUnique').checked
    };
    
    if (!data.code || !data.name) {
        showToast('Code and Name are required', 'warning');
        return;
    }
    
    try {
        await apiCall(`/entity-designer/entity/${currentEntityId}/attribute`, 'POST', data);
        showToast('Attribute added successfully', 'success');
        
        // Hide modal and reload entity
        bootstrap.Modal.getInstance(document.getElementById('addAttributeModal')).hide();
        loadEntity(currentEntityId);
        
        // Clear form
        document.getElementById('newAttrCode').value = '';
        document.getElementById('newAttrName').value = '';
        document.getElementById('newAttrMaxLength').value = '';
        document.getElementById('newAttrRequired').checked = false;
        document.getElementById('newAttrUnique').checked = false;
        
    } catch (error) {
        console.error('Failed to add attribute:', error);
    }
}

// Delete attribute
async function deleteAttribute(attrId) {
    if (!confirm('Are you sure you want to delete this attribute?')) return;
    
    try {
        await apiCall(`/entity-designer/entity/${currentEntityId}/attribute/${attrId}`, 'DELETE');
        showToast('Attribute deleted successfully', 'success');
        loadEntity(currentEntityId);
        
    } catch (error) {
        console.error('Failed to delete attribute:', error);
    }
}

// Update attribute field
async function updateAttribute(attrId, field, value) {
    // Debounce updates
    clearTimeout(window.updateTimer);
    window.updateTimer = setTimeout(async () => {
        try {
            const data = { [field]: value };
            await apiCall(`/entity-designer/entity/${currentEntityId}/save`, 'POST', {
                attributes: [{ id: attrId, ...data }]
            });
        } catch (error) {
            console.error('Failed to update attribute:', error);
        }
    }, 500);
}

// Update form configuration
async function updateFormConfig(configId, field, value) {
    clearTimeout(window.formConfigTimer);
    window.formConfigTimer = setTimeout(async () => {
        try {
            const data = { [field]: value };
            await apiCall(`/entity-designer/entity/${currentEntityId}/save`, 'POST', {
                form_configs: [{ id: configId, ...data }]
            });
        } catch (error) {
            console.error('Failed to update form config:', error);
        }
    }, 500);
}

// Create new entity
async function createEntity() {
    const data = {
        module_id: document.getElementById('newEntityModule').value,
        code: document.getElementById('newEntityCode').value,
        name: document.getElementById('newEntityName').value,
        description: document.getElementById('newEntityDescription').value,
        is_master: document.getElementById('newIsMaster').checked,
        is_transactional: document.getElementById('newIsTransactional').checked
    };
    
    if (!data.module_id || !data.code || !data.name) {
        showToast('Module, Code and Name are required', 'warning');
        return;
    }
    
    try {
        const result = await apiCall('/entity-designer/create-entity', 'POST', data);
        showToast('Entity created successfully', 'success');
        
        // Hide modal and reload page
        bootstrap.Modal.getInstance(document.getElementById('createEntityModal')).hide();
        location.reload();
        
    } catch (error) {
        console.error('Failed to create entity:', error);
    }
}

// Generate default forms
async function generateForms() {
    if (!currentEntityId) return;
    
    if (!confirm('This will generate default forms for all form types. Continue?')) return;
    
    try {
        await apiCall(`/entity-designer/entity/${currentEntityId}/generate-forms`, 'POST');
        showToast('Default forms generated successfully', 'success');
        loadEntity(currentEntityId);
        
    } catch (error) {
        console.error('Failed to generate forms:', error);
    }
}

// Configure form (placeholder)
function configureForm(formId) {
    showToast('Form configuration coming soon', 'info');
}

// Load forms tab - updated to show summary table
function loadForms(forms) {
    const container = document.getElementById('formsList');
    
    const formsHtml = `
        <div class="table-responsive mt-3">
            <table class="table table-sm">
                <thead>
                    <tr>
                        <th>Form Type</th>
                        <th>Name</th>
                        <th>Layout</th>
                        <th>Fields</th>
                        <th>Default</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    ${forms.map(form => `
                        <tr>
                            <td><span class="badge bg-secondary">${form.form_type}</span></td>
                            <td>${form.name}</td>
                            <td>${form.layout_type}</td>
                            <td>${form.field_count}</td>
                            <td>${form.is_default ? '<i class="bi bi-check text-success"></i>' : ''}</td>
                            <td>
                                <button class="btn btn-outline-primary btn-sm" onclick="selectFormType('${form.form_type}')">
                                    <i class="bi bi-gear"></i> Configure
                                </button>
                            </td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        </div>
    `;
    container.innerHTML = formsHtml;
}

// Initialize page
document.addEventListener('DOMContentLoaded', function() {
    // Auto-select first entity if available
    const firstEntity = document.querySelector('[id^="entity-"]');
    if (firstEntity) {
        const entityId = firstEntity.id.split('-')[1];
        loadEntity(parseInt(entityId));
    }
});
</script>
{% endblock %}

================
File: models.py
================
from flask_sqlalchemy import SQLAlchemy
from flask_login import UserMixin
from datetime import datetime
import enum
from sqlalchemy import JSON, Index
from sqlalchemy.ext.hybrid import hybrid_property

db = SQLAlchemy()

# ===========================================
# 1. CORE SYSTEM TABLES
# ===========================================

class Application(db.Model):
    __tablename__ = 'applications'
    
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    code = db.Column(db.String(50), unique=True, nullable=False)
    name = db.Column(db.String(255), nullable=False)
    description = db.Column(db.Text)
    icon = db.Column(db.String(100))
    order_index = db.Column(db.Integer, default=0)
    is_active = db.Column(db.Boolean, default=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    created_by = db.Column(db.String(100))
    updated_by = db.Column(db.String(100))
    
    # Relationships
    modules = db.relationship('Module', backref='application', lazy='dynamic')
    
    def __repr__(self):
        return f'<Application {self.code}>'

class Module(db.Model):
    __tablename__ = 'modules'
    
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    application_id = db.Column(db.Integer, db.ForeignKey('applications.id'), nullable=False)
    code = db.Column(db.String(50), nullable=False)
    name = db.Column(db.String(255), nullable=False)
    description = db.Column(db.Text)
    icon = db.Column(db.String(100))
    order_index = db.Column(db.Integer, default=0)
    is_system = db.Column(db.Boolean, default=False)
    is_active = db.Column(db.Boolean, default=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    created_by = db.Column(db.String(100))
    updated_by = db.Column(db.String(100))
    
    # Relationships
    entity_types = db.relationship('EntityType', backref='module', lazy='dynamic')
    
    __table_args__ = (
        db.UniqueConstraint('application_id', 'code', name='unique_module_per_app'),
    )
    
    def __repr__(self):
        return f'<Module {self.code}>'

# ===========================================
# 2. ENTITY DEFINITION TABLES
# ===========================================

class DataTypeEnum(enum.Enum):
    VARCHAR = 'VARCHAR'
    TEXT = 'TEXT'
    INT = 'INT'
    BIGINT = 'BIGINT'
    DECIMAL = 'DECIMAL'
    BOOLEAN = 'BOOLEAN'
    DATE = 'DATE'
    DATETIME = 'DATETIME'
    TIMESTAMP = 'TIMESTAMP'
    JSON = 'JSON'

class EntityType(db.Model):
    __tablename__ = 'entity_types'
    
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    module_id = db.Column(db.Integer, db.ForeignKey('modules.id'), nullable=False)
    code = db.Column(db.String(50), nullable=False)
    name = db.Column(db.String(255), nullable=False)
    description = db.Column(db.Text)
    table_name = db.Column(db.String(100))
    is_master = db.Column(db.Boolean, default=False)
    is_transactional = db.Column(db.Boolean, default=True)
    icon = db.Column(db.String(100))
    order_index = db.Column(db.Integer, default=0)
    is_active = db.Column(db.Boolean, default=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    created_by = db.Column(db.String(100))
    updated_by = db.Column(db.String(100))
    
    # Relationships
    attribute_definitions = db.relationship('AttributeDefinition', backref='entity_type', lazy='dynamic')
    form_definitions = db.relationship('FormDefinition', backref='entity_type', lazy='dynamic')
    entity_instances = db.relationship('EntityInstance', backref='entity_type', lazy='dynamic')
    workflow_states = db.relationship('WorkflowState', backref='entity_type', lazy='dynamic')
    
    __table_args__ = (
        db.UniqueConstraint('module_id', 'code', name='unique_entity_per_module'),
    )
    
    def __repr__(self):
        return f'<EntityType {self.code}>'

class AttributeDefinition(db.Model):
    __tablename__ = 'attribute_definitions'
    
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    entity_type_id = db.Column(db.Integer, db.ForeignKey('entity_types.id'), nullable=False)
    code = db.Column(db.String(100), nullable=False)
    name = db.Column(db.String(255), nullable=False)
    description = db.Column(db.Text)
    data_type = db.Column(db.Enum(DataTypeEnum), nullable=False)
    max_length = db.Column(db.Integer)
    decimal_precision = db.Column(db.Integer)
    decimal_scale = db.Column(db.Integer)
    default_value = db.Column(db.Text)
    is_required = db.Column(db.Boolean, default=False)
    is_unique = db.Column(db.Boolean, default=False)
    is_indexed = db.Column(db.Boolean, default=False)
    validation_rules = db.Column(JSON)
    order_index = db.Column(db.Integer, default=0)
    is_active = db.Column(db.Boolean, default=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    created_by = db.Column(db.String(100))
    updated_by = db.Column(db.String(100))
    
    # REMOVED the problematic backref relationship that was causing conflicts
    # The relationship is now defined only in FormFieldConfiguration class
    
    __table_args__ = (
        db.UniqueConstraint('entity_type_id', 'code', name='unique_attribute_per_entity'),
    )
    
    def __repr__(self):
        return f'<AttributeDefinition {self.code}>'
# ===========================================
# 3. FORM CONFIGURATION TABLES
# ===========================================

class FormTypeEnum(enum.Enum):
    LIST = 'LIST'
    DETAIL = 'DETAIL'
    CREATE = 'CREATE'
    EDIT = 'EDIT'
    SEARCH = 'SEARCH'

class LayoutTypeEnum(enum.Enum):
    SINGLE_COLUMN = 'SINGLE_COLUMN'
    TWO_COLUMN = 'TWO_COLUMN'
    THREE_COLUMN = 'THREE_COLUMN'
    TABS = 'TABS'
    ACCORDION = 'ACCORDION'
    WIZARD = 'WIZARD'

class FieldTypeEnum(enum.Enum):
    TEXT = 'TEXT'
    TEXTAREA = 'TEXTAREA'
    NUMBER = 'NUMBER'
    DECIMAL = 'DECIMAL'
    EMAIL = 'EMAIL'
    URL = 'URL'
    PASSWORD = 'PASSWORD'
    CHECKBOX = 'CHECKBOX'
    RADIO = 'RADIO'
    SELECT = 'SELECT'
    MULTISELECT = 'MULTISELECT'
    DATE = 'DATE'
    DATETIME = 'DATETIME'
    TIME = 'TIME'
    FILE = 'FILE'
    IMAGE = 'IMAGE'
    CALCULATED = 'CALCULATED'

class FormDefinition(db.Model):
    __tablename__ = 'form_definitions'
    
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    entity_type_id = db.Column(db.Integer, db.ForeignKey('entity_types.id'), nullable=False)
    code = db.Column(db.String(100), nullable=False)
    name = db.Column(db.String(255), nullable=False)
    description = db.Column(db.Text)
    form_type = db.Column(db.Enum(FormTypeEnum), nullable=False)
    layout_type = db.Column(db.Enum(LayoutTypeEnum), default=LayoutTypeEnum.SINGLE_COLUMN)
    records_per_page = db.Column(db.Integer, default=10)
    pages_per_load = db.Column(db.Integer, default=1)
    allow_inline_edit = db.Column(db.Boolean, default=False)
    show_attachment_count = db.Column(db.Boolean, default=False)
    mandatory_confirmation = db.Column(db.Boolean, default=False)
    is_default = db.Column(db.Boolean, default=False)
    is_active = db.Column(db.Boolean, default=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    created_by = db.Column(db.String(100))
    updated_by = db.Column(db.String(100))
    
    # Relationships
    form_field_configurations = db.relationship('FormFieldConfiguration', backref='form_definition', lazy='dynamic')
    
    __table_args__ = (
        db.UniqueConstraint('entity_type_id', 'code', 'form_type', name='unique_form_per_entity_type'),
    )
    
    def __repr__(self):
        return f'<FormDefinition {self.code}>'

class FormFieldConfiguration(db.Model):
    __tablename__ = 'form_field_configurations'
    
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    form_definition_id = db.Column(db.Integer, db.ForeignKey('form_definitions.id'), nullable=False)
    attribute_definition_id = db.Column(db.Integer, db.ForeignKey('attribute_definitions.id'), nullable=False)
    field_label = db.Column(db.String(255))
    field_type = db.Column(db.Enum(FieldTypeEnum), nullable=False)
    placeholder_text = db.Column(db.String(255))
    help_text = db.Column(db.Text)
    order_index = db.Column(db.Integer, default=0)
    grid_column_span = db.Column(db.Integer, default=1)
    grid_row_span = db.Column(db.Integer, default=1)
    is_visible = db.Column(db.Boolean, default=True)
    is_editable = db.Column(db.Boolean, default=True)
    is_required = db.Column(db.Boolean, default=False)
    is_searchable = db.Column(db.Boolean, default=False)
    is_sortable = db.Column(db.Boolean, default=False)
    # NEW: Simple dropdown configuration - connect directly to entity columns
    dropdown_source_entity_id = db.Column(db.Integer, db.ForeignKey('entity_types.id'))
    dropdown_source_attribute_id = db.Column(db.Integer, db.ForeignKey('attribute_definitions.id'))
    dropdown_display_attribute_id = db.Column(db.Integer, db.ForeignKey('attribute_definitions.id'))
    show_unique_values_only = db.Column(db.Boolean, default=False)
    conditional_visibility_rules = db.Column(JSON)
    conditional_requirement_rules = db.Column(JSON)
    conditional_editability_rules = db.Column(JSON)
    validation_rules = db.Column(JSON)
    css_classes = db.Column(db.String(500))
    custom_attributes = db.Column(JSON)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    created_by = db.Column(db.String(100))
    updated_by = db.Column(db.String(100))
    
    # FIXED Relationships - Explicitly specify foreign keys to avoid ambiguity
    attribute_definition = db.relationship('AttributeDefinition', 
                                         foreign_keys=[attribute_definition_id],
                                         backref='form_field_configurations')
    dropdown_source_entity = db.relationship('EntityType', 
                                            foreign_keys=[dropdown_source_entity_id])
    dropdown_source_attribute = db.relationship('AttributeDefinition', 
                                               foreign_keys=[dropdown_source_attribute_id])
    dropdown_display_attribute = db.relationship('AttributeDefinition', 
                                                foreign_keys=[dropdown_display_attribute_id])
    
    __table_args__ = (
        db.UniqueConstraint('form_definition_id', 'attribute_definition_id', name='unique_field_per_form'),
    )
    
    def __repr__(self):
        return f'<FormFieldConfiguration {self.field_label}>'
# ===========================================
# 4. DYNAMIC DATA STORAGE (EAV)
# ===========================================

class EntityInstance(db.Model):
    __tablename__ = 'entity_instances'
    
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    entity_type_id = db.Column(db.Integer, db.ForeignKey('entity_types.id'), nullable=False)
    instance_code = db.Column(db.String(255))
    workflow_status = db.Column(db.String(100))
    is_active = db.Column(db.Boolean, default=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    created_by = db.Column(db.String(100))
    updated_by = db.Column(db.String(100))
    
    # Relationships - SIMPLIFIED (removed parent/child relationships)
    text_values = db.relationship('AttributeValueText', backref='entity_instance', lazy='dynamic', cascade='all, delete-orphan')
    numeric_values = db.relationship('AttributeValueNumeric', backref='entity_instance', lazy='dynamic', cascade='all, delete-orphan')
    datetime_values = db.relationship('AttributeValueDatetime', backref='entity_instance', lazy='dynamic', cascade='all, delete-orphan')
    boolean_values = db.relationship('AttributeValueBoolean', backref='entity_instance', lazy='dynamic', cascade='all, delete-orphan')
    
    def __repr__(self):
        return f'<EntityInstance {self.id}>'
    
    def get_attribute_value(self, attribute_code):
        """Get value for a specific attribute"""
        attr_def = AttributeDefinition.query.filter_by(
            entity_type_id=self.entity_type_id,
            code=attribute_code
        ).first()
        
        if not attr_def:
            return None
            
        if attr_def.data_type in [DataTypeEnum.VARCHAR, DataTypeEnum.TEXT]:
            value_obj = self.text_values.filter_by(attribute_definition_id=attr_def.id).first()
        elif attr_def.data_type in [DataTypeEnum.INT, DataTypeEnum.BIGINT, DataTypeEnum.DECIMAL]:
            value_obj = self.numeric_values.filter_by(attribute_definition_id=attr_def.id).first()
        elif attr_def.data_type in [DataTypeEnum.DATE, DataTypeEnum.DATETIME, DataTypeEnum.TIMESTAMP]:
            value_obj = self.datetime_values.filter_by(attribute_definition_id=attr_def.id).first()
        elif attr_def.data_type == DataTypeEnum.BOOLEAN:
            value_obj = self.boolean_values.filter_by(attribute_definition_id=attr_def.id).first()
        else:
            return None
            
        return value_obj.value if value_obj else None
    
    def set_attribute_value(self, attribute_code, value):
        """Set value for a specific attribute"""
        attr_def = AttributeDefinition.query.filter_by(
            entity_type_id=self.entity_type_id,
            code=attribute_code
        ).first()
        
        if not attr_def:
            return False
        
        # Handle different data types
        if attr_def.data_type in [DataTypeEnum.VARCHAR, DataTypeEnum.TEXT]:
            existing = self.text_values.filter_by(attribute_definition_id=attr_def.id).first()
            if existing:
                if value is not None:
                    existing.value = str(value)
                    existing.updated_at = datetime.utcnow()
                else:
                    db.session.delete(existing)
            elif value is not None:
                new_value = AttributeValueText(
                    entity_instance_id=self.id,
                    attribute_definition_id=attr_def.id,
                    value=str(value)
                )
                db.session.add(new_value)
                
        elif attr_def.data_type in [DataTypeEnum.INT, DataTypeEnum.BIGINT, DataTypeEnum.DECIMAL]:
            existing = self.numeric_values.filter_by(attribute_definition_id=attr_def.id).first()
            if existing:
                if value is not None:
                    existing.value = float(value)
                    existing.updated_at = datetime.utcnow()
                else:
                    db.session.delete(existing)
            elif value is not None:
                new_value = AttributeValueNumeric(
                    entity_instance_id=self.id,
                    attribute_definition_id=attr_def.id,
                    value=float(value)
                )
                db.session.add(new_value)
                
        elif attr_def.data_type in [DataTypeEnum.DATE, DataTypeEnum.DATETIME, DataTypeEnum.TIMESTAMP]:
            existing = self.datetime_values.filter_by(attribute_definition_id=attr_def.id).first()
            if existing:
                if value is not None:
                    existing.value = value
                    existing.updated_at = datetime.utcnow()
                else:
                    db.session.delete(existing)
            elif value is not None:
                new_value = AttributeValueDatetime(
                    entity_instance_id=self.id,
                    attribute_definition_id=attr_def.id,
                    value=value
                )
                db.session.add(new_value)
                
        elif attr_def.data_type == DataTypeEnum.BOOLEAN:
            existing = self.boolean_values.filter_by(attribute_definition_id=attr_def.id).first()
            if existing:
                if value is not None:
                    existing.value = bool(value)
                    existing.updated_at = datetime.utcnow()
                else:
                    db.session.delete(existing)
            elif value is not None:
                new_value = AttributeValueBoolean(
                    entity_instance_id=self.id,
                    attribute_definition_id=attr_def.id,
                    value=bool(value)
                )
                db.session.add(new_value)
        
        return True

class AttributeValueText(db.Model):
    __tablename__ = 'attribute_values_text'
    
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    entity_instance_id = db.Column(db.Integer, db.ForeignKey('entity_instances.id'), nullable=False)
    attribute_definition_id = db.Column(db.Integer, db.ForeignKey('attribute_definitions.id'), nullable=False)
    value = db.Column(db.Text)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relationships
    attribute_definition = db.relationship('AttributeDefinition')
    
    __table_args__ = (
        db.UniqueConstraint('entity_instance_id', 'attribute_definition_id', name='unique_instance_attribute'),
    )
    
    def __repr__(self):
        return f'<AttributeValueText {self.attribute_definition.code}={self.value}>'

class AttributeValueNumeric(db.Model):
    __tablename__ = 'attribute_values_numeric'
    
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    entity_instance_id = db.Column(db.Integer, db.ForeignKey('entity_instances.id'), nullable=False)
    attribute_definition_id = db.Column(db.Integer, db.ForeignKey('attribute_definitions.id'), nullable=False)
    value = db.Column(db.Numeric(20, 6))
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relationships
    attribute_definition = db.relationship('AttributeDefinition')
    
    __table_args__ = (
        db.UniqueConstraint('entity_instance_id', 'attribute_definition_id', name='unique_instance_attribute'),
    )
    
    def __repr__(self):
        return f'<AttributeValueNumeric {self.attribute_definition.code}={self.value}>'

class AttributeValueDatetime(db.Model):
    __tablename__ = 'attribute_values_datetime'
    
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    entity_instance_id = db.Column(db.Integer, db.ForeignKey('entity_instances.id'), nullable=False)
    attribute_definition_id = db.Column(db.Integer, db.ForeignKey('attribute_definitions.id'), nullable=False)
    value = db.Column(db.DateTime)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relationships
    attribute_definition = db.relationship('AttributeDefinition')
    
    __table_args__ = (
        db.UniqueConstraint('entity_instance_id', 'attribute_definition_id', name='unique_instance_attribute'),
    )
    
    def __repr__(self):
        return f'<AttributeValueDatetime {self.attribute_definition.code}={self.value}>'

class AttributeValueBoolean(db.Model):
    __tablename__ = 'attribute_values_boolean'
    
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    entity_instance_id = db.Column(db.Integer, db.ForeignKey('entity_instances.id'), nullable=False)
    attribute_definition_id = db.Column(db.Integer, db.ForeignKey('attribute_definitions.id'), nullable=False)
    value = db.Column(db.Boolean)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relationships
    attribute_definition = db.relationship('AttributeDefinition')
    
    __table_args__ = (
        db.UniqueConstraint('entity_instance_id', 'attribute_definition_id', name='unique_instance_attribute'),
    )
    
    def __repr__(self):
        return f'<AttributeValueBoolean {self.attribute_definition.code}={self.value}>'

# ===========================================
# 5. WORKFLOW & EVENTS
# ===========================================

class WorkflowState(db.Model):
    __tablename__ = 'workflow_states'
    
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    entity_type_id = db.Column(db.Integer, db.ForeignKey('entity_types.id'), nullable=False)
    code = db.Column(db.String(100), nullable=False)
    name = db.Column(db.String(255), nullable=False)
    description = db.Column(db.Text)
    is_initial = db.Column(db.Boolean, default=False)
    is_final = db.Column(db.Boolean, default=False)
    color = db.Column(db.String(7))  # Hex color code
    order_index = db.Column(db.Integer, default=0)
    is_active = db.Column(db.Boolean, default=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relationships
    from_transitions = db.relationship('WorkflowTransition', foreign_keys='WorkflowTransition.from_state_id', backref='from_state', lazy='dynamic')
    to_transitions = db.relationship('WorkflowTransition', foreign_keys='WorkflowTransition.to_state_id', backref='to_state', lazy='dynamic')
    
    __table_args__ = (
        db.UniqueConstraint('entity_type_id', 'code', name='unique_state_per_entity'),
    )
    
    def __repr__(self):
        return f'<WorkflowState {self.code}>'

class WorkflowTransition(db.Model):
    __tablename__ = 'workflow_transitions'
    
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    from_state_id = db.Column(db.Integer, db.ForeignKey('workflow_states.id'), nullable=False)
    to_state_id = db.Column(db.Integer, db.ForeignKey('workflow_states.id'), nullable=False)
    action_name = db.Column(db.String(255), nullable=False)
    action_code = db.Column(db.String(100), nullable=False)
    conditions = db.Column(JSON)
    required_roles = db.Column(JSON)
    is_active = db.Column(db.Boolean, default=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    def __repr__(self):
        return f'<WorkflowTransition {self.action_name}>'

class EventTypeEnum(enum.Enum):
    BEFORE_CREATE = 'BEFORE_CREATE'
    AFTER_CREATE = 'AFTER_CREATE'
    BEFORE_UPDATE = 'BEFORE_UPDATE'
    AFTER_UPDATE = 'AFTER_UPDATE'
    BEFORE_DELETE = 'BEFORE_DELETE'
    AFTER_DELETE = 'AFTER_DELETE'
    ON_WORKFLOW_CHANGE = 'ON_WORKFLOW_CHANGE'

class EventConfiguration(db.Model):
    __tablename__ = 'event_configurations'
    
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    entity_type_id = db.Column(db.Integer, db.ForeignKey('entity_types.id'), nullable=False)
    event_type = db.Column(db.Enum(EventTypeEnum), nullable=False)
    event_name = db.Column(db.String(255), nullable=False)
    event_code = db.Column(db.String(100), nullable=False)
    conditions = db.Column(JSON)
    actions = db.Column(JSON)
    is_active = db.Column(db.Boolean, default=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relationships
    entity_type = db.relationship('EntityType')
    
    def __repr__(self):
        return f'<EventConfiguration {self.event_name}>'

# ===========================================
# 6. SECURITY & USER MANAGEMENT  
# ===========================================

class Role(db.Model):
    __tablename__ = 'roles'
    
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    code = db.Column(db.String(100), unique=True, nullable=False)
    name = db.Column(db.String(255), nullable=False)
    description = db.Column(db.Text)
    is_system = db.Column(db.Boolean, default=False)
    is_active = db.Column(db.Boolean, default=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relationships
    user_roles = db.relationship('UserRole', backref='role', lazy='dynamic')
    entity_permissions = db.relationship('EntityPermission', backref='role', lazy='dynamic')
    
    def __repr__(self):
        return f'<Role {self.code}>'

class User(db.Model, UserMixin):
    __tablename__ = 'users'
    
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    username = db.Column(db.String(100), unique=True, nullable=False)
    email = db.Column(db.String(255), unique=True, nullable=False)
    first_name = db.Column(db.String(100))
    last_name = db.Column(db.String(100))
    password = db.Column(db.String(255))
    is_active = db.Column(db.Boolean, default=True)
    last_login = db.Column(db.DateTime)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relationships
    user_roles = db.relationship('UserRole', backref='user', lazy='dynamic')
    favorite_modules = db.relationship('UserFavoriteModule', backref='user', lazy='dynamic')
    
    @hybrid_property
    def full_name(self):
        return f"{self.first_name or ''} {self.last_name or ''}".strip()
    
    def __repr__(self):
        return f'<User {self.username}>'

class UserRole(db.Model):
    __tablename__ = 'user_roles'
    
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    role_id = db.Column(db.Integer, db.ForeignKey('roles.id'), nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    __table_args__ = (
        db.UniqueConstraint('user_id', 'role_id', name='unique_user_role'),
    )
    
    def __repr__(self):
        return f'<UserRole {self.user_id}-{self.role_id}>'

class EntityPermission(db.Model):
    __tablename__ = 'entity_permissions'
    
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    role_id = db.Column(db.Integer, db.ForeignKey('roles.id'), nullable=False)
    entity_type_id = db.Column(db.Integer, db.ForeignKey('entity_types.id'), nullable=False)
    can_read = db.Column(db.Boolean, default=False)
    can_create = db.Column(db.Boolean, default=False)
    can_update = db.Column(db.Boolean, default=False)
    can_delete = db.Column(db.Boolean, default=False)
    field_level_permissions = db.Column(JSON)
    row_level_conditions = db.Column(JSON)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relationships
    entity_type = db.relationship('EntityType')
    
    __table_args__ = (
        db.UniqueConstraint('role_id', 'entity_type_id', name='unique_role_entity_permission'),
    )
    
    def __repr__(self):
        return f'<EntityPermission {self.role_id}-{self.entity_type_id}>'

class UserFavoriteModule(db.Model):
    __tablename__ = 'user_favorite_modules'
    
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    module_id = db.Column(db.Integer, db.ForeignKey('modules.id'), nullable=False)
    order_index = db.Column(db.Integer, default=0)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    # Relationships
    module = db.relationship('Module')
    
    __table_args__ = (
        db.UniqueConstraint('user_id', 'module_id', name='unique_user_favorite_module'),
    )
    
    def __repr__(self):
        return f'<UserFavoriteModule {self.user_id}-{self.module_id}>'

# ===========================================
# 7. APPROVAL HIERARCHY SYSTEM (SIMPLIFIED)
# ===========================================

class ApprovalType(db.Model):
    __tablename__ = 'approval_types'
    
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    code = db.Column(db.String(100), unique=True, nullable=False)
    name = db.Column(db.String(255), nullable=False)
    description = db.Column(db.Text)
    is_active = db.Column(db.Boolean, default=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    created_by = db.Column(db.String(100))
    updated_by = db.Column(db.String(100))
    
    def __repr__(self):
        return f'<ApprovalType {self.code}>'

class UnitTypeEnum(enum.Enum):
    COMPANY = 'COMPANY'
    DIVISION = 'DIVISION'
    DEPARTMENT = 'DEPARTMENT'
    TEAM = 'TEAM'
    SECTION = 'SECTION'

class OrganizationalUnit(db.Model):
    __tablename__ = 'organizational_units'
    
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    parent_unit_id = db.Column(db.Integer, db.ForeignKey('organizational_units.id'))
    code = db.Column(db.String(100), unique=True, nullable=False)
    name = db.Column(db.String(255), nullable=False)
    unit_type = db.Column(db.Enum(UnitTypeEnum), nullable=False)
    manager_user_id = db.Column(db.Integer, db.ForeignKey('users.id'))
    description = db.Column(db.Text)
    level_order = db.Column(db.Integer, default=0)
    is_active = db.Column(db.Boolean, default=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    created_by = db.Column(db.String(100))
    updated_by = db.Column(db.String(100))
    
    # Relationships
    parent_unit = db.relationship('OrganizationalUnit', remote_side=[id], back_populates='children')
    children = db.relationship('OrganizationalUnit', back_populates='parent_unit', overlaps="parent_unit")
    manager = db.relationship('User', foreign_keys=[manager_user_id])
    user_assignments = db.relationship('UserOrganizationalAssignment', backref='organizational_unit', lazy='dynamic')
    
    def __repr__(self):
        return f'<OrganizationalUnit {self.code}>'

class UserOrganizationalAssignment(db.Model):
    __tablename__ = 'user_organizational_assignments'
    
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    organizational_unit_id = db.Column(db.Integer, db.ForeignKey('organizational_units.id'), nullable=False)
    position_title = db.Column(db.String(255))
    is_primary = db.Column(db.Boolean, default=True)
    is_manager = db.Column(db.Boolean, default=False)
    effective_from = db.Column(db.Date, nullable=False)
    effective_to = db.Column(db.Date)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relationships
    user = db.relationship('User', foreign_keys=[user_id])
    
    def __repr__(self):
        return f'<UserOrganizationalAssignment {self.user_id}-{self.organizational_unit_id}>'

# ===========================================
# 8. AUDIT & LOGGING
# ===========================================

class OperationEnum(enum.Enum):
    CREATE = 'CREATE'
    UPDATE = 'UPDATE'
    DELETE = 'DELETE'
    READ = 'READ'

class AuditLog(db.Model):
    __tablename__ = 'audit_log'
    
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    entity_type_id = db.Column(db.Integer, db.ForeignKey('entity_types.id'))
    entity_instance_id = db.Column(db.Integer, db.ForeignKey('entity_instances.id'))
    operation = db.Column(db.Enum(OperationEnum), nullable=False)
    old_values = db.Column(JSON)
    new_values = db.Column(JSON)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'))
    ip_address = db.Column(db.String(45))
    user_agent = db.Column(db.Text)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    # Relationships
    entity_type = db.relationship('EntityType')
    entity_instance = db.relationship('EntityInstance')
    user = db.relationship('User')
    
    def __repr__(self):
        return f'<AuditLog {self.operation.value}>'

class SystemParameterDataTypeEnum(enum.Enum):
    STRING = 'STRING'
    INTEGER = 'INTEGER'
    DECIMAL = 'DECIMAL'
    BOOLEAN = 'BOOLEAN'
    JSON = 'JSON'

class SystemParameter(db.Model):
    __tablename__ = 'system_parameters'
    
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    category = db.Column(db.String(100), nullable=False)
    param_key = db.Column(db.String(255), nullable=False)
    param_value = db.Column(db.Text)
    data_type = db.Column(db.Enum(SystemParameterDataTypeEnum), default=SystemParameterDataTypeEnum.STRING)
    description = db.Column(db.Text)
    is_encrypted = db.Column(db.Boolean, default=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    __table_args__ = (
        db.UniqueConstraint('category', 'param_key', name='unique_category_key'),
    )
    
    def __repr__(self):
        return f'<SystemParameter {self.category}.{self.param_key}>'

# ===========================================
# 9. INDEXES FOR PERFORMANCE
# ===========================================

# Entity Instances indexes
Index('idx_entity_instances_type_status', EntityInstance.entity_type_id, EntityInstance.workflow_status)
Index('idx_entity_instances_created', EntityInstance.created_at)
Index('idx_entity_type_active', EntityInstance.entity_type_id, EntityInstance.is_active)

# Attribute Values indexes
Index('idx_attr_values_text_value', AttributeValueText.value)
Index('idx_attr_values_numeric_value', AttributeValueNumeric.value)
Index('idx_attr_values_datetime_value', AttributeValueDatetime.value)

# Form Configurations indexes
Index('idx_form_fields_form_order', FormFieldConfiguration.form_definition_id, FormFieldConfiguration.order_index)
Index('idx_form_definitions_entity', FormDefinition.entity_type_id, FormDefinition.form_type)

# Audit Log indexes
Index('idx_entity_instance_operation', AuditLog.entity_instance_id, AuditLog.operation)
Index('idx_audit_created_at', AuditLog.created_at)

# ===========================================
# 10. HELPER FUNCTIONS
# ===========================================

def get_user_permissions(user_id, entity_type_id):
    """
    Get detailed permissions for a user on an entity type
    Returns dict with can_read, can_create, can_update, can_delete
    This is used by templates to show/hide UI elements
    """
    user = User.query.get(user_id)
    if not user:
        return {
            'can_read': False,
            'can_create': False,
            'can_update': False,
            'can_delete': False
        }
    
    # Get all role IDs for this user
    user_role_ids = [ur.role_id for ur in user.user_roles]
    
    # Get all permissions for these roles and this entity type
    permissions = EntityPermission.query.filter(
        EntityPermission.role_id.in_(user_role_ids),
        EntityPermission.entity_type_id == entity_type_id
    ).all()
    
    # Aggregate permissions (if user has multiple roles, grant if ANY role has permission)
    result = {
        'can_read': False,
        'can_create': False,
        'can_update': False,
        'can_delete': False
    }
    
    for perm in permissions:
        if perm.can_read:
            result['can_read'] = True
        if perm.can_create:
            result['can_create'] = True
        if perm.can_update:
            result['can_update'] = True
        if perm.can_delete:
            result['can_delete'] = True
    
    return result

def can_access_module(user_id, module_id):
    """
    Check if user can access any entity in a module
    Returns True if user has read permission for at least one entity in the module
    """
    user = User.query.get(user_id)
    if not user:
        return False
    
    user_role_ids = [ur.role_id for ur in user.user_roles]
    
    # Get all entity types in this module
    entity_types = EntityType.query.filter_by(module_id=module_id, is_active=True).all()
    entity_type_ids = [et.id for et in entity_types]
    
    if not entity_type_ids:
        return False
    
    # Check if user has read permission for any entity in the module
    permissions = EntityPermission.query.filter(
        EntityPermission.role_id.in_(user_role_ids),
        EntityPermission.entity_type_id.in_(entity_type_ids),
        EntityPermission.can_read == True
    ).first()
    
    return permissions is not None

def get_accessible_entity_types_for_module(user_id, module_id):
    """
    Get list of entity types in a module that the user can read
    Returns list of EntityType objects
    """
    user = User.query.get(user_id)
    if not user:
        return []
    
    user_role_ids = [ur.role_id for ur in user.user_roles]
    
    # Get all entity types in this module
    entity_types = EntityType.query.filter_by(
        module_id=module_id, 
        is_active=True
    ).order_by(EntityType.order_index).all()
    
    # Get permissions for these entity types
    entity_type_ids = [et.id for et in entity_types]
    permissions = EntityPermission.query.filter(
        EntityPermission.role_id.in_(user_role_ids),
        EntityPermission.entity_type_id.in_(entity_type_ids),
        EntityPermission.can_read == True
    ).all()
    
    # Create set of accessible entity type IDs
    accessible_ids = {perm.entity_type_id for perm in permissions}
    
    # Filter entity types to only those accessible
    return [et for et in entity_types if et.id in accessible_ids]

def get_dropdown_options(entity_type_id, source_attribute_code, display_attribute_code=None, unique_only=False):
    """Get dropdown options from entity instances"""
    try:
        entity_type = EntityType.query.get(entity_type_id)
        if not entity_type:
            return []
        
        # Get source attribute definition
        source_attr = AttributeDefinition.query.filter_by(
            entity_type_id=entity_type_id,
            code=source_attribute_code,
            is_active=True
        ).first()
        
        if not source_attr:
            return []
        
        # Get display attribute definition (use source if not specified)
        display_attr = source_attr
        if display_attribute_code and display_attribute_code != source_attribute_code:
            display_attr = AttributeDefinition.query.filter_by(
                entity_type_id=entity_type_id,
                code=display_attribute_code,
                is_active=True
            ).first()
            if not display_attr:
                display_attr = source_attr
        
        # Get all active instances
        instances = EntityInstance.query.filter_by(
            entity_type_id=entity_type_id,
            is_active=True
        ).all()
        
        options = []
        seen_values = set()
        
        for instance in instances:
            source_value = instance.get_attribute_value(source_attribute_code)
            display_value = instance.get_attribute_value(display_attr.code)
            
            if source_value is not None:
                # For unique_only, skip if we've seen this value before
                if unique_only and source_value in seen_values:
                    continue
                    
                seen_values.add(source_value)
                options.append({
                    'value': source_value,
                    'label': display_value or source_value,
                    'instance_id': instance.id
                })
        
        # Sort options by label
        options.sort(key=lambda x: str(x['label']))
        return options
        
    except Exception as e:
        print(f"Error getting dropdown options: {e}")
        return []



def get_entity_instances_with_attributes(entity_type_id, page=1, per_page=10):
    """Get entity instances with their attribute values"""
    entity_type = EntityType.query.get(entity_type_id)
    if not entity_type:
        return None, None
    
    attributes = AttributeDefinition.query.filter_by(
        entity_type_id=entity_type_id,
        is_active=True
    ).order_by(AttributeDefinition.order_index).all()
    
    instances = EntityInstance.query.filter_by(
        entity_type_id=entity_type_id,
        is_active=True
    ).paginate(page=page, per_page=per_page, error_out=False)
    
    result = []
    for instance in instances.items:
        instance_data = {
            'id': instance.id,
            'instance_code': instance.instance_code,
            'workflow_status': instance.workflow_status,
            'created_at': instance.created_at,
            'updated_at': instance.updated_at,
            'attributes': {}
        }
        
        for attr in attributes:
            value = instance.get_attribute_value(attr.code)
            instance_data['attributes'][attr.code] = {
                'definition': attr,
                'value': value
            }
        
        result.append(instance_data)
    
    return result, instances

def create_entity_instance_with_attributes(entity_type_id, attribute_values, created_by=None):
    """Create a new entity instance with attribute values"""
    try:
        instance = EntityInstance(
            entity_type_id=entity_type_id,
            created_by=created_by or 'system'
        )
        db.session.add(instance)
        db.session.flush()
        
        for attr_code, value in attribute_values.items():
            if value is not None:
                instance.set_attribute_value(attr_code, value)
        
        db.session.commit()
        return instance
        
    except Exception as e:
        db.session.rollback()
        raise e

def update_entity_instance_attributes(instance_id, attribute_values, updated_by=None):
    """Update attribute values for an entity instance"""
    try:
        instance = EntityInstance.query.get(instance_id)
        if not instance:
            return None
        
        instance.updated_by = updated_by or 'system'
        instance.updated_at = datetime.utcnow()
        
        for attr_code, value in attribute_values.items():
            instance.set_attribute_value(attr_code, value)
        
        db.session.commit()
        return instance
        
    except Exception as e:
        db.session.rollback()
        raise e

def check_user_permissions(user_id, entity_type_id, operation):
    """Check if user has permission for operation on entity type"""
    user = User.query.get(user_id)
    if not user:
        return False
    
    user_roles = [ur.role_id for ur in user.user_roles]
    
    permissions = EntityPermission.query.filter(
        EntityPermission.role_id.in_(user_roles),
        EntityPermission.entity_type_id == entity_type_id
    ).all()
    
    for permission in permissions:
        if operation == 'READ' and permission.can_read:
            return True
        elif operation == 'CREATE' and permission.can_create:
            return True
        elif operation == 'UPDATE' and permission.can_update:
            return True
        elif operation == 'DELETE' and permission.can_delete:
            return True
    
    return False

def log_audit_entry(entity_type_id, entity_instance_id, operation, old_values=None, new_values=None, user_id=None, ip_address=None, user_agent=None):
    """Create an audit log entry"""
    try:
        audit_entry = AuditLog(
            entity_type_id=entity_type_id,
            entity_instance_id=entity_instance_id,
            operation=operation,
            old_values=old_values,
            new_values=new_values,
            user_id=user_id,
            ip_address=ip_address,
            user_agent=user_agent
        )
        db.session.add(audit_entry)
        db.session.commit()
        
    except Exception as e:
        db.session.rollback()
        print(f"Error creating audit log: {e}")

def get_workflow_next_states(current_state_id, user_roles=None):
    """Get possible next workflow states for current state"""
    transitions = WorkflowTransition.query.filter_by(
        from_state_id=current_state_id,
        is_active=True
    ).all()
    
    if user_roles:
        valid_transitions = []
        for transition in transitions:
            if not transition.required_roles:
                valid_transitions.append(transition)
            else:
                required_roles = transition.required_roles
                if any(role in user_roles for role in required_roles):
                    valid_transitions.append(transition)
        return valid_transitions
    
    return transitions

def initialize_database():
    """Initialize database with tables and sample data"""
    try:
        db.create_all()
        print("Database tables created successfully!")
        
    except Exception as e:
        print(f"Error initializing database: {e}")

# Export all models for easy importing
__all__ = [
    'db',
    # Core System
    'Application', 'Module',
    # Entity Definition
    'EntityType', 'AttributeDefinition', 'DataTypeEnum',
    # Form Configuration
    'FormDefinition', 'FormFieldConfiguration', 'FormTypeEnum', 'LayoutTypeEnum', 'FieldTypeEnum',
    # EAV Data Storage
    'EntityInstance', 'AttributeValueText', 'AttributeValueNumeric', 'AttributeValueDatetime', 'AttributeValueBoolean',
    # Workflow
    'WorkflowState', 'WorkflowTransition', 'EventConfiguration', 'EventTypeEnum',
    # Approval System (Simplified)
    'ApprovalType', 'OrganizationalUnit', 'UserOrganizationalAssignment', 'UnitTypeEnum',
    # Security
    'User', 'Role', 'UserRole', 'EntityPermission', 'UserFavoriteModule',
    # Audit & System
    'AuditLog', 'SystemParameter', 'OperationEnum', 'SystemParameterDataTypeEnum',
    # Helper Functions
    'get_entity_instances_with_attributes',
    'create_entity_instance_with_attributes', 'update_entity_instance_attributes',
    'check_user_permissions', 'log_audit_entry', 'get_workflow_next_states', 
    'initialize_database', 'get_dropdown_options','get_user_permissions',
    'can_access_module', 
    'get_accessible_entity_types_for_module'
]

================
File: setup.py
================
#!/usr/bin/env python3
"""
Database Configuration Exporter for Port Management System
Extracts and displays the current configuration of all models in the system
"""

import os
import sys
from datetime import datetime
import json
from collections import defaultdict

# Add project directory to Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app import app, db
from models import *

def get_system_overview():
    """Get high-level system statistics"""
    with app.app_context():
        overview = {
            'applications': Application.query.filter_by(is_active=True).count(),
            'modules': Module.query.filter_by(is_active=True).count(),
            'entity_types': EntityType.query.filter_by(is_active=True).count(),
            'total_attributes': AttributeDefinition.query.filter_by(is_active=True).count(),
            'total_forms': FormDefinition.query.filter_by(is_active=True).count(),
            'total_instances': EntityInstance.query.filter_by(is_active=True).count(),
            'users': User.query.filter_by(is_active=True).count(),
            'roles': Role.query.filter_by(is_active=True).count()
        }
        return overview

def get_applications_config():
    """Get all applications and their modules"""
    with app.app_context():
        apps_config = []
        applications = Application.query.filter_by(is_active=True).order_by(Application.order_index, Application.name).all()
        
        for application in applications:
            modules_list = []
            modules = application.modules.filter_by(is_active=True).order_by(Module.order_index, Module.name).all()
            
            for module in modules:
                entity_types_count = module.entity_types.filter_by(is_active=True).count()
                modules_list.append({
                    'id': module.id,
                    'code': module.code,
                    'name': module.name,
                    'description': module.description,
                    'icon': module.icon,
                    'order_index': module.order_index,
                    'is_system': module.is_system,
                    'entity_types_count': entity_types_count,
                    'created_at': module.created_at.isoformat() if module.created_at else None
                })
            
            apps_config.append({
                'id': application.id,
                'code': application.code,
                'name': application.name,
                'description': application.description,
                'icon': application.icon,
                'order_index': application.order_index,
                'created_at': application.created_at.isoformat() if application.created_at else None,
                'modules': modules_list
            })
        
        return apps_config

def get_entity_types_config():
    """Get detailed configuration of all entity types"""
    with app.app_context():
        entities_config = []
        entity_types = EntityType.query.filter_by(is_active=True).order_by(EntityType.module_id, EntityType.order_index).all()
        
        for entity in entity_types:
            # Get attributes
            attributes_list = []
            attributes = entity.attribute_definitions.filter_by(is_active=True).order_by(AttributeDefinition.order_index).all()
            
            for attr in attributes:
                attributes_list.append({
                    'id': attr.id,
                    'code': attr.code,
                    'name': attr.name,
                    'description': attr.description,
                    'data_type': attr.data_type.value,
                    'max_length': attr.max_length,
                    'decimal_precision': attr.decimal_precision,
                    'decimal_scale': attr.decimal_scale,
                    'default_value': attr.default_value,
                    'is_required': attr.is_required,
                    'is_unique': attr.is_unique,
                    'is_indexed': attr.is_indexed,
                    'validation_rules': attr.validation_rules,
                    'order_index': attr.order_index
                })
            
            # Get forms
            forms_list = []
            forms = entity.form_definitions.filter_by(is_active=True).all()
            
            for form in forms:
                # Get form fields
                form_fields = []
                fields = form.form_field_configurations.filter_by().order_by(FormFieldConfiguration.order_index).all()
                
                for field in fields:
                    # Get dropdown connection details
                    dropdown_info = None
                    if field.dropdown_source_entity_id and field.dropdown_source_attribute_id:
                        source_entity = EntityType.query.get(field.dropdown_source_entity_id)
                        source_attr = AttributeDefinition.query.get(field.dropdown_source_attribute_id)
                        display_attr = None
                        if field.dropdown_display_attribute_id:
                            display_attr = AttributeDefinition.query.get(field.dropdown_display_attribute_id)
                        
                        dropdown_info = {
                            'source_entity_name': source_entity.name if source_entity else None,
                            'source_entity_code': source_entity.code if source_entity else None,
                            'source_attribute_name': source_attr.name if source_attr else None,
                            'source_attribute_code': source_attr.code if source_attr else None,
                            'display_attribute_name': display_attr.name if display_attr else None,
                            'display_attribute_code': display_attr.code if display_attr else None,
                            'unique_values_only': field.show_unique_values_only
                        }
                    
                    form_fields.append({
                        'attribute_code': field.attribute_definition.code,
                        'field_label': field.field_label,
                        'field_type': field.field_type.value,
                        'order_index': field.order_index,
                        'is_visible': field.is_visible,
                        'is_editable': field.is_editable,
                        'is_required': field.is_required,
                        'dropdown_source_entity_id': field.dropdown_source_entity_id,
                        'dropdown_source_attribute_id': field.dropdown_source_attribute_id,
                        'show_unique_values_only': field.show_unique_values_only,
                        'placeholder_text': field.placeholder_text,
                        'help_text': field.help_text,
                        'dropdown_connection': dropdown_info
                    })
                
                forms_list.append({
                    'id': form.id,
                    'code': form.code,
                    'name': form.name,
                    'form_type': form.form_type.value,
                    'layout_type': form.layout_type.value,
                    'records_per_page': form.records_per_page,
                    'is_default': form.is_default,
                    'fields': form_fields
                })
            
            # Get instance count
            instance_count = entity.entity_instances.filter_by(is_active=True).count()
            
            entities_config.append({
                'id': entity.id,
                'module_code': entity.module.code,
                'module_name': entity.module.name,
                'application_name': entity.module.application.name,
                'code': entity.code,
                'name': entity.name,
                'description': entity.description,
                'table_name': entity.table_name,
                'is_master': entity.is_master,
                'is_transactional': entity.is_transactional,
                'icon': entity.icon,
                'order_index': entity.order_index,
                'instance_count': instance_count,
                'attributes': attributes_list,
                'forms': forms_list,
                'created_at': entity.created_at.isoformat() if entity.created_at else None
            })
        
        return entities_config

def get_users_and_roles_config():
    """Get users and roles configuration"""
    with app.app_context():
        # Get roles
        roles_list = []
        roles = Role.query.filter_by(is_active=True).order_by(Role.name).all()
        
        for role in roles:
            user_count = role.user_roles.count()
            permissions_count = role.entity_permissions.count()
            
            roles_list.append({
                'id': role.id,
                'code': role.code,
                'name': role.name,
                'description': role.description,
                'is_system': role.is_system,
                'user_count': user_count,
                'permissions_count': permissions_count,
                'created_at': role.created_at.isoformat() if role.created_at else None
            })
        
        # Get users
        users_list = []
        users = User.query.filter_by(is_active=True).order_by(User.username).all()
        
        for user in users:
            user_roles = [ur.role.name for ur in user.user_roles]
            favorite_modules = [fm.module.name for fm in user.favorite_modules]
            
            users_list.append({
                'id': user.id,
                'username': user.username,
                'email': user.email,
                'first_name': user.first_name,
                'last_name': user.last_name,
                'full_name': user.full_name,
                'roles': user_roles,
                'favorite_modules': favorite_modules,
                'last_login': user.last_login.isoformat() if user.last_login else None,
                'created_at': user.created_at.isoformat() if user.created_at else None
            })
        
        return {
            'roles': roles_list,
            'users': users_list
        }

def get_sample_data():
    """Get sample of actual data from each entity type"""
    with app.app_context():
        sample_data = {}
        entity_types = EntityType.query.filter_by(is_active=True).limit(10).all()
        
        for entity in entity_types:
            # Get up to 5 sample instances
            instances = entity.entity_instances.filter_by(is_active=True).limit(5).all()
            
            if instances:
                entity_samples = []
                attributes = entity.attribute_definitions.filter_by(is_active=True).order_by(AttributeDefinition.order_index).all()
                
                for instance in instances:
                    instance_data = {
                        'id': instance.id,
                        'instance_code': instance.instance_code,
                        'workflow_status': instance.workflow_status,
                        'created_at': instance.created_at.isoformat() if instance.created_at else None,
                        'attributes': {}
                    }
                    
                    # Get attribute values
                    for attr in attributes[:10]:  # Limit to first 10 attributes
                        value = instance.get_attribute_value(attr.code)
                        if value is not None:
                            if hasattr(value, 'isoformat'):  # datetime
                                value = value.isoformat()
                            instance_data['attributes'][attr.code] = value
                    
                    entity_samples.append(instance_data)
                
                sample_data[entity.code] = {
                    'entity_name': entity.name,
                    'sample_count': len(entity_samples),
                    'total_count': entity.entity_instances.filter_by(is_active=True).count(),
                    'samples': entity_samples
                }
        
        return sample_data

def analyze_dropdown_connections(entities_config):
    """Analyze and return dropdown connections"""
    dropdown_connections = []
    for entity in entities_config:
        for form in entity['forms']:
            for field in form['fields']:
                if field.get('dropdown_connection'):
                    conn = field['dropdown_connection']
                    dropdown_connections.append({
                        'target_entity': entity['name'],
                        'target_attribute': field['attribute_code'],
                        'form_type': form['form_type'],
                        'source_entity': conn['source_entity_name'],
                        'source_attribute': conn['source_attribute_name'],
                        'display_attribute': conn['display_attribute_name'],
                        'unique_only': conn['unique_values_only']
                    })
    return dropdown_connections

def format_configuration_report():
    """Generate a comprehensive configuration report"""
    print("=" * 80)
    print("PORT MANAGEMENT SYSTEM - CONFIGURATION REPORT")
    print("=" * 80)
    print(f"Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # System Overview
    print("SYSTEM OVERVIEW")
    print("-" * 40)
    overview = get_system_overview()
    for key, value in overview.items():
        print(f"{key.replace('_', ' ').title()}: {value}")
    print()
    
    # Applications and Modules
    print("APPLICATIONS & MODULES")
    print("-" * 40)
    apps_config = get_applications_config()
    for application_data in apps_config:
        print(f"\nApplication: {application_data['name']} ({application_data['code']})")
        if application_data['description']:
            print(f"  Description: {application_data['description']}")
        print(f"  Modules: {len(application_data['modules'])}")
        
        for module in application_data['modules']:
            print(f"    - {module['name']} ({module['code']})")
            print(f"      Entity Types: {module['entity_types_count']}")
            if module['description']:
                print(f"      Description: {module['description']}")
    
    print("\n" + "=" * 80)
    
    # Entity Types Configuration
    print("ENTITY TYPES CONFIGURATION")
    print("-" * 40)
    entities_config = get_entity_types_config()
    
    for entity in entities_config:
        print(f"\nEntity: {entity['name']} ({entity['code']})")
        print(f"  Module: {entity['application_name']} > {entity['module_name']}")
        print(f"  Type: {'Master' if entity['is_master'] else ''}{'Transactional' if entity['is_transactional'] else ''}")
        print(f"  Records: {entity['instance_count']}")
        print(f"  Attributes: {len(entity['attributes'])}")
        print(f"  Forms: {len(entity['forms'])}")
        
        if entity['description']:
            print(f"  Description: {entity['description']}")
        
        # Show attributes
        print(f"  \nAttributes:")
        for attr in entity['attributes']:
            required_str = " (Required)" if attr['is_required'] else ""
            unique_str = " (Unique)" if attr['is_unique'] else ""
            length_str = f" (Max: {attr['max_length']})" if attr['max_length'] else ""
            print(f"    - {attr['name']} ({attr['code']}) - {attr['data_type']}{length_str}{required_str}{unique_str}")
        
        # Show forms
        print(f"  \nForms:")
        for form in entity['forms']:
            default_str = " (Default)" if form['is_default'] else ""
            print(f"    - {form['name']} ({form['form_type']}){default_str}")
            print(f"      Fields: {len(form['fields'])}")
            
            # Show dropdown connections for this form
            dropdown_fields = [f for f in form['fields'] if f.get('dropdown_connection')]
            if dropdown_fields:
                print(f"      Dropdown Connections:")
                for field in dropdown_fields:
                    conn = field['dropdown_connection']
                    unique_str = " (unique values)" if conn['unique_values_only'] else ""
                    display_info = f" → {conn['display_attribute_name']}" if conn['display_attribute_name'] and conn['display_attribute_name'] != conn['source_attribute_name'] else ""
                    print(f"        * {field['attribute_code']} → {conn['source_entity_name']}.{conn['source_attribute_name']}{display_info}{unique_str}")
    
    print("\n" + "=" * 80)
    
    # Dropdown Connections Analysis
    print("DROPDOWN CONNECTIONS & RELATIONSHIPS")
    print("-" * 40)
    
    dropdown_connections = analyze_dropdown_connections(entities_config)
    
    if dropdown_connections:
        # Group by target entity
        connections_by_entity = defaultdict(list)
        for conn in dropdown_connections:
            connections_by_entity[conn['target_entity']].append(conn)
        
        for entity_name, connections in connections_by_entity.items():
            print(f"\n{entity_name}:")
            for conn in connections:
                unique_str = " (unique values)" if conn['unique_only'] else ""
                display_info = f" → {conn['display_attribute']}" if conn['display_attribute'] and conn['display_attribute'] != conn['source_attribute'] else ""
                print(f"  {conn['target_attribute']} ({conn['form_type']}) ← {conn['source_entity']}.{conn['source_attribute']}{display_info}{unique_str}")
        
        # Summary of all connections
        print(f"\nSummary:")
        print(f"  Total dropdown connections: {len(dropdown_connections)}")
        source_entities = set(conn['source_entity'] for conn in dropdown_connections)
        target_entities = set(conn['target_entity'] for conn in dropdown_connections)
        print(f"  Source entities: {', '.join(sorted(source_entities))}")
        print(f"  Target entities: {', '.join(sorted(target_entities))}")
    else:
        print("No dropdown connections configured in the system.")
    
    print("\n" + "=" * 80)
    
    # Users and Roles
    print("USERS & ROLES")
    print("-" * 40)
    users_roles = get_users_and_roles_config()
    
    print(f"Roles ({len(users_roles['roles'])}):")
    for role in users_roles['roles']:
        system_str = " (System)" if role['is_system'] else ""
        print(f"  - {role['name']} ({role['code']}){system_str}")
        print(f"    Users: {role['user_count']}, Permissions: {role['permissions_count']}")
    
    print(f"\nUsers ({len(users_roles['users'])}):")
    for user in users_roles['users']:
        print(f"  - {user['username']} ({user['full_name']})")
        print(f"    Email: {user['email']}")
        print(f"    Roles: {', '.join(user['roles'])}")
        if user['favorite_modules']:
            print(f"    Favorites: {', '.join(user['favorite_modules'])}")
        if user['last_login']:
            print(f"    Last Login: {user['last_login']}")
    
    print("\n" + "=" * 80)
    
    # Sample Data
    print("SAMPLE DATA")
    print("-" * 40)
    sample_data = get_sample_data()
    
    for entity_code, data in sample_data.items():
        print(f"\n{data['entity_name']} ({entity_code}):")
        print(f"  Total Records: {data['total_count']}")
        print(f"  Sample Records: {data['sample_count']}")
        
        for i, sample in enumerate(data['samples'], 1):
            print(f"    Record {i}:")
            if sample['instance_code']:
                print(f"      Code: {sample['instance_code']}")
            for attr_code, value in sample['attributes'].items():
                if len(str(value)) > 50:
                    value = str(value)[:47] + "..."
                print(f"      {attr_code}: {value}")
    
    print("\n" + "=" * 80)
    print("END OF CONFIGURATION REPORT")
    print("=" * 80)

def export_json_config():
    """Export configuration as JSON"""
    config_data = {
        'generated_at': datetime.now().isoformat(),
        'system_overview': get_system_overview(),
        'applications': get_applications_config(),
        'entity_types': get_entity_types_config(),
        'users_and_roles': get_users_and_roles_config(),
        'sample_data': get_sample_data()
    }
    
    # Add dropdown connections analysis
    entities_config = get_entity_types_config()
    config_data['dropdown_connections'] = analyze_dropdown_connections(entities_config)
    
    filename = f"port_management_config_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(config_data, f, indent=2, ensure_ascii=False)
    
    print(f"\nConfiguration exported to: {filename}")
    return filename

def main():
    """Main function to run the configuration export"""
    print("Port Management System - Configuration Exporter")
    print("=" * 60)
    
    try:
        # Check if we can connect to the database
        with app.app_context():
            # Test database connection
            try:
                from sqlalchemy import text
                with db.engine.connect() as connection:
                    connection.execute(text("SELECT 1"))
                print("Database connection: OK")
            except Exception as conn_error:
                print(f"Database connection failed: {conn_error}")
                raise
        
        print("\nChoose export format:")
        print("1. Console Report (detailed text)")
        print("2. JSON File (machine-readable)")
        print("3. Both")
        
        choice = input("\nEnter choice (1-3): ").strip()
        
        if choice in ['1', '3']:
            print("\nGenerating configuration report...\n")
            format_configuration_report()
        
        if choice in ['2', '3']:
            print("\nExporting JSON configuration...")
            filename = export_json_config()
            print(f"JSON export saved as: {filename}")
        
        if choice not in ['1', '2', '3']:
            print("Invalid choice. Generating console report by default.")
            format_configuration_report()
        
        print("\nConfiguration export completed successfully!")
        
    except Exception as e:
        print(f"Error during configuration export: {e}")
        print("\nTroubleshooting:")
        print("1. Make sure the Flask app is properly configured")
        print("2. Check database connection settings")
        print("3. Ensure all required dependencies are installed")
        return 1
    
    return 0

if __name__ == '__main__':
    exit_code = main()
    sys.exit(exit_code)

================
File: setup1.py
================
#!/usr/bin/env python3
"""
Port Management System Setup Script
Clears existing data (except admin) and creates comprehensive port management structure
"""

import os
import sys
from datetime import datetime, date, timedelta

# Add project directory to Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app import app, db
from models import *

def clear_database_except_admin():
    """Clear database while preserving admin user and admin role"""
    print("Clearing database (preserving admin user)...")
    
    with app.app_context():
        try:
            # Get admin user and role before clearing
            admin_user = User.query.filter_by(username='admin').first()
            admin_role = Role.query.filter_by(code='ADMIN').first()
            
            if not admin_user or not admin_role:
                print("Warning: Admin user or role not found!")
                return False
            
            print("Clearing entity data...")
            
            # Clear EAV data first
            AttributeValueText.query.delete()
            AttributeValueNumeric.query.delete()
            AttributeValueDatetime.query.delete()
            AttributeValueBoolean.query.delete()
            
            # Clear entity instances
            EntityInstance.query.delete()
            
            # Clear form configurations
            FormFieldConfiguration.query.delete()
            FormDefinition.query.delete()
            
            # Clear attribute definitions
            AttributeDefinition.query.delete()
            
            # Clear workflow and events
            WorkflowTransition.query.delete()
            WorkflowState.query.delete()
            EventConfiguration.query.delete()
            
            # Clear entity types
            EntityType.query.delete()
            
            # Clear other system data
            UserFavoriteModule.query.delete()
            EntityPermission.query.delete()
            UserOrganizationalAssignment.query.delete()
            OrganizationalUnit.query.delete()
            ApprovalType.query.delete()
            AuditLog.query.delete()
            SystemParameter.query.delete()
            
            # Clear user roles except admin
            UserRole.query.filter(
                ~((UserRole.user_id == admin_user.id) & (UserRole.role_id == admin_role.id))
            ).delete()
            
            # Clear users except admin
            User.query.filter(User.id != admin_user.id).delete()
            
            # Clear roles except admin
            Role.query.filter(Role.id != admin_role.id).delete()
            
            # Clear modules and applications
            Module.query.delete()
            Application.query.delete()
            
            db.session.commit()
            print("Database cleared successfully!")
            return True
            
        except Exception as e:
            db.session.rollback()
            print(f"Error clearing database: {e}")
            raise

def create_application_structure():
    """Create Port Management application and module"""
    print("Creating application structure...")
    
    # Create Port Management application
    application = Application(
        code='PORT_MGMT',
        name='Port Management System',
        description='Comprehensive port operations and vessel management system',
        icon='anchor',
        order_index=1,
        is_active=True,
        created_by='system'
    )
    db.session.add(application)
    db.session.flush()
    
    # Create Port Operations module
    module = Module(
        application_id=application.id,
        code='PORT_OPS',
        name='Port Operations',
        description='Port operations, vessel management, cargo handling and delay tracking',
        icon='directions_boat',
        order_index=1,
        is_system=False,
        is_active=True,
        created_by='system'
    )
    db.session.add(module)
    db.session.flush()
    
    print(f"Created: {application.name} > {module.name}")
    return application, module

def create_entity_with_forms(module_id, code, name, description, is_master, attributes_config):
    """Create entity type with attributes and default forms"""
    print(f"Creating {name}...")
    
    # Create entity type
    entity_type = EntityType(
        module_id=module_id,
        code=code,
        name=name,
        description=description,
        table_name=code.lower(),
        is_master=is_master,
        is_transactional=not is_master,
        icon='table_view' if is_master else 'receipt_long',
        order_index=len(attributes_config),
        is_active=True,
        created_by='system'
    )
    db.session.add(entity_type)
    db.session.flush()
    
    # Create attributes
    for i, (attr_code, attr_name, data_type, max_length, is_required, is_unique) in enumerate(attributes_config, 1):
        attr = AttributeDefinition(
            entity_type_id=entity_type.id,
            code=attr_code,
            name=attr_name,
            data_type=data_type,
            max_length=max_length,
            decimal_precision=12 if data_type == DataTypeEnum.DECIMAL else None,
            decimal_scale=2 if data_type == DataTypeEnum.DECIMAL else None,
            is_required=is_required,
            is_unique=is_unique,
            order_index=i,
            is_active=True,
            created_by='system'
        )
        db.session.add(attr)
    
    db.session.flush()
    
    # Create default forms
    create_default_forms(entity_type)
    
    print(f"Created {name} with {len(attributes_config)} attributes")
    return entity_type

def create_default_forms(entity_type):
    """Create default forms for an entity type"""
    forms_config = [
        (FormTypeEnum.LIST, 'List View', LayoutTypeEnum.SINGLE_COLUMN, 25),
        (FormTypeEnum.DETAIL, 'Detail View', LayoutTypeEnum.TWO_COLUMN, 1),
        (FormTypeEnum.CREATE, 'Create Form', LayoutTypeEnum.TWO_COLUMN, 1),
        (FormTypeEnum.EDIT, 'Edit Form', LayoutTypeEnum.TWO_COLUMN, 1)
    ]
    
    for form_type, form_name, layout, records_per_page in forms_config:
        # Create form definition
        form_def = FormDefinition(
            entity_type_id=entity_type.id,
            code=f"{entity_type.code}_{form_type.value}",
            name=f"{entity_type.name} {form_name}",
            form_type=form_type,
            layout_type=layout,
            records_per_page=records_per_page,
            is_default=True,
            is_active=True,
            created_by='system'
        )
        db.session.add(form_def)
        db.session.flush()
        
        # Get attributes for this entity
        attributes = AttributeDefinition.query.filter_by(
            entity_type_id=entity_type.id,
            is_active=True
        ).order_by(AttributeDefinition.order_index).all()
        
        # Create form field configurations
        for attr in attributes:
            field_type = get_field_type_for_attribute(attr)
            is_editable = form_type in [FormTypeEnum.CREATE, FormTypeEnum.EDIT]
            
            field_config = FormFieldConfiguration(
                form_definition_id=form_def.id,
                attribute_definition_id=attr.id,
                field_label=attr.name,
                field_type=field_type,
                order_index=attr.order_index,
                is_visible=True,
                is_editable=is_editable,
                is_required=attr.is_required and is_editable,
                is_searchable=(form_type == FormTypeEnum.LIST),
                is_sortable=(form_type == FormTypeEnum.LIST),
                created_by='system'
            )
            db.session.add(field_config)

def get_field_type_for_attribute(attr):
    """Determine field type based on attribute data type"""
    type_mapping = {
        DataTypeEnum.VARCHAR: FieldTypeEnum.TEXT,
        DataTypeEnum.TEXT: FieldTypeEnum.TEXTAREA,
        DataTypeEnum.INT: FieldTypeEnum.NUMBER,
        DataTypeEnum.BIGINT: FieldTypeEnum.NUMBER,
        DataTypeEnum.DECIMAL: FieldTypeEnum.DECIMAL,
        DataTypeEnum.BOOLEAN: FieldTypeEnum.CHECKBOX,
        DataTypeEnum.DATE: FieldTypeEnum.DATE,
        DataTypeEnum.DATETIME: FieldTypeEnum.DATETIME
    }
    return type_mapping.get(attr.data_type, FieldTypeEnum.TEXT)

def setup_dropdown_connections():
    """Configure dropdown connections between entities"""
    print("Setting up dropdown connections...")
    
    # Helper function to find entities and attributes
    def get_entity_and_attr(entity_code, attr_code):
        entity = EntityType.query.filter_by(code=entity_code).first()
        if not entity:
            return None, None
        attr = AttributeDefinition.query.filter_by(entity_type_id=entity.id, code=attr_code).first()
        return entity, attr
    
    # Dropdown connections configuration
    connections = [
        # Vessel Tally dropdowns
        ('VESSEL_TALLY', 'OPERATION_TYPE', 'OPERATION_TYPE_MASTER', 'OPERATION_TYPE_NAME', 'OPERATION_TYPE_NAME'),
        ('VESSEL_TALLY', 'VESSEL_NAME', 'VESSEL_PROFILE', 'VESSEL_NAME', 'VESSEL_NAME'),
        ('VESSEL_TALLY', 'VESSEL_OPERATION_COMPLETED_FLAG', 'STATUS_MASTER', 'STATUS_NAME', 'STATUS_NAME'),
        
        # Operation Recording dropdowns
        ('OPERATION_RECORDING', 'VESSEL_TALLY_DOC_NO', 'VESSEL_TALLY', 'DOC_NO', 'DOC_NO'),
        ('OPERATION_RECORDING', 'HATCH_NAME', 'EQUIPMENT_MASTER', 'EQUIPMENT_NAME', 'EQUIPMENT_NAME'),
        ('OPERATION_RECORDING', 'CARGO_NAME', 'CARGO_MASTER', 'CARGO_NAME', 'CARGO_NAME'),
        ('OPERATION_RECORDING', 'UOM_NAME', 'UOM_MASTER', 'UOM_NAME', 'UOM_NAME'),
        
        # Delay Transaction dropdowns
        ('DELAY_TRANSACTION', 'VESSEL_TALLY_DOC_NO', 'VESSEL_TALLY', 'DOC_NO', 'DOC_NO'),
        ('DELAY_TRANSACTION', 'HATCH_NAME', 'EQUIPMENT_MASTER', 'EQUIPMENT_NAME', 'EQUIPMENT_NAME'),
        ('DELAY_TRANSACTION', 'TANK_NAME', 'EQUIPMENT_MASTER', 'EQUIPMENT_NAME', 'EQUIPMENT_NAME'),
        ('DELAY_TRANSACTION', 'DELAY_NAME', 'DELAY_MASTER', 'DELAY_NAME', 'DELAY_NAME'),
    ]
    
    for target_entity_code, target_attr_code, source_entity_code, source_attr_code, display_attr_code in connections:
        # Get entities and attributes
        target_entity, target_attr = get_entity_and_attr(target_entity_code, target_attr_code)
        source_entity, source_attr = get_entity_and_attr(source_entity_code, source_attr_code)
        
        if not all([target_entity, target_attr, source_entity, source_attr]):
            print(f"Skipping connection: {target_entity_code}.{target_attr_code} -> {source_entity_code}.{source_attr_code}")
            continue
        
        display_attr = source_attr  # Use source attribute for display by default
        if display_attr_code != source_attr_code:
            display_attr = AttributeDefinition.query.filter_by(entity_type_id=source_entity.id, code=display_attr_code).first()
        
        # Find form field configurations for CREATE forms and update them
        create_form = FormDefinition.query.filter_by(
            entity_type_id=target_entity.id,
            form_type=FormTypeEnum.CREATE,
            is_active=True
        ).first()
        
        if create_form:
            field_config = FormFieldConfiguration.query.filter_by(
                form_definition_id=create_form.id,
                attribute_definition_id=target_attr.id
            ).first()
            
            if field_config:
                field_config.field_type = FieldTypeEnum.SELECT
                field_config.dropdown_source_entity_id = source_entity.id
                field_config.dropdown_source_attribute_id = source_attr.id
                field_config.dropdown_display_attribute_id = display_attr.id if display_attr else source_attr.id
                field_config.show_unique_values_only = True
                print(f"Connected: {target_entity_code}.{target_attr_code} -> {source_entity_code}.{source_attr_code}")

def create_sample_data():
    """Create sample data for testing"""
    print("Creating sample data...")
    
    # Sample data for master entities
    sample_data = {
        'OPERATION_TYPE_MASTER': [
            {'OPERATION_TYPE_NAME': 'Discharge'},
            {'OPERATION_TYPE_NAME': 'Load'}
        ],
        'STATUS_MASTER': [
            {'STATUS_NAME': 'YES'},
            {'STATUS_NAME': 'NO'}
        ],
        'CARGO_MASTER': [
            {'CARGO_NAME': 'Container Cargo', 'NATURE_OF_CARGO': 'Containerized', 'CATEGORY': 'General'},
            {'CARGO_NAME': 'Coal', 'NATURE_OF_CARGO': 'Dry Bulk', 'CATEGORY': 'Bulk'},
            {'CARGO_NAME': 'Iron Ore', 'NATURE_OF_CARGO': 'Dry Bulk', 'CATEGORY': 'Bulk'},
            {'CARGO_NAME': 'Crude Oil', 'NATURE_OF_CARGO': 'Liquid Bulk', 'CATEGORY': 'Liquid'}
        ],
        'UOM_MASTER': [
            {'UOM_NAME': 'Metric Tons'},
            {'UOM_NAME': 'TEU'},
            {'UOM_NAME': 'CBM'},
            {'UOM_NAME': 'Liters'}
        ],
        'EQUIPMENT_MASTER': [
            {'EQUIPMENT_NAME': 'Hatch 1', 'EQUIPMENT_TYPE': 'HATCH'},
            {'EQUIPMENT_NAME': 'Hatch 2', 'EQUIPMENT_TYPE': 'HATCH'},
            {'EQUIPMENT_NAME': 'Hatch 3', 'EQUIPMENT_TYPE': 'HATCH'},
            {'EQUIPMENT_NAME': 'Tank 1', 'EQUIPMENT_TYPE': 'TANK'},
            {'EQUIPMENT_NAME': 'Tank 2', 'EQUIPMENT_TYPE': 'TANK'}
        ],
        'DELAY_MASTER': [
            {'DELAY_NAME': 'Weather Delay', 'DELAY_CATEGORY': 'Natural'},
            {'DELAY_NAME': 'Equipment Breakdown', 'DELAY_CATEGORY': 'Technical'},
            {'DELAY_NAME': 'Documentation Delay', 'DELAY_CATEGORY': 'Administrative'},
            {'DELAY_NAME': 'Cargo Hold Up', 'DELAY_CATEGORY': 'Operational'}
        ],
        'VESSEL_PROFILE': [
            {
                'DOC_NO': 'VP001',
                'STATUS': 'Active',
                'VESSEL_TYPE': 'Container',
                'VESSEL_NAME': 'MSC Harmony',
                'IMO_OFFICIAL_NO': '9876543',
                'CALL_SIGN': 'ABCD1',
                'NATIONALITY': 'Panama',
                'LOA_METERS': 350.0,
                'BEAM_METERS': 45.0,
                'GRT_MT': 150000.0,
                'DWT_MT': 180000.0
            }
        ]
    }
    
    # Create sample instances for each entity
    for entity_code, records in sample_data.items():
        entity_type = EntityType.query.filter_by(code=entity_code).first()
        if not entity_type:
            continue
            
        for record_data in records:
            try:
                instance = create_entity_instance_with_attributes(
                    entity_type_id=entity_type.id,
                    attribute_values=record_data,
                    created_by='system'
                )
                print(f"Created sample data for {entity_code}")
            except Exception as e:
                print(f"Error creating sample data for {entity_code}: {e}")

def main():
    """Main setup function"""
    print("=" * 80)
    print("PORT MANAGEMENT SYSTEM - COMPREHENSIVE SETUP")
    print("=" * 80)
    
    with app.app_context():
        try:
            # Step 1: Clear existing data
            if not clear_database_except_admin():
                return
            
            # Step 2: Create application structure
            application, module = create_application_structure()
            
            # Step 3: Create master entities
            print("\nCreating Master Entities...")
            
            # Vessel Profile (Master)
            create_entity_with_forms(module.id, 'VESSEL_PROFILE', 'Vessel Profile', 'Master vessel information and documentation', True, [
                ('DOC_NO', 'Doc No', DataTypeEnum.VARCHAR, 50, True, True),
                ('STATUS', 'Status', DataTypeEnum.VARCHAR, 20, True, False),
                ('VESSEL_TYPE', 'Vessel Type', DataTypeEnum.VARCHAR, 50, False, False),
                ('VESSEL_TYPE_NAME', 'Vessel Type Name', DataTypeEnum.VARCHAR, 100, False, False),
                ('VESSEL_NAME', 'Vessel Name', DataTypeEnum.VARCHAR, 100, True, False),
                ('IMO_OFFICIAL_NO', 'IMO Official No', DataTypeEnum.VARCHAR, 20, True, True),
                ('CALL_SIGN', 'Call Sign', DataTypeEnum.VARCHAR, 20, False, False),
                ('VESSEL_DELIVERY_DATE', 'Vessel Delivery Date', DataTypeEnum.DATETIME, None, False, False),
                ('PORT_OF_REGISTRATION', 'Port of Registration', DataTypeEnum.VARCHAR, 100, False, False),
                ('NATIONALITY', 'Nationality', DataTypeEnum.VARCHAR, 50, False, False),
                ('AGENCY_TYPE', 'Agency Type', DataTypeEnum.VARCHAR, 50, False, False),
                ('CLASS_CERTIFICATE_CATEGORY', 'Class Certificate Category', DataTypeEnum.VARCHAR, 50, False, False),
                ('AGENCY_NAME', 'Agency Name', DataTypeEnum.VARCHAR, 100, False, False),
                ('PORT_OF_SUBMISSION', 'Port of Submission', DataTypeEnum.VARCHAR, 100, False, False),
                ('SHIP_REGISTRY_CERT_NO', 'Ship Registry Certificate No', DataTypeEnum.VARCHAR, 50, False, False),
                ('LOA_METERS', 'LOA Meters', DataTypeEnum.DECIMAL, None, False, False),
                ('BEAM_METERS', 'Beam Meters', DataTypeEnum.DECIMAL, None, False, False),
                ('GRT_MT', 'GRT MT', DataTypeEnum.DECIMAL, None, False, False),
                ('DWT_MT', 'DWT MT', DataTypeEnum.DECIMAL, None, False, False),
                ('VESSEL_OWNER_NAME', 'Vessel Owner Name', DataTypeEnum.VARCHAR, 100, False, False),
                ('VESSEL_PROFILE_VALIDITY', 'Vessel Profile Validity', DataTypeEnum.DATE, None, False, False),
                ('INTEGRATION_PCS_REF_NO', 'Integration PCS Ref Number', DataTypeEnum.VARCHAR, 50, False, False),
                ('DOC_APPROVED_DATE', 'Doc Approved Date', DataTypeEnum.DATE, None, False, False),
                ('DATA_SOURCE', 'Data Source', DataTypeEnum.VARCHAR, 50, False, False),
                ('DOC_DATE', 'Doc Date', DataTypeEnum.DATE, None, False, False)
            ])
            
            # Operation Type Master
            create_entity_with_forms(module.id, 'OPERATION_TYPE_MASTER', 'Operation Type Master', 'Types of operations (Discharge/Load)', True, [
                ('OPERATION_TYPE_NAME', 'Operation Type Name', DataTypeEnum.VARCHAR, 50, True, True),
                ('DESCRIPTION', 'Description', DataTypeEnum.TEXT, None, False, False)
            ])
            
            # Status Master
            create_entity_with_forms(module.id, 'STATUS_MASTER', 'Status Master', 'Status values (YES/NO)', True, [
                ('STATUS_NAME', 'Status Name', DataTypeEnum.VARCHAR, 50, True, True),
                ('DESCRIPTION', 'Description', DataTypeEnum.TEXT, None, False, False)
            ])
            
            # Cargo Master
            create_entity_with_forms(module.id, 'CARGO_MASTER', 'Cargo Master', 'Types of cargo handled', True, [
                ('CARGO_NAME', 'Cargo Name', DataTypeEnum.VARCHAR, 100, True, True),
                ('NATURE_OF_CARGO', 'Nature of Cargo', DataTypeEnum.VARCHAR, 100, False, False),
                ('CATEGORY', 'Category', DataTypeEnum.VARCHAR, 50, False, False),
                ('DESCRIPTION', 'Description', DataTypeEnum.TEXT, None, False, False)
            ])
            
            # UOM Master
            create_entity_with_forms(module.id, 'UOM_MASTER', 'UOM Master', 'Units of measurement', True, [
                ('UOM_NAME', 'UOM Name', DataTypeEnum.VARCHAR, 50, True, True),
                ('DESCRIPTION', 'Description', DataTypeEnum.TEXT, None, False, False)
            ])
            
            # Equipment Master
            create_entity_with_forms(module.id, 'EQUIPMENT_MASTER', 'Equipment Master', 'Port equipment (Hatches, Tanks)', True, [
                ('EQUIPMENT_NAME', 'Equipment Name', DataTypeEnum.VARCHAR, 100, True, True),
                ('EQUIPMENT_TYPE', 'Equipment Type', DataTypeEnum.VARCHAR, 50, False, False),
                ('DESCRIPTION', 'Description', DataTypeEnum.TEXT, None, False, False)
            ])
            
            # Delay Master
            create_entity_with_forms(module.id, 'DELAY_MASTER', 'Delay Master', 'Types of delays and stoppages', True, [
                ('DELAY_NAME', 'Delay Name', DataTypeEnum.VARCHAR, 100, True, True),
                ('DELAY_CATEGORY', 'Delay Category', DataTypeEnum.VARCHAR, 50, False, False),
                ('DESCRIPTION', 'Description', DataTypeEnum.TEXT, None, False, False)
            ])
            
            # Step 4: Create transactional entities
            print("\nCreating Transactional Entities...")
            
            # Vessel Tally
            create_entity_with_forms(module.id, 'VESSEL_TALLY', 'Vessel Tally', 'Vessel arrival and operation details', False, [
                ('DOC_NO', 'Doc No', DataTypeEnum.VARCHAR, 50, True, True),
                ('STATUS', 'Status', DataTypeEnum.VARCHAR, 20, False, False),
                ('OPERATION_TYPE', 'Operation Type', DataTypeEnum.VARCHAR, 20, True, False),
                ('VCN_NO', 'VCN No', DataTypeEnum.VARCHAR, 50, True, False),
                ('VESSEL_NAME', 'Vessel Name', DataTypeEnum.VARCHAR, 100, True, False),
                ('IMO_NUMBER', 'IMO Number', DataTypeEnum.VARCHAR, 20, True, False),
                ('IGM_NO', 'IGM No', DataTypeEnum.VARCHAR, 50, False, False),
                ('FIRST_LINE_ASHORE_DATE', 'First Line Ashore Date', DataTypeEnum.DATE, None, False, False),
                ('LAST_LINE_ASHORE_DATE', 'Last Line Ashore Date', DataTypeEnum.DATE, None, False, False),
                ('GANGWAY_DOWN_DATE', 'Gangway Down Date', DataTypeEnum.DATE, None, False, False),
                ('VESSEL_OPERATION_COMPLETED_FLAG', 'Vessel Operation Completed Flag', DataTypeEnum.VARCHAR, 10, False, False)
            ])
            
            # Operation Recording
            create_entity_with_forms(module.id, 'OPERATION_RECORDING', 'Operation Recording', 'Cargo operation details', False, [
                ('VESSEL_TALLY_DOC_NO', 'Vessel Tally Doc No', DataTypeEnum.VARCHAR, 50, True, False),
                ('HATCH_NAME', 'Hatch Name', DataTypeEnum.VARCHAR, 100, False, False),
                ('NATURE_OF_CARGO', 'Nature of Cargo', DataTypeEnum.VARCHAR, 100, False, False),
                ('CARGO_NAME', 'Cargo Name', DataTypeEnum.VARCHAR, 100, False, False),
                ('UOM_NAME', 'UOM Name', DataTypeEnum.VARCHAR, 50, False, False),
                ('DISCHARGED_LOADED_TONNAGE', 'Discharged Loaded Tonnage', DataTypeEnum.DECIMAL, None, False, False),
                ('START_DATE', 'Start Date', DataTypeEnum.DATETIME, None, True, False),
                ('END_DATE', 'End Date', DataTypeEnum.DATETIME, None, True, False)
            ])
            
            # Delay Transaction
            create_entity_with_forms(module.id, 'DELAY_TRANSACTION', 'Delay Transaction', 'Delay and stoppage tracking', False, [
                ('VESSEL_TALLY_DOC_NO', 'Vessel Tally Doc No', DataTypeEnum.VARCHAR, 50, True, False),
                ('HATCH_NAME', 'Hatch Name', DataTypeEnum.VARCHAR, 100, False, False),
                ('TANK_NAME', 'Tank Name', DataTypeEnum.VARCHAR, 100, False, False),
                ('START_DATE', 'Start Date', DataTypeEnum.DATETIME, None, True, False),
                ('END_DATE', 'End Date', DataTypeEnum.DATETIME, None, True, False),
                ('DELAY_NAME', 'Delay Name', DataTypeEnum.VARCHAR, 100, True, False),
                ('STOPPAGE_REMARKS', 'Stoppage Remarks', DataTypeEnum.TEXT, None, False, False)
            ])
            
            # Step 5: Setup dropdown connections
            setup_dropdown_connections()
            
            # Step 6: Create sample data
            create_sample_data()
            
            # Final commit
            db.session.commit()
            
            print("\n" + "=" * 80)
            print("PORT MANAGEMENT SETUP COMPLETED!")
            print("=" * 80)
            print(f"Application: Port Management System")
            print(f"Module: Port Operations")
            print(f"Master Entities: 7 (Vessel Profile, Operation Type, Status, Cargo, UOM, Equipment, Delay)")
            print(f"Transactional Entities: 3 (Vessel Tally, Operation Recording, Delay Transaction)")
            print(f"Dropdown Connections: 12 configured")
            print("")
            print("Access at: http://localhost:5000/")
            print("Admin at: http://localhost:5000/custom-admin/")
            print("Entity Designer at: http://localhost:5000/entity-designer/")
            print("Login: admin / admin123")
            print("=" * 80)
            
        except Exception as e:
            db.session.rollback()
            print(f"Setup failed: {e}")
            import traceback
            traceback.print_exc()
            raise

if __name__ == '__main__':
    print("Port Management System - Comprehensive Setup")
    print("This will CLEAR ALL DATA except admin user!")
    print("")
    
    response = input("Continue? (y/N): ").strip().lower()
    if response != 'y':
        print("Setup cancelled.")
        sys.exit(0)
    
    try:
        main()
        print("\nSetup completed successfully!")
    except Exception as e:
        print(f"\nSetup failed: {e}")
        sys.exit(1)

================
File: templates/auth/login.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login - Port Management System</title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            min-height: 100vh;
            background-image: url('https://plus.unsplash.com/premium_photo-1661963559074-9655a9404f1a?fm=jpg&q=60&w=3000&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8NXx8c2hpcHxlbnwwfHwwfHx8MA%3D%3D');
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        body::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.4);
            z-index: 1;
        }
        
        .login-box {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 8px;
            padding: 40px;
            width: 100%;
            max-width: 400px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
            position: relative;
            z-index: 2;
        }
        
        .login-title {
            text-align: center;
            margin-bottom: 30px;
            color: #2d3748;
        }
        
        .login-title h1 {
            font-size: 24px;
            font-weight: 600;
            margin-bottom: 5px;
        }
        
        .login-title p {
            font-size: 14px;
            color: #6b7280;
            margin: 0;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-label {
            font-size: 14px;
            font-weight: 500;
            color: #374151;
            margin-bottom: 5px;
            display: block;
        }
        
        .form-control {
            width: 100%;
            padding: 12px 15px;
            border: 1px solid #d1d5db;
            border-radius: 5px;
            font-size: 14px;
            transition: border-color 0.15s ease;
        }
        
        .form-control:focus {
            outline: none;
            border-color: #0070f2;
            box-shadow: 0 0 0 3px rgba(0, 112, 242, 0.1);
        }
        
        .btn-login {
            width: 100%;
            background: #0070f2;
            border: none;
            color: white;
            padding: 12px;
            font-size: 16px;
            font-weight: 500;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.15s ease;
        }
        
        .btn-login:hover {
            background: #0040a0;
        }
        
        .btn-login:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }
        
        .alert {
            padding: 12px 15px;
            border-radius: 5px;
            margin-bottom: 20px;
            font-size: 14px;
        }
        
        .alert-danger {
            background-color: #fef2f2;
            border: 1px solid #fecaca;
            color: #dc2626;
        }
        
        .form-check {
            margin-bottom: 20px;
        }
        
        .form-check-input {
            margin-right: 8px;
        }
        
        .form-check-label {
            font-size: 14px;
            color: #6b7280;
        }
        
        @media (max-width: 480px) {
            .login-box {
                margin: 20px;
                padding: 30px 20px;
            }
        }
    </style>
</head>
<body>
    <div class="login-box">
        <div class="login-title">
            <h1>Port Management</h1>
            <p>Please sign in to continue</p>
        </div>
        
        <!-- Flash Messages -->
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                    <div class="alert alert-{{ 'danger' if category == 'error' else category }}">
                        {{ message }}
                    </div>
                {% endfor %}
            {% endif %}
        {% endwith %}
        
        <!-- Login Form -->
        <form method="POST" id="loginForm">
            <input type="hidden" name="csrf_token" value="{{ csrf_token() }}"/>
            
            <div class="form-group">
                <label for="username" class="form-label">Username</label>
                <input type="text" 
                       class="form-control" 
                       id="username" 
                       name="username" 
                       placeholder="Enter username"
                       required 
                       autocomplete="username">
            </div>
            
            <div class="form-group">
                <label for="password" class="form-label">Password</label>
                <input type="password" 
                       class="form-control" 
                       id="password" 
                       name="password" 
                       placeholder="Enter password"
                       required 
                       autocomplete="current-password">
            </div>
            
            <div class="form-check">
                <input type="checkbox" class="form-check-input" id="remember_me" name="remember_me">
                <label class="form-check-label" for="remember_me">
                    Remember me
                </label>
            </div>
            
            <button type="submit" class="btn-login" id="loginBtn">
                Sign In
            </button>
        </form>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const loginForm = document.getElementById('loginForm');
            const loginBtn = document.getElementById('loginBtn');
            
            // Handle form submission
            loginForm.addEventListener('submit', function(e) {
                // Show loading state
                loginBtn.disabled = true;
                loginBtn.textContent = 'Signing In...';
            });
            
            // Auto-focus username field
            document.getElementById('username').focus();
            
            // Reset button state if there's an error
            if (document.querySelector('.alert-danger')) {
                loginBtn.disabled = false;
                loginBtn.textContent = 'Sign In';
            }
        });
    </script>
</body>
</html>

================
File: templates/base.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="csrf-token" content="{{ csrf_token() }}">
    <title>{% block title %}Port Management System{% endblock %}</title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    
    <!-- Material Icons -->
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" rel="stylesheet">
    
    <!-- Custom SAP-like CSS -->
    <style>
        :root {
            --sap-blue: #0070f2;
            --sap-dark-blue: #0040a0;
            --sap-light-blue: #e6f2ff;
            --sap-gray: #f8f9fa;
            --sap-border: #d1d5db;
            --sap-text: #2d3748;
            --sap-text-muted: #6b7280;
            --sidebar-width: 250px;
            --header-height: 48px;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            font-size: 12px;
            line-height: 1.4;
            color: var(--sap-text);
            background-color: #ffffff;
            overflow-x: hidden;
        }
        
        /* Header */
        .main-header {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            height: var(--header-height);
            background: linear-gradient(135deg, var(--sap-blue) 0%, var(--sap-dark-blue) 100%);
            color: white;
            z-index: 1030;
            border-bottom: 1px solid var(--sap-border);
            display: flex;
            align-items: center;
            padding: 0 15px;
        }
        
        .header-brand {
            font-size: 22px;
            font-weight: 600;
            margin-right: 30px;
        }
        
        .header-nav {
            display: flex;
            align-items: center;
            margin-left: auto;
        }
        
        .header-user {
            display: flex;
            align-items: center;
            color: white;
            text-decoration: none;
            font-size: 11px;
        }
        
        .header-user:hover {
            color: rgba(255, 255, 255, 0.8);
        }
        
        /* Sidebar */
        .sidebar {
            position: fixed;
            top: var(--header-height);
            left: 0;
            width: var(--sidebar-width);
            height: calc(100vh - var(--header-height));
            background-color: var(--sap-gray);
            border-right: 1px solid var(--sap-border);
            overflow-y: auto;
            z-index: 1020;
        }
        
        .sidebar-section {
            border-bottom: 1px solid var(--sap-border);
        }
        
        .sidebar-header {
            padding: 8px 12px;
            background-color: #e9ecef;
            font-size: 11px;
            font-weight: 600;
            color: var(--sap-text);
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .sidebar-content {
            padding: 5px 0;
        }
        
        .sidebar-item {
            display: flex;
            align-items: center;
            padding: 6px 12px 6px 20px;
            color: var(--sap-text);
            text-decoration: none;
            font-size: 11px;
            border: none;
            background: none;
            width: 100%;
            text-align: left;
            transition: background-color 0.15s ease;
        }
        
        .sidebar-item:hover {
            background-color: var(--sap-light-blue);
            color: var(--sap-blue);
        }
        
        .sidebar-item.active {
            background-color: var(--sap-blue);
            color: white;
        }
        
        .sidebar-item .material-icons,
        .sidebar-item .material-symbols-outlined {
            font-size: 16px;
            margin-right: 8px;
        }
        
        .sidebar-item .item-text {
            flex: 1;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }
        
        .favorite-star {
            margin-left: auto;
            font-size: 14px;
            opacity: 0.5;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .favorite-star:hover {
            opacity: 1;
            transform: scale(1.1);
        }
        
        .favorite-star.favorited {
            color: #fbbf24;
            opacity: 1;
        }
        
        /* Main Content */
        .main-content {
            margin-left: var(--sidebar-width);
            margin-top: var(--header-height);
            padding: 15px;
            min-height: calc(100vh - var(--header-height));
        }
        
        /* Content Header */
        .content-header {
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 1px solid var(--sap-border);
        }
        
        .content-title {
            font-size: 16px;
            font-weight: 600;
            color: var(--sap-text);
            margin-bottom: 5px;
        }
        
        .content-breadcrumb {
            font-size: 11px;
            color: var(--sap-text-muted);
        }
        
        .content-breadcrumb a {
            color: var(--sap-blue);
            text-decoration: none;
        }
        
        .content-breadcrumb a:hover {
            text-decoration: underline;
        }
        
        /* Toolbar */
        .toolbar {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 15px;
            padding: 8px 12px;
            background-color: var(--sap-gray);
            border: 1px solid var(--sap-border);
            border-radius: 3px;
        }
        
        .toolbar-section {
            display: flex;
            align-items: center;
            gap: 5px;
        }
        
        .toolbar-separator {
            width: 1px;
            height: 20px;
            background-color: var(--sap-border);
            margin: 0 8px;
        }
        
        /* Buttons */
        .btn-sap {
            font-size: 11px;
            padding: 4px 12px;
            border: 1px solid var(--sap-border);
            border-radius: 3px;
            background-color: white;
            color: var(--sap-text);
            cursor: pointer;
            transition: all 0.15s ease;
            display: inline-flex;
            align-items: center;
            gap: 4px;
            text-decoration: none;
        }
        
        .btn-sap:hover {
            background-color: var(--sap-light-blue);
            border-color: var(--sap-blue);
            color: var(--sap-blue);
            text-decoration: none;
        }
        
        .btn-sap.btn-primary {
            background-color: var(--sap-blue);
            border-color: var(--sap-blue);
            color: white;
        }
        
        .btn-sap.btn-primary:hover {
            background-color: var(--sap-dark-blue);
            color: white;
        }
        
        .btn-sap .material-icons,
        .btn-sap .material-symbols-outlined {
            font-size: 14px;
        }
        
        /* Tables */
        .table-sap {
            font-size: 11px;
            border: 1px solid var(--sap-border);
        }
        
        .table-sap th {
            background-color: var(--sap-gray);
            border-bottom: 2px solid var(--sap-border);
            font-weight: 600;
            padding: 6px 8px;
            font-size: 11px;
        }
        
        .table-sap td {
            padding: 4px 8px;
            border-bottom: 1px solid #f0f0f0;
        }
        
        .table-sap tbody tr:hover {
            background-color: var(--sap-light-blue);
        }
        
        /* Forms */
        .form-sap .form-label {
            font-size: 11px;
            font-weight: 600;
            margin-bottom: 3px;
            color: var(--sap-text);
        }
        
        .form-sap .form-control {
            font-size: 11px;
            padding: 4px 8px;
            border: 1px solid var(--sap-border);
            border-radius: 3px;
        }
        
        .form-sap .form-control:focus {
            border-color: var(--sap-blue);
            box-shadow: 0 0 0 2px rgba(0, 112, 242, 0.2);
        }
        
        /* Cards */
        .card-sap {
            border: 1px solid var(--sap-border);
            border-radius: 3px;
            background-color: white;
        }
        
        .card-sap .card-header {
            background-color: var(--sap-gray);
            border-bottom: 1px solid var(--sap-border);
            padding: 8px 12px;
            font-size: 12px;
            font-weight: 600;
        }
        
        .card-sap .card-body {
            padding: 12px;
        }
        
        /* Tabs */
        .nav-tabs-sap {
            border-bottom: 1px solid var(--sap-border);
        }
        
        .nav-tabs-sap .nav-link {
            font-size: 11px;
            padding: 6px 12px;
            border: 1px solid transparent;
            border-bottom: none;
            background-color: var(--sap-gray);
            color: var(--sap-text);
            margin-right: 2px;
        }
        
        .nav-tabs-sap .nav-link.active {
            background-color: white;
            border-color: var(--sap-border) var(--sap-border) white;
            color: var(--sap-blue);
        }
        
        /* Alerts */
        .alert-sap {
            font-size: 11px;
            padding: 8px 12px;
            border-radius: 3px;
            margin-bottom: 10px;
        }
        
        .alert-sap.alert-success {
            background-color: #d4edda;
            border: 1px solid #c3e6cb;
            color: #155724;
        }
        
        .alert-sap.alert-error {
            background-color: #f8d7da;
            border: 1px solid #f5c6cb;
            color: #721c24;
        }
        
        .alert-sap.alert-warning {
            background-color: #fff3cd;
            border: 1px solid #ffeaa7;
            color: #856404;
        }
        
        .alert-sap.alert-info {
            background-color: #cce7ff;
            border: 1px solid #a6d5fa;
            color: #0c5460;
        }
        
        /* Module Grid */
        .module-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 15px;
            margin-top: 15px;
        }
        
        .module-card {
            border: 1px solid var(--sap-border);
            border-radius: 3px;
            padding: 12px;
            background-color: white;
            cursor: pointer;
            transition: all 0.15s ease;
            text-decoration: none;
            color: inherit;
        }
        
        .module-card:hover {
            background-color: var(--sap-light-blue);
            border-color: var(--sap-blue);
            color: var(--sap-blue);
            text-decoration: none;
        }
        
        .module-card .module-icon {
            font-size: 24px;
            margin-bottom: 8px;
            color: var(--sap-blue);
        }
        
        .module-card .module-name {
            font-size: 12px;
            font-weight: 600;
            margin-bottom: 4px;
        }
        
        .module-card .module-description {
            font-size: 10px;
            color: var(--sap-text-muted);
            line-height: 1.3;
        }
        
        /* Responsive */
        @media (max-width: 768px) {
            .sidebar {
                transform: translateX(-100%);
                transition: transform 0.3s ease;
            }
            
            .sidebar.show {
                transform: translateX(0);
            }
            
            .main-content {
                margin-left: 0;
            }
            
            .module-grid {
                grid-template-columns: 1fr;
            }
        }
        
        /* Scrollbar Styling */
        .sidebar::-webkit-scrollbar {
            width: 6px;
        }
        
        .sidebar::-webkit-scrollbar-track {
            background: #f1f1f1;
        }
        
        .sidebar::-webkit-scrollbar-thumb {
            background: #c1c1c1;
            border-radius: 3px;
        }
        
        .sidebar::-webkit-scrollbar-thumb:hover {
            background: #a8a8a8;
        }
        
        /* Loading Spinner */
        .loading-spinner {
            display: inline-block;
            width: 12px;
            height: 12px;
            border: 2px solid #f3f3f3;
            border-top: 2px solid var(--sap-blue);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        /* Toast animations */
        @keyframes slideInRight {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }
    </style>
    
    {% block extra_css %}{% endblock %}
</head>
<body>
    <!-- Header -->
    <header class="main-header">
        <div class="header-brand">
            <span class="material-symbols-outlined" style="margin-right: 8px;">anchor</span>
            PortWiz
        </div>
        
<!-- Update the header navigation in templates/base.html -->
<!-- Replace the existing dropdown in the header-nav section with this: -->

        <nav class="header-nav">
            {% if current_user.is_authenticated %}
                <!-- Add Entity Designer link before the user dropdown -->

                
                <div class="dropdown">
                    <a href="#" class="header-user dropdown-toggle" data-bs-toggle="dropdown">
                        <span class="material-symbols-outlined" style="margin-right: 5px;">person</span>
                        {{ current_user.full_name or current_user.username }}
                    </a>
                    <ul class="dropdown-menu dropdown-menu-end">
                        <li><a class="dropdown-item" href="{{ url_for('dashboard') }}">Dashboard</a></li>
                        <li><a class="dropdown-item" href="/custom-admin/">System Admin</a></li>
                        <li><a class="dropdown-item" href="/entity-designer/">Entity Designer</a></li>
                        <li><a class="dropdown-item" href="/access-control/">Access Control</a></li>
                        <li><hr class="dropdown-divider"></li>
                        <li><a class="dropdown-item" href="{{ url_for('logout') }}">Logout</a></li>
                    </ul>
                </div>
            {% endif %}
        </nav>
    </header>

    {% if current_user.is_authenticated %}
    <!-- Sidebar -->
    <aside class="sidebar">
        <!-- Favorites Section -->
        {% if favorite_modules %}
        <div class="sidebar-section">
            <div class="sidebar-header">
                <span class="material-symbols-outlined" style="margin-right: 5px; font-size: 14px;">star</span>
                Favorites
            </div>
            <div class="sidebar-content">
                {% for module in favorite_modules %}
                <a href="{{ url_for('module_view', module_id=module.id) }}" class="sidebar-item">
                    <span class="material-symbols-outlined">{{ module.icon or 'folder' }}</span>
                    <span class="item-text">{{ module.name }}</span>
                </a>
                {% endfor %}
            </div>
        </div>
        {% endif %}
        
        <!-- Applications Section -->
        {% if applications %}
        {% for application in applications %}
        <div class="sidebar-section">
            <div class="sidebar-header">
                <span class="material-symbols-outlined" style="margin-right: 5px; font-size: 14px;">{{ application.icon or 'apps' }}</span>
                {{ application.name }}
            </div>
            <div class="sidebar-content">
                {% for module in application.modules if module.is_active %}
                <a href="{{ url_for('module_view', module_id=module.id) }}" class="sidebar-item">
                    <span class="material-symbols-outlined">{{ module.icon or 'folder' }}</span>
                    <span class="item-text">{{ module.name }}</span>
                    <span class="favorite-star material-symbols-outlined" 
                          data-module-id="{{ module.id }}"
                          onclick="toggleFavorite(event, {{ module.id }})">
                        star_border
                    </span>
                </a>
                {% endfor %}
            </div>
        </div>
        {% endfor %}
        {% endif %}
    </aside>
    {% endif %}

    <!-- Main Content -->
    <main class="main-content">
        <!-- Flash Messages -->
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                    <div class="alert-sap alert-{{ 'error' if category == 'error' else category }}">
                        <span class="material-symbols-outlined" style="margin-right: 5px; font-size: 14px;">
                            {% if category == 'success' %}check_circle
                            {% elif category == 'error' %}error
                            {% elif category == 'warning' %}warning
                            {% else %}info{% endif %}
                        </span>
                        {{ message }}
                    </div>
                {% endfor %}
            {% endif %}
        {% endwith %}
        
        {% block content %}{% endblock %}
    </main>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    
    <!-- Custom JavaScript -->
    <script>
        // Set favorite modules data for JavaScript
        {% if current_user.is_authenticated %}
        window.favoriteModules = {{ (favorite_modules | map(attribute='id') | list) | tojson | safe }};
        {% else %}
        window.favoriteModules = [];
        {% endif %}
        
        // Get CSRF token function
        function getCSRFToken() {
            const metaToken = document.querySelector('meta[name=csrf-token]');
            if (metaToken) {
                return metaToken.getAttribute('content');
            }
            
            const formToken = document.querySelector('input[name="csrf_token"]');
            if (formToken) {
                return formToken.value;
            }
            
            return '';
        }
        
        // Show toast notification
        function showToast(message, type = 'info') {
            const toast = document.createElement('div');
            toast.className = `alert-sap alert-${type}`;
            toast.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                z-index: 9999;
                min-width: 250px;
                animation: slideInRight 0.3s ease;
            `;
            toast.textContent = message;
            
            const closeBtn = document.createElement('button');
            closeBtn.innerHTML = '×';
            closeBtn.style.cssText = `
                background: none;
                border: none;
                font-size: 18px;
                cursor: pointer;
                float: right;
                margin-left: 10px;
            `;
            closeBtn.onclick = () => toast.remove();
            toast.appendChild(closeBtn);
            
            document.body.appendChild(toast);
            
            setTimeout(() => {
                if (toast.parentNode) {
                    toast.remove();
                }
            }, 3000);
        }
        
        // Toggle favorite module
        function toggleFavorite(event, moduleId) {
            event.preventDefault();
            event.stopPropagation();
            
            const star = event.target.closest('button') ? 
                event.target.closest('button').querySelector('.material-symbols-outlined') : 
                event.target;
            const isFavorited = star.textContent === 'star';
            
            // Show loading state
            const originalText = star.textContent;
            star.textContent = 'hourglass_empty';
            
            fetch(`/favorites/toggle/${moduleId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': getCSRFToken()
                },
                credentials: 'same-origin'
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    if (data.action === 'added') {
                        star.textContent = 'star';
                        star.style.color = '#fbbf24';
                        star.classList.add('favorited');
                        // Update button text if it exists
                        const button = star.closest('button');
                        if (button && button.textContent.includes('Add to Favorites')) {
                            button.innerHTML = button.innerHTML.replace('Add to Favorites', 'Remove from Favorites');
                        }
                    } else {
                        star.textContent = 'star_border';
                        star.style.color = '';
                        star.classList.remove('favorited');
                        // Update button text if it exists
                        const button = star.closest('button');
                        if (button && button.textContent.includes('Remove from Favorites')) {
                            button.innerHTML = button.innerHTML.replace('Remove from Favorites', 'Add to Favorites');
                        }
                    }
                    
                    // Update global favorites array
                    if (data.action === 'added') {
                        window.favoriteModules.push(moduleId);
                    } else {
                        window.favoriteModules = window.favoriteModules.filter(id => id !== moduleId);
                    }
                    
                    // Show success message
                    showToast(`Module ${data.action} ${data.action === 'added' ? 'to' : 'from'} favorites`, 'success');
                    
                    // Refresh page after a short delay to update favorites section
                    setTimeout(() => {
                        window.location.reload();
                    }, 1000);
                } else {
                    throw new Error(data.error || 'Unknown error occurred');
                }
            })
            .catch(error => {
                console.error('Error toggling favorite:', error);
                star.textContent = originalText; // Restore original state
                showToast('Error updating favorites: ' + error.message, 'error');
            });
        }
        
        // Initialize favorite stars
        document.addEventListener('DOMContentLoaded', function() {
            const favoriteModules = window.favoriteModules || [];
            
            document.querySelectorAll('.favorite-star').forEach(star => {
                const moduleId = parseInt(star.dataset.moduleId);
                if (favoriteModules.includes(moduleId)) {
                    star.classList.add('favorited');
                    star.textContent = 'star';
                    star.style.color = '#fbbf24';
                } else {
                    star.textContent = 'star_border';
                    star.style.color = '';
                }
            });
        });
        
        // Table row click handler
        function handleTableRowClick(url) {
            window.location.href = url;
        }
        
        // Confirm delete action
        function confirmDelete(message) {
            return confirm(message || 'Are you sure you want to delete this item?');
        }
        
        // Show loading spinner
        function showLoading(element) {
            const originalText = element.innerHTML;
            element.innerHTML = '<span class="loading-spinner"></span> Loading...';
            element.disabled = true;
            
            return function hideLoading() {
                element.innerHTML = originalText;
                element.disabled = false;
            };
        }
        
        // Auto-hide alerts
        setTimeout(function() {
            document.querySelectorAll('.alert-sap').forEach(alert => {
                alert.style.transition = 'opacity 0.5s ease';
                alert.style.opacity = '0';
                setTimeout(() => alert.remove(), 500);
            });
        }, 5000);
    </script>
    
    {% block extra_js %}{% endblock %}
</body>
</html>

================
File: templates/dashboard/main.html
================
{% extends "base.html" %}

{% block title %}Dashboard - Port Management System{% endblock %}

{% block content %}
<div class="content-header">
    <h1 class="content-title">Dashboard</h1>
    <nav class="content-breadcrumb">
        <span class="material-symbols-outlined" style="font-size: 12px; margin-right: 3px;">home</span>
        Dashboard
    </nav>
</div>

<div class="row">
    <!-- Quick Stats -->
    <div class="col-md-12 mb-4">
        <div class="row">
            <div class="col-md-3">
                <div class="card-sap">
                    <div class="card-body text-center">
                        <div class="d-flex align-items-center justify-content-center mb-2">
                            <span class="material-symbols-outlined" style="font-size: 32px; color: var(--sap-blue);">apps</span>
                        </div>
                        <h4 class="mb-1" style="font-size: 24px; font-weight: 600;">{{ applications|length }}</h4>
                        <p class="text-muted mb-0" style="font-size: 11px;">Applications</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card-sap">
                    <div class="card-body text-center">
                        <div class="d-flex align-items-center justify-content-center mb-2">
                            <span class="material-symbols-outlined" style="font-size: 32px; color: #28a745;">folder</span>
                        </div>
                        <h4 class="mb-1" style="font-size: 24px; font-weight: 600;">
                            {% set total_modules = 0 %}
                            {% for app in applications %}
                                {% set total_modules = total_modules + app.modules.filter_by(is_active=True).count() %}
                            {% endfor %}
                            {{ total_modules }}
                        </h4>
                        <p class="text-muted mb-0" style="font-size: 11px;">Active Modules</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card-sap">
                    <div class="card-body text-center">
                        <div class="d-flex align-items-center justify-content-center mb-2">
                            <span class="material-symbols-outlined" style="font-size: 32px; color: #ffc107;">table_view</span>
                        </div>
                        <h4 class="mb-1" style="font-size: 24px; font-weight: 600;">
                            {% set total_entities = 0 %}
                            {% for app in applications %}
                                {% for module in app.modules.filter_by(is_active=True) %}
                                    {% set total_entities = total_entities + module.entity_types.filter_by(is_active=True).count() %}
                                {% endfor %}
                            {% endfor %}
                            {{ total_entities }}
                        </h4>
                        <p class="text-muted mb-0" style="font-size: 11px;">Entity Types</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card-sap">
                    <div class="card-body text-center">
                        <div class="d-flex align-items-center justify-content-center mb-2">
                            <span class="material-symbols-outlined" style="font-size: 32px; color: #17a2b8;">star</span>
                        </div>
                        <h4 class="mb-1" style="font-size: 24px; font-weight: 600;">{{ favorite_modules|length }}</h4>
                        <p class="text-muted mb-0" style="font-size: 11px;">Favorites</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Favorite Modules -->
    {% if favorite_modules %}
    <div class="col-md-6 mb-4">
        <div class="card-sap">
            <div class="card-header">
                <span class="material-symbols-outlined" style="margin-right: 5px;">star</span>
                Quick Access - Favorite Modules
            </div>
            <div class="card-body">
                <div class="module-grid" style="grid-template-columns: repeat(auto-fill, minmax(150px, 1fr)); gap: 10px;">
                    {% for module in favorite_modules %}
                    <a href="{{ url_for('module_view', module_id=module.id) }}" class="module-card" style="padding: 8px;">
                        <div class="module-icon">
                            <span class="material-symbols-outlined">{{ module.icon or 'folder' }}</span>
                        </div>
                        <div class="module-name">{{ module.name }}</div>
                        <div class="module-description">{{ module.description or '' }}</div>
                    </a>
                    {% endfor %}
                </div>
            </div>
        </div>
    </div>
    {% endif %}

    <!-- System Information -->
    <div class="col-md-6 mb-4">
        <div class="card-sap">
            <div class="card-header">
                <span class="material-symbols-outlined" style="margin-right: 5px;">info</span>
                System Information
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-6 mb-2">
                        <small class="text-muted">User:</small><br>
                        <strong style="font-size: 11px;">{{ current_user.full_name or current_user.username }}</strong>
                    </div>
                    <div class="col-6 mb-2">
                        <small class="text-muted">Last Login:</small><br>
                        <strong style="font-size: 11px;">{{ current_user.last_login | format_datetime if current_user.last_login else 'First login' }}</strong>
                    </div>
                    <div class="col-6 mb-2">
                        <small class="text-muted">System Version:</small><br>
                        <strong style="font-size: 11px;">v1.0.0</strong>
                    </div>
                    <div class="col-6 mb-2">
                        <small class="text-muted">Environment:</small><br>
                        <strong style="font-size: 11px;">Development</strong>
                    </div>
                </div>
                
                <div class="mt-3 pt-2" style="border-top: 1px solid var(--sap-border);">
                    <div class="d-flex justify-content-between align-items-center">
                        <small class="text-muted">Quick Actions:</small>
                        <div>
                            <a href="/custom-admin/" class="btn-sap" style="font-size: 10px; padding: 2px 8px;">
                                <span class="material-symbols-outlined" style="font-size: 12px;">settings</span>
                                Admin
                            </a>
                            <a href="/entity-designer/" class="btn-sap" style="font-size: 10px; padding: 2px 8px;">
                                <span class="material-symbols-outlined" style="font-size: 12px;">Design_Services</span>
                                Entity Designer
                            </a>
                            <a href="/access-control/" class="btn-sap" style="font-size: 10px; padding: 2px 8px;">
                                <span class="material-symbols-outlined" style="font-size: 12px;">Shield_Lock</span>
                                Access Control
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- All Applications -->
    <div class="col-md-12">
        <div class="card-sap">
            <div class="card-header">
                <span class="material-symbols-outlined" style="margin-right: 5px;">apps</span>
                All Applications
            </div>
            <div class="card-body">
                {% if applications %}
                {% for application in applications %}
                <div class="mb-4">
                    <h5 style="font-size: 14px; font-weight: 600; margin-bottom: 15px; color: var(--sap-blue);">
                        <span class="material-symbols-outlined" style="margin-right: 5px; font-size: 18px;">{{ application.icon or 'apps' }}</span>
                        {{ application.name }}
                    </h5>
                    
                    {% if application.description %}
                    <p style="font-size: 11px; color: var(--sap-text-muted); margin-bottom: 15px;">
                        {{ application.description }}
                    </p>
                    {% endif %}
                    
                    {% set active_modules = application.modules.filter_by(is_active=True).all() %}
                    {% if active_modules %}
                    <div class="module-grid">
                        {% for module in active_modules %}
                        <a href="{{ url_for('module_view', module_id=module.id) }}" class="module-card">
                            <div class="d-flex justify-content-between align-items-start mb-2">
                                <div class="module-icon">
                                    <span class="material-symbols-outlined">{{ module.icon or 'folder' }}</span>
                                </div>
                                <span class="favorite-star material-symbols-outlined" 
                                      data-module-id="{{ module.id }}"
                                      onclick="toggleFavorite(event, {{ module.id }})"
                                      style="font-size: 16px;">
                                    star_border
                                </span>
                            </div>
                            <div class="module-name">{{ module.name }}</div>
                            <div class="module-description">{{ module.description or '' }}</div>
                            
                            <!-- Entity Types Count -->
                            {% set entity_count = module.entity_types.filter_by(is_active=True).count() %}
                            {% if entity_count > 0 %}
                            <div style="margin-top: 8px; font-size: 10px; color: var(--sap-text-muted);">
                                <span class="material-symbols-outlined" style="font-size: 12px; margin-right: 2px;">table_view</span>
                                {{ entity_count }} entity{{ 's' if entity_count != 1 else '' }}
                            </div>
                            {% endif %}
                        </a>
                        {% endfor %}
                    </div>
                    {% else %}
                    <div class="text-center text-muted" style="padding: 20px;">
                        <span class="material-symbols-outlined" style="font-size: 48px; opacity: 0.3;">folder_open</span>
                        <p style="font-size: 11px; margin-top: 10px;">No modules available</p>
                        <a href="/custom-admin/" class="btn-sap btn-primary" style="font-size: 10px; padding: 4px 12px;">
                            <span class="material-symbols-outlined" style="font-size: 12px;">add</span>
                            Add Modules
                        </a>
                    </div>
                    {% endif %}
                </div>
                {% if not loop.last %}
                <hr style="margin: 30px 0; border-color: var(--sap-border);">
                {% endif %}
                {% endfor %}
                {% else %}
                <div class="text-center" style="padding: 40px;">
                    <span class="material-symbols-outlined" style="font-size: 64px; opacity: 0.3; color: var(--sap-text-muted);">apps</span>
                    <h5 style="margin-top: 15px; font-size: 14px; color: var(--sap-text-muted);">No Applications Found</h5>
                    <p style="font-size: 11px; color: var(--sap-text-muted); margin-bottom: 20px;">
                        Get started by creating your first application and modules.
                    </p>
                    <a href="/custom-admin/" class="btn-sap btn-primary">
                        <span class="material-symbols-outlined">add</span>
                        Create Application
                    </a>
                </div>
                {% endif %}
            </div>
        </div>
    </div>
</div>

<!-- Welcome Modal for First Time Users -->
{% if not favorite_modules and applications|length == 0 %}
<div class="modal fade" id="welcomeModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header" style="background: linear-gradient(135deg, var(--sap-blue) 0%, var(--sap-dark-blue) 100%); color: white;">
                <h5 class="modal-title">
                    <span class="material-symbols-outlined" style="margin-right: 8px;">celebration</span>
                    Welcome to Port Management System
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="text-center">
                    <span class="material-symbols-outlined" style="font-size: 64px; color: var(--sap-blue);">rocket_launch</span>
                    <h4 style="margin: 20px 0; color: var(--sap-text);">Get Started</h4>
                    <p style="font-size: 12px; color: var(--sap-text-muted); margin-bottom: 30px;">
                        This is a flexible, customizable system. You can create applications, modules, and entity types 
                        to match your specific business requirements.
                    </p>
                </div>
                
                <div class="row">
                    <div class="col-md-4 text-center mb-3">
                        <span class="material-symbols-outlined" style="font-size: 32px; color: var(--sap-blue);">apps</span>
                        <h6 style="margin: 10px 0; font-size: 12px;">1. Create Applications</h6>
                        <p style="font-size: 10px; color: var(--sap-text-muted);">Define your business applications</p>
                    </div>
                    <div class="col-md-4 text-center mb-3">
                        <span class="material-symbols-outlined" style="font-size: 32px; color: #28a745;">folder</span>
                        <h6 style="margin: 10px 0; font-size: 12px;">2. Add Modules</h6>
                        <p style="font-size: 10px; color: var(--sap-text-muted);">Organize functionality into modules</p>
                    </div>
                    <div class="col-md-4 text-center mb-3">
                        <span class="material-symbols-outlined" style="font-size: 32px; color: #ffc107;">table_view</span>
                        <h6 style="margin: 10px 0; font-size: 12px;">3. Define Entities</h6>
                        <p style="font-size: 10px; color: var(--sap-text-muted);">Create data structures and forms</p>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn-sap" data-bs-dismiss="modal">
                    <span class="material-symbols-outlined">close</span>
                    Close
                </button>
                <a href="/custom-admin/" class="btn-sap btn-primary">
                    <span class="material-symbols-outlined">settings</span>
                    Open System Configuration
                </a>
            </div>
        </div>
    </div>
</div>
{% endif %}

{% endblock %}

{% block extra_js %}
<script>
    // Auto-refresh stats every 5 minutes
    setInterval(function() {
        // In a real application, you'd update stats via AJAX
        console.log('Auto-refresh stats...');
    }, 5 * 60 * 1000);
    
    // Show welcome modal for first-time users
    document.addEventListener('DOMContentLoaded', function() {
        {% if not favorite_modules and applications|length == 0 %}
        const welcomeModal = new bootstrap.Modal(document.getElementById('welcomeModal'));
        setTimeout(() => {
            welcomeModal.show();
        }, 1000);
        {% endif %}
        
        console.log('Dashboard loaded successfully');
    });
</script>
{% endblock %}

================
File: templates/entities/entity_detail.html
================
{% extends "base.html" %}

{% block title %}{{ entity_type.name }} Detail - Port Management System{% endblock %}

{% block content %}
<div class="content-header">
    <h1 class="content-title">{{ entity_type.name }} Detail</h1>
    <nav class="content-breadcrumb">
        <a href="{{ url_for('dashboard') }}">Dashboard</a>
        <span> / </span>
        <a href="{{ url_for('module_view', module_id=entity_type.module_id) }}">{{ entity_type.module.name }}</a>
        <span> / </span>
        <a href="{{ url_for('entity_list', entity_type_id=entity_type.id) }}">{{ entity_type.name }}</a>
        <span> / </span>
        <span>{{ instance_data.instance_code or instance_data.id }}</span>
    </nav>
</div>

<!-- Toolbar with Permission-based Buttons -->
<div class="toolbar">
    <div class="toolbar-section">
        <a href="{{ url_for('entity_list', entity_type_id=entity_type.id) }}" class="btn-sap">
            <span class="material-symbols-outlined">arrow_back</span>
            Back to List
        </a>
    </div>
    
    <div class="toolbar-separator"></div>
    
    <div class="toolbar-section">
        {% if permissions.can_update %}
        <a href="{{ url_for('entity_edit', entity_type_id=entity_type.id, instance_id=instance.id) }}" class="btn-sap btn-primary">
            <span class="material-symbols-outlined">edit</span>
            Edit
        </a>
        {% endif %}
        
        <button class="btn-sap" onclick="printRecord()">
            <span class="material-symbols-outlined">print</span>
            Print
        </button>
        
        <button class="btn-sap" onclick="refreshDetail()">
            <span class="material-symbols-outlined">refresh</span>
            Refresh
        </button>
        
        {% if permissions.can_delete %}
        <button class="btn-sap" style="color: #dc3545;" onclick="deleteRecord()">
            <span class="material-symbols-outlined">delete</span>
            Delete
        </button>
        {% endif %}
    </div>
</div>

<!-- Permissions Info Badge (for debugging/admin) -->
{% if current_user.username == 'admin' %}
<div class="alert-sap alert-info" style="font-size: 10px;">
    <strong>Your Permissions:</strong>
    Read: {{ '✓' if permissions.can_read else '✗' }} |
    Create: {{ '✓' if permissions.can_create else '✗' }} |
    Update: {{ '✓' if permissions.can_update else '✗' }} |
    Delete: {{ '✓' if permissions.can_delete else '✗' }}
</div>
{% endif %}

<!-- Main Detail Card -->
<div class="card-sap">
    <div class="card-header">
        <span class="material-symbols-outlined" style="margin-right: 5px;">{{ entity_type.icon or 'description' }}</span>
        {{ entity_type.name }} - {{ instance_data.instance_code or instance_data.id }}
        {% if instance_data.workflow_status %}
        <span class="badge bg-info" style="margin-left: 10px; font-size: 10px;">{{ instance_data.workflow_status }}</span>
        {% endif %}
    </div>
    <div class="card-body">
        <!-- System Information -->
        <div class="row mb-3">
            <div class="col-md-6">
                <small class="text-muted">Created: {{ instance_data.created_at | format_datetime }}</small>
            </div>
            <div class="col-md-6 text-end">
                <small class="text-muted">Last Updated: {{ instance_data.updated_at | format_datetime }}</small>
            </div>
        </div>
        
        <!-- Attribute Fields -->
        <div class="row">
            {% for field in form_fields %}
            {% if field.is_visible %}
            {% set attr_code = field.attribute_definition.code %}
            {% set attr_data = instance_data.attributes.get(attr_code) %}
            <div class="col-md-{{ 6 if form_fields|length > 6 else 12 }} mb-3">
                <div class="form-group">
                    <label class="form-label" style="font-weight: 600;">
                        {{ field.field_label or field.attribute_definition.name }}
                    </label>
                    <div style="padding: 6px 0; font-size: 12px;">
                        {% if attr_data and attr_data.value %}
                            {% if field.attribute_definition.data_type.value in ['DATE', 'DATETIME', 'TIMESTAMP'] %}
                                <span class="material-symbols-outlined" style="font-size: 14px; margin-right: 4px; color: var(--sap-blue);">event</span>
                                {{ attr_data.value | format_datetime }}
                            {% elif field.attribute_definition.data_type.value == 'DECIMAL' %}
                                <span class="material-symbols-outlined" style="font-size: 14px; margin-right: 4px; color: var(--sap-blue);">payments</span>
                                {{ attr_data.value | format_currency if 'amount' in attr_code.lower() or 'price' in attr_code.lower() else attr_data.value }}
                            {% elif field.attribute_definition.data_type.value == 'BOOLEAN' %}
                                <span class="material-symbols-outlined" style="font-size: 14px; margin-right: 4px; color: {{ 'green' if attr_data.value else 'red' }};">
                                    {{ 'check_circle' if attr_data.value else 'cancel' }}
                                </span>
                                {{ 'Yes' if attr_data.value else 'No' }}
                            {% else %}
                                <span class="material-symbols-outlined" style="font-size: 14px; margin-right: 4px; color: var(--sap-blue);">text_fields</span>
                                {{ attr_data.value }}
                            {% endif %}
                        {% else %}
                            <span style="color: var(--sap-text-muted); font-style: italic;">Not specified</span>
                        {% endif %}
                    </div>
                </div>
            </div>
            {% endif %}
            {% endfor %}
        </div>
    </div>
</div>

{% endblock %}

{% block extra_js %}
<script>
    function refreshDetail() {
        const btn = event.target.closest('button');
        const hideLoading = showLoading(btn);
        setTimeout(() => {
            hideLoading();
            window.location.reload();
        }, 1000);
    }
    
    function printRecord() {
        window.print();
    }
    
    function deleteRecord() {
        if (!confirm('Are you sure you want to delete this record? This action cannot be undone.')) {
            return;
        }
        
        fetch('{{ url_for('entity_delete', entity_type_id=entity_type.id, instance_id=instance.id) }}', {
            method: 'POST',
            headers: {
                'X-CSRFToken': getCSRFToken(),
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showToast('Record deleted successfully', 'success');
                setTimeout(() => {
                    window.location.href = '{{ url_for('entity_list', entity_type_id=entity_type.id) }}';
                }, 1000);
            } else {
                showToast(data.error || 'Failed to delete record', 'error');
            }
        })
        .catch(error => {
            showToast('Error deleting record: ' + error.message, 'error');
        });
    }
</script>

<style>
    @media print {
        .toolbar, .sidebar, .main-header, .nav-tabs-sap {
            display: none !important;
        }
        .main-content {
            margin-left: 0 !important;
            margin-top: 0 !important;
        }
        .card-sap {
            border: none !important;
            box-shadow: none !important;
        }
    }
</style>
{% endblock %}

================
File: templates/entities/entity_form.html
================
{% extends "base.html" %}

{% block title %}
    {{ "Create" if form_action == "create" else "Edit" }} {{ entity_type.name }} - Port Management System
{% endblock %}

{% block content %}
<div class="content-header">
    <h1 class="content-title">
        {{ "Create" if form_action == "create" else "Edit" }} {{ entity_type.name }}
    </h1>
    <nav class="content-breadcrumb">
        <a href="{{ url_for('dashboard') }}">Dashboard</a>
        <span> / </span>
        <a href="{{ url_for('module_view', module_id=entity_type.module_id) }}">{{ entity_type.module.name }}</a>
        <span> / </span>
        <a href="{{ url_for('entity_list', entity_type_id=entity_type.id) }}">{{ entity_type.name }}</a>
        <span> / </span>
        <span>{{ "Create" if form_action == "create" else "Edit" }}</span>
    </nav>
</div>

<!-- Toolbar -->
<div class="toolbar">
    <div class="toolbar-section">
        <a href="{{ url_for('entity_list', entity_type_id=entity_type.id) }}" class="btn-sap">
            <span class="material-symbols-outlined">arrow_back</span>
            Back to List
        </a>
    </div>
    
    {% if instance and form_action == "edit" %}
    <div class="toolbar-separator"></div>
    
    <div class="toolbar-section">
        <a href="{{ url_for('entity_detail', entity_type_id=entity_type.id, instance_id=instance.id) }}" class="btn-sap">
            <span class="material-symbols-outlined">visibility</span>
            View Details
        </a>
    </div>
    {% endif %}
</div>

<!-- Form Content -->
<div class="card-sap">
    <div class="card-header">
        <span class="material-symbols-outlined" style="margin-right: 5px;">{{ entity_type.icon or 'edit' }}</span>
        {{ "Create New" if form_action == "create" else "Edit" }} {{ entity_type.name }}
    </div>
    <div class="card-body">
        <form method="POST" class="form-sap" id="entityForm">
            <input type="hidden" name="csrf_token" value="{{ csrf_token() }}"/>
            
            {% if form_definition.layout_type.value == 'TWO_COLUMN' %}
            <div class="row">
                {% for field in form_fields %}
                {% if field.is_visible %}
                <div class="col-md-{{ 12 // 2 if form_definition.layout_type.value == 'TWO_COLUMN' else 12 }} mb-3">
                    {% include 'entities/field_render.html' %}
                </div>
                {% endif %}
                {% endfor %}
            </div>
            {% elif form_definition.layout_type.value == 'THREE_COLUMN' %}
            <div class="row">
                {% for field in form_fields %}
                {% if field.is_visible %}
                <div class="col-md-4 mb-3">
                    {% include 'entities/field_render.html' %}
                </div>
                {% endif %}
                {% endfor %}
            </div>
            {% else %}
            <!-- Single Column Layout -->
            {% for field in form_fields %}
            {% if field.is_visible %}
            <div class="mb-3">
                {% include 'entities/field_render.html' %}
            </div>
            {% endif %}
            {% endfor %}
            {% endif %}
            
            <div class="mt-4 pt-3" style="border-top: 1px solid var(--sap-border);">
                <button type="submit" class="btn-sap btn-primary" id="submitBtn">
                    <span class="material-symbols-outlined">save</span>
                    {{ "Create" if form_action == "create" else "Update" }}
                </button>
                <a href="{{ url_for('entity_list', entity_type_id=entity_type.id) }}" class="btn-sap" style="margin-left: 10px;">
                    <span class="material-symbols-outlined">cancel</span>
                    Cancel
                </a>
            </div>
        </form>
    </div>
</div>

{% endblock %}

{% block extra_js %}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const form = document.getElementById('entityForm');
        const submitBtn = document.getElementById('submitBtn');
        
        // Handle form submission
        form.addEventListener('submit', function(e) {
            // Show loading state
            const hideLoading = showLoading(submitBtn);
            
            // Basic client-side validation
            const requiredFields = form.querySelectorAll('[required]');
            let isValid = true;
            
            requiredFields.forEach(field => {
                if (!field.value.trim()) {
                    isValid = false;
                    field.classList.add('is-invalid');
                } else {
                    field.classList.remove('is-invalid');
                }
            });
            
            if (!isValid) {
                e.preventDefault();
                hideLoading();
                alert('Please fill in all required fields.');
                return false;
            }
            
            // Form will submit normally after this
        });
        
        // Remove validation styling on input
        const inputs = form.querySelectorAll('input, select, textarea');
        inputs.forEach(input => {
            input.addEventListener('input', function() {
                this.classList.remove('is-invalid');
            });
        });
        
        // Auto-generate instance code if needed (for create form)
        {% if form_action == 'create' %}
        const entityTypeCode = '{{ entity_type.code }}';
        const instanceCodeField = document.querySelector('[name="attr_INSTANCE_CODE"]');
        
        if (instanceCodeField && !instanceCodeField.value) {
            // Generate a simple instance code
            const timestamp = new Date().getTime().toString().slice(-6);
            instanceCodeField.value = entityTypeCode + '_' + timestamp;
        }
        {% endif %}
    });
    
    // Field-specific handlers
    function handleLookupChange(selectElement) {
        // Handle cascading lookups or dependent fields
        console.log('Lookup changed:', selectElement.name, selectElement.value);
    }
    
    // Add change handlers to select elements
    document.querySelectorAll('select').forEach(select => {
        select.addEventListener('change', function() {
            handleLookupChange(this);
        });
    });
</script>

<style>
    .form-control.is-invalid {
        border-color: #dc3545;
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' fill='none' stroke='%23dc3545' viewBox='0 0 12 12'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath d='m5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
        background-repeat: no-repeat;
        background-position: right 8px center;
        background-size: 12px 12px;
    }
    
    .form-control:focus {
        border-color: var(--sap-blue);
        box-shadow: 0 0 0 0.2rem rgba(0, 112, 242, 0.25);
    }
    
    .form-check-input:focus {
        border-color: var(--sap-blue);
        box-shadow: 0 0 0 0.2rem rgba(0, 112, 242, 0.25);
    }
</style>
{% endblock %}

================
File: templates/entities/entity_list.html
================
{% extends "base.html" %}

{% block title %}{{ entity_type.name }} - Port Management System{% endblock %}

{% block content %}
<div class="content-header">
    <h1 class="content-title">{{ entity_type.name }}</h1>
    <nav class="content-breadcrumb">
        <a href="{{ url_for('dashboard') }}">Dashboard</a>
        <span> / </span>
        <a href="{{ url_for('module_view', module_id=entity_type.module_id) }}">{{ entity_type.module.name }}</a>
        <span> / </span>
        <span>{{ entity_type.name }}</span>
    </nav>
</div>

<!-- Toolbar -->
<div class="toolbar">
    <div class="toolbar-section">
        <button class="btn-sap" onclick="window.history.back()">
            <span class="material-symbols-outlined">arrow_back</span>
            Back
        </button>
    </div>
    
    <div class="toolbar-separator"></div>
    
    <div class="toolbar-section">
        {% if permissions.can_create %}
        <a href="{{ url_for('entity_create', entity_type_id=entity_type.id) }}" class="btn-sap btn-primary">
            <span class="material-symbols-outlined">add</span>
            Create New
        </a>
        {% endif %}
        
        <button class="btn-sap" onclick="exportData()">
            <span class="material-symbols-outlined">download</span>
            Export
        </button>
        <button class="btn-sap" onclick="refreshList()">
            <span class="material-symbols-outlined">refresh</span>
            Refresh
        </button>
    </div>
    
    <div class="toolbar-separator"></div>
    
    <div class="toolbar-section">
        <div class="input-group" style="width: 250px;">
            <input type="text" class="form-control" placeholder="Search..." id="searchInput" style="font-size: 11px;">
            <button class="btn-sap" onclick="performSearch()">
                <span class="material-symbols-outlined">search</span>
            </button>
        </div>
    </div>
</div>

<!-- Permissions Info Badge (for debugging/admin) -->
{% if current_user.username == 'admin' %}
<div class="alert-sap alert-info" style="font-size: 10px;">
    <strong>Your Permissions:</strong>
    Read: {{ '✓' if permissions.can_read else '✗' }} |
    Create: {{ '✓' if permissions.can_create else '✗' }} |
    Update: {{ '✓' if permissions.can_update else '✗' }} |
    Delete: {{ '✓' if permissions.can_delete else '✗' }}
</div>
{% endif %}

<!-- List Content -->
<div class="card-sap">
    <div class="card-header">
        <span class="material-symbols-outlined" style="margin-right: 5px;">{{ entity_type.icon or 'table_view' }}</span>
        {{ entity_type.name }} List
        {% if pagination %}
        <span style="margin-left: 10px; font-size: 11px; color: var(--sap-text-muted);">
            ({{ pagination.total }} record{{ 's' if pagination.total != 1 else '' }})
        </span>
        {% endif %}
    </div>
    <div class="card-body" style="padding: 0;">
        {% if instances_data %}
        <div class="table-responsive">
            <table class="table table-sap table-hover">
                <thead>
                    <tr>
                        <th style="width: 40px;">#</th>
                        {% for field in form_fields %}
                        {% if field.is_visible %}
                        <th>
                            {{ field.field_label or field.attribute_definition.name }}
                            {% if field.is_sortable %}
                            <span class="material-symbols-outlined" style="font-size: 12px; cursor: pointer;">unfold_more</span>
                            {% endif %}
                        </th>
                        {% endif %}
                        {% endfor %}
                        {% if permissions.can_update or permissions.can_delete %}
                        <th style="width: 100px;">Actions</th>
                        {% endif %}
                    </tr>
                </thead>
                <tbody>
                    {% for instance in instances_data %}
                    <tr style="cursor: pointer;" onclick="handleTableRowClick('{{ url_for('entity_detail', entity_type_id=entity_type.id, instance_id=instance.id) }}')">
                        <td>{{ loop.index + ((pagination.page - 1) * pagination.per_page) if pagination else loop.index }}</td>
                        {% for field in form_fields %}
                        {% if field.is_visible %}
                        <td>
                            {% set attr_code = field.attribute_definition.code %}
                            {% set attr_data = instance.attributes.get(attr_code) %}
                            {% if attr_data and attr_data.value %}
                                {% if field.attribute_definition.data_type.value in ['DATE', 'DATETIME', 'TIMESTAMP'] %}
                                    {{ attr_data.value | format_datetime }}
                                {% elif field.attribute_definition.data_type.value == 'DECIMAL' %}
                                    {{ attr_data.value | format_currency if 'amount' in attr_code.lower() or 'price' in attr_code.lower() else attr_data.value }}
                                {% else %}
                                    {{ attr_data.value }}
                                {% endif %}
                            {% else %}
                                <span style="color: var(--sap-text-muted); font-style: italic;">-</span>
                            {% endif %}
                        </td>
                        {% endif %}
                        {% endfor %}
                        {% if permissions.can_update or permissions.can_delete %}
                        <td onclick="event.stopPropagation();">
                            <div class="btn-group" role="group">
                                <a href="{{ url_for('entity_detail', entity_type_id=entity_type.id, instance_id=instance.id) }}" 
                                   class="btn-sap" style="padding: 2px 6px;" title="View Details">
                                    <span class="material-symbols-outlined" style="font-size: 12px;">visibility</span>
                                </a>
                                {% if permissions.can_update %}
                                <a href="{{ url_for('entity_edit', entity_type_id=entity_type.id, instance_id=instance.id) }}" 
                                   class="btn-sap" style="padding: 2px 6px;" title="Edit">
                                    <span class="material-symbols-outlined" style="font-size: 12px;">edit</span>
                                </a>
                                {% endif %}
                                {% if permissions.can_delete %}
                                <button onclick="deleteEntity({{ instance.id }})" 
                                        class="btn-sap" style="padding: 2px 6px; color: #dc3545;" title="Delete">
                                    <span class="material-symbols-outlined" style="font-size: 12px;">delete</span>
                                </button>
                                {% endif %}
                            </div>
                        </td>
                        {% endif %}
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
        
        <!-- Pagination -->
        {% if pagination and pagination.pages > 1 %}
        <div style="padding: 15px; border-top: 1px solid var(--sap-border);">
            <nav>
                <ul class="pagination pagination-sm justify-content-center" style="margin: 0;">
                    {% if pagination.has_prev %}
                    <li class="page-item">
                        <a class="page-link" href="{{ url_for('entity_list', entity_type_id=entity_type.id, page=pagination.prev_num) }}">
                            <span class="material-symbols-outlined" style="font-size: 14px;">chevron_left</span>
                        </a>
                    </li>
                    {% endif %}
                    
                    {% for page_num in pagination.iter_pages() %}
                        {% if page_num %}
                            {% if page_num != pagination.page %}
                            <li class="page-item">
                                <a class="page-link" href="{{ url_for('entity_list', entity_type_id=entity_type.id, page=page_num) }}">{{ page_num }}</a>
                            </li>
                            {% else %}
                            <li class="page-item active">
                                <span class="page-link">{{ page_num }}</span>
                            </li>
                            {% endif %}
                        {% else %}
                        <li class="page-item disabled">
                            <span class="page-link">...</span>
                        </li>
                        {% endif %}
                    {% endfor %}
                    
                    {% if pagination.has_next %}
                    <li class="page-item">
                        <a class="page-link" href="{{ url_for('entity_list', entity_type_id=entity_type.id, page=pagination.next_num) }}">
                            <span class="material-symbols-outlined" style="font-size: 14px;">chevron_right</span>
                        </a>
                    </li>
                    {% endif %}
                </ul>
            </nav>
            
            <div class="text-center mt-2" style="font-size: 11px; color: var(--sap-text-muted);">
                Showing {{ (pagination.page - 1) * pagination.per_page + 1 }} to 
                {{ pagination.page * pagination.per_page if pagination.page * pagination.per_page < pagination.total else pagination.total }} 
                of {{ pagination.total }} entries
            </div>
        </div>
        {% endif %}
        
        {% else %}
        <!-- Empty State -->
        <div class="text-center" style="padding: 60px 20px;">
            <span class="material-symbols-outlined" style="font-size: 64px; opacity: 0.3; color: var(--sap-text-muted);">{{ entity_type.icon or 'table_view' }}</span>
            <h5 style="margin-top: 15px; font-size: 14px; color: var(--sap-text-muted);">No Records Found</h5>
            <p style="font-size: 11px; color: var(--sap-text-muted); margin-bottom: 20px;">
                There are no {{ entity_type.name.lower() }} records to display.
            </p>
            {% if permissions.can_create %}
            <a href="{{ url_for('entity_create', entity_type_id=entity_type.id) }}" class="btn-sap btn-primary">
                <span class="material-symbols-outlined">add</span>
                Create First Record
            </a>
            {% endif %}
        </div>
        {% endif %}
    </div>
</div>

{% endblock %}

{% block extra_js %}
<script>
    function refreshList() {
        const btn = event.target.closest('button');
        const hideLoading = showLoading(btn);
        setTimeout(() => {
            hideLoading();
            window.location.reload();
        }, 1000);
    }
    
    function exportData() {
        const btn = event.target.closest('button');
        const hideLoading = showLoading(btn);
        setTimeout(() => {
            hideLoading();
            alert('Export functionality would be implemented here');
        }, 1000);
    }
    
    function performSearch() {
        const searchTerm = document.getElementById('searchInput').value;
        const currentUrl = new URL(window.location.href);
        if (searchTerm.trim()) {
            currentUrl.searchParams.set('search', searchTerm);
        } else {
            currentUrl.searchParams.delete('search');
        }
        window.location.href = currentUrl.toString();
    }
    
    function deleteEntity(instanceId) {
        if (!confirm('Are you sure you want to delete this record? This action cannot be undone.')) {
            return;
        }
        
        fetch(`{{ url_for('entity_delete', entity_type_id=entity_type.id, instance_id=0) }}`.replace('/0', `/${instanceId}`), {
            method: 'POST',
            headers: {
                'X-CSRFToken': getCSRFToken(),
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showToast('Record deleted successfully', 'success');
                setTimeout(() => window.location.reload(), 1000);
            } else {
                showToast(data.error || 'Failed to delete record', 'error');
            }
        })
        .catch(error => {
            showToast('Error deleting record: ' + error.message, 'error');
        });
    }
    
    document.getElementById('searchInput').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            performSearch();
        }
    });
    
    document.addEventListener('DOMContentLoaded', function() {
        const urlParams = new URLSearchParams(window.location.search);
        const searchTerm = urlParams.get('search');
        if (searchTerm) {
            document.getElementById('searchInput').value = searchTerm;
        }
    });
</script>
{% endblock %}

================
File: templates/entities/field_render.html
================
<!-- templates/entities/field_render.html -->
<!-- Field Rendering Template for Entity Forms -->

{% set field_name = "attr_" + field.attribute_definition.code %}
{% set field_value = current_values.get(field.attribute_definition.code) if current_values else None %}

<div class="form-group">
    <label for="{{ field_name }}" class="form-label">
        {{ field.field_label or field.attribute_definition.name }}
        {% if field.is_required or field.attribute_definition.is_required %}
        <span style="color: red;">*</span>
        {% endif %}
    </label>
    
    {% if field.field_type.value == 'SELECT' %}
        <select class="form-control" 
                id="{{ field_name }}" 
                name="{{ field_name }}"
                {% if field.is_required or field.attribute_definition.is_required %}required{% endif %}
                {% if not field.is_editable %}disabled{% endif %}>
            <option value="">Select...</option>
                {% if lookup_data.get(field.attribute_definition.code) %}
                    {% for option in lookup_data.get(field.attribute_definition.code, []) %}
                        <option value="{{ option.value }}" 
                                {% if field_value == option.value %}selected{% endif %}>
                            {{ option.label }}
                        </option>
                    {% endfor %}
                {% endif %}
        </select>
    
    {% elif field.field_type.value == 'MULTISELECT' %}
        <select class="form-control" 
                id="{{ field_name }}" 
                name="{{ field_name }}"
                multiple
                {% if field.is_required or field.attribute_definition.is_required %}required{% endif %}
                {% if not field.is_editable %}disabled{% endif %}>
                {% if lookup_data.get(field.attribute_definition.code) %}
                    {% for option in lookup_data.get(field.attribute_definition.code, []) %}
                        <option value="{{ option.value }}" 
                                {% if field_value == option.value %}selected{% endif %}>
                            {{ option.label }}
                        </option>
                    {% endfor %}
                {% endif %}
        </select>
    
    {% elif field.field_type.value == 'TEXTAREA' %}
        <textarea class="form-control" 
                  id="{{ field_name }}" 
                  name="{{ field_name }}"
                  rows="3"
                  placeholder="{{ field.placeholder_text or '' }}"
                  {% if field.is_required or field.attribute_definition.is_required %}required{% endif %}
                  {% if not field.is_editable %}readonly{% endif %}>{{ field_value or '' }}</textarea>
    
    {% elif field.field_type.value == 'CHECKBOX' %}
        <div class="form-check">
            <input class="form-check-input" 
                   type="checkbox" 
                   id="{{ field_name }}" 
                   name="{{ field_name }}"
                   value="true"
                   {% if field_value %}checked{% endif %}
                   {% if not field.is_editable %}disabled{% endif %}>
            <label class="form-check-label" for="{{ field_name }}">
                {{ field.help_text or "Yes" }}
            </label>
        </div>
    
    {% elif field.field_type.value == 'PASSWORD' %}
        <input type="password" 
               class="form-control" 
               id="{{ field_name }}" 
               name="{{ field_name }}"
               placeholder="{{ field.placeholder_text or '' }}"
               {% if field.is_required or field.attribute_definition.is_required %}required{% endif %}
               {% if not field.is_editable %}readonly{% endif %}>
    
    {% elif field.field_type.value == 'EMAIL' %}
        <input type="email" 
               class="form-control" 
               id="{{ field_name }}" 
               name="{{ field_name }}"
               value="{{ field_value or '' }}"
               placeholder="{{ field.placeholder_text or '' }}"
               {% if field.is_required or field.attribute_definition.is_required %}required{% endif %}
               {% if not field.is_editable %}readonly{% endif %}>
    
    {% elif field.field_type.value == 'URL' %}
        <input type="url" 
               class="form-control" 
               id="{{ field_name }}" 
               name="{{ field_name }}"
               value="{{ field_value or '' }}"
               placeholder="{{ field.placeholder_text or '' }}"
               {% if field.is_required or field.attribute_definition.is_required %}required{% endif %}
               {% if not field.is_editable %}readonly{% endif %}>
    
    {% elif field.field_type.value == 'DATE' %}
        <input type="date" 
               class="form-control" 
               id="{{ field_name }}" 
               name="{{ field_name }}"
               value="{{ field_value.strftime('%Y-%m-%d') if field_value else '' }}"
               {% if field.is_required or field.attribute_definition.is_required %}required{% endif %}
               {% if not field.is_editable %}readonly{% endif %}>
    
    {% elif field.field_type.value == 'DATETIME' %}
        <input type="datetime-local" 
               class="form-control" 
               id="{{ field_name }}" 
               name="{{ field_name }}"
               value="{{ field_value.strftime('%Y-%m-%dT%H:%M') if field_value else '' }}"
               {% if field.is_required or field.attribute_definition.is_required %}required{% endif %}
               {% if not field.is_editable %}readonly{% endif %}>
    
    {% elif field.field_type.value == 'TIME' %}
        <input type="time" 
               class="form-control" 
               id="{{ field_name }}" 
               name="{{ field_name }}"
               value="{{ field_value.strftime('%H:%M') if field_value else '' }}"
               {% if field.is_required or field.attribute_definition.is_required %}required{% endif %}
               {% if not field.is_editable %}readonly{% endif %}>
    
    {% elif field.field_type.value == 'NUMBER' %}
        {% if field.attribute_definition.data_type.value in ['INT', 'BIGINT'] %}
        <input type="number" 
               class="form-control" 
               id="{{ field_name }}" 
               name="{{ field_name }}"
               value="{{ field_value or '' }}"
               placeholder="{{ field.placeholder_text or '' }}"
               {% if field.is_required or field.attribute_definition.is_required %}required{% endif %}
               {% if not field.is_editable %}readonly{% endif %}>
        {% endif %}
    
    {% elif field.field_type.value == 'DECIMAL' %}
        <input type="number" 
               step="0.01" 
               class="form-control" 
               id="{{ field_name }}" 
               name="{{ field_name }}"
               value="{{ field_value or '' }}"
               placeholder="{{ field.placeholder_text or '' }}"
               {% if field.is_required or field.attribute_definition.is_required %}required{% endif %}
               {% if not field.is_editable %}readonly{% endif %}>
    
    {% elif field.field_type.value == 'FILE' %}
        <input type="file" 
               class="form-control" 
               id="{{ field_name }}" 
               name="{{ field_name }}"
               {% if field.is_required or field.attribute_definition.is_required %}required{% endif %}
               {% if not field.is_editable %}disabled{% endif %}>
    
    {% elif field.field_type.value == 'IMAGE' %}
        <input type="file" 
               class="form-control" 
               id="{{ field_name }}" 
               name="{{ field_name }}"
               accept="image/*"
               {% if field.is_required or field.attribute_definition.is_required %}required{% endif %}
               {% if not field.is_editable %}disabled{% endif %}>
    
    {% elif field.field_type.value == 'RADIO' %}
        <div class="form-radio-group">
            {% if dropdown_data.get(field.attribute_definition.code) %}
                {% for option in dropdown_data[field.attribute_definition.code] %}
                <div class="form-check">
                    <input class="form-check-input" 
                           type="radio" 
                           id="{{ field_name }}_{{ loop.index }}" 
                           name="{{ field_name }}"
                           value="{{ option.value }}"
                           {% if field_value == option.value %}checked{% endif %}
                           {% if not field.is_editable %}disabled{% endif %}>
                    <label class="form-check-label" for="{{ field_name }}_{{ loop.index }}">
                        {{ option.label }}
                    </label>
                </div>
                {% endfor %}
            {% endif %}
        </div>
    
    {% else %}
        <!-- Default: TEXT input based on data type -->
        {% if field.attribute_definition.data_type.value in ['INT', 'BIGINT'] %}
        <input type="number" 
               class="form-control" 
               id="{{ field_name }}" 
               name="{{ field_name }}"
               value="{{ field_value or '' }}"
               placeholder="{{ field.placeholder_text or '' }}"
               {% if field.is_required or field.attribute_definition.is_required %}required{% endif %}
               {% if not field.is_editable %}readonly{% endif %}>
        
        {% elif field.attribute_definition.data_type.value == 'DECIMAL' %}
        <input type="number" 
               step="0.01" 
               class="form-control" 
               id="{{ field_name }}" 
               name="{{ field_name }}"
               value="{{ field_value or '' }}"
               placeholder="{{ field.placeholder_text or '' }}"
               {% if field.is_required or field.attribute_definition.is_required %}required{% endif %}
               {% if not field.is_editable %}readonly{% endif %}>
        
        {% elif field.attribute_definition.data_type.value in ['DATE', 'DATETIME'] %}
        <input type="{{ 'datetime-local' if field.attribute_definition.data_type.value == 'DATETIME' else 'date' }}" 
               class="form-control" 
               id="{{ field_name }}" 
               name="{{ field_name }}"
               value="{{ field_value.strftime('%Y-%m-%dT%H:%M' if field.attribute_definition.data_type.value == 'DATETIME' else '%Y-%m-%d') if field_value else '' }}"
               {% if field.is_required or field.attribute_definition.is_required %}required{% endif %}
               {% if not field.is_editable %}readonly{% endif %}>
        
        {% elif field.attribute_definition.data_type.value == 'BOOLEAN' %}
        <div class="form-check">
            <input class="form-check-input" 
                   type="checkbox" 
                   id="{{ field_name }}" 
                   name="{{ field_name }}"
                   value="true"
                   {% if field_value %}checked{% endif %}
                   {% if not field.is_editable %}disabled{% endif %}>
            <label class="form-check-label" for="{{ field_name }}">
                {{ field.help_text or "Yes" }}
            </label>
        </div>
        
        {% else %}
        <!-- Default VARCHAR/TEXT input -->
        <input type="text" 
               class="form-control" 
               id="{{ field_name }}" 
               name="{{ field_name }}"
               value="{{ field_value or '' }}"
               placeholder="{{ field.placeholder_text or '' }}"
               {% if field.attribute_definition.max_length %}maxlength="{{ field.attribute_definition.max_length }}"{% endif %}
               {% if field.is_required or field.attribute_definition.is_required %}required{% endif %}
               {% if not field.is_editable %}readonly{% endif %}>
        {% endif %}
    {% endif %}
    
    {% if field.help_text %}
    <small class="form-text text-muted">{{ field.help_text }}</small>
    {% endif %}
</div>

================
File: templates/errors/404.html
================
{% extends "base.html" %}

{% block title %}Page Not Found - Port Management System{% endblock %}

{% block content %}
<div class="text-center" style="padding: 60px 20px;">
    <span class="material-symbols-outlined" style="font-size: 120px; opacity: 0.3; color: var(--sap-text-muted);">error</span>
    <h1 style="font-size: 48px; font-weight: 600; margin: 20px 0; color: var(--sap-text);">404</h1>
    <h2 style="font-size: 24px; font-weight: 400; margin-bottom: 15px; color: var(--sap-text-muted);">Page Not Found</h2>
    <p style="font-size: 14px; color: var(--sap-text-muted); margin-bottom: 30px; max-width: 500px; margin-left: auto; margin-right: auto;">
        The page you are looking for might have been removed, had its name changed, or is temporarily unavailable.
    </p>
    
    <div style="margin-top: 30px;">
        <a href="{{ url_for('dashboard') }}" class="btn-sap btn-primary">
            <span class="material-symbols-outlined">home</span>
            Go to Dashboard
        </a>
        <button class="btn-sap" onclick="window.history.back()" style="margin-left: 10px;">
            <span class="material-symbols-outlined">arrow_back</span>
            Go Back
        </button>
    </div>
</div>
{% endblock %}

================
File: templates/errors/500.html
================
{% extends "base.html" %}

{% block title %}Internal Server Error - Port Management System{% endblock %}

{% block content %}
<div class="text-center" style="padding: 60px 20px;">
    <span class="material-symbols-outlined" style="font-size: 120px; opacity: 0.3; color: var(--sap-text-muted);">report_problem</span>
    <h1 style="font-size: 48px; font-weight: 600; margin: 20px 0; color: var(--sap-text);">500</h1>
    <h2 style="font-size: 24px; font-weight: 400; margin-bottom: 15px; color: var(--sap-text-muted);">Internal Server Error</h2>
    <p style="font-size: 14px; color: var(--sap-text-muted); margin-bottom: 30px; max-width: 500px; margin-left: auto; margin-right: auto;">
        Something went wrong on our servers. We're working to fix this issue. Please try again later.
    </p>
    
    <div style="margin-top: 30px;">
        <a href="{{ url_for('dashboard') }}" class="btn-sap btn-primary">
            <span class="material-symbols-outlined">home</span>
            Go to Dashboard
        </a>
        <button class="btn-sap" onclick="window.location.reload()" style="margin-left: 10px;">
            <span class="material-symbols-outlined">refresh</span>
            Try Again
        </button>
    </div>
</div>
{% endblock %}

================
File: templates/modules/module_view.html
================
{% extends "base.html" %}

{% block title %}{{ module.name }} - Port Management System{% endblock %}

{% block content %}
<div class="content-header">
    <h1 class="content-title">{{ module.name }}</h1>
    <nav class="content-breadcrumb">
        <a href="{{ url_for('dashboard') }}">Dashboard</a>
        <span> / </span>
        <span>{{ module.application.name }}</span>
        <span> / </span>
        <span>{{ module.name }}</span>
    </nav>
</div>

<!-- Toolbar -->
<div class="toolbar">
    <div class="toolbar-section">
        <button class="btn-sap" onclick="window.history.back()">
            <span class="material-symbols-outlined">arrow_back</span>
            Back
        </button>
    </div>
    
    <div class="toolbar-separator"></div>
    
    <div class="toolbar-section">
        <button class="btn-sap" onclick="toggleFavorite(event, {{ module.id }})">
            <span class="material-symbols-outlined">star_border</span>
            Add to Favorites
        </button>
        <button class="btn-sap" onclick="refreshModule()">
            <span class="material-symbols-outlined">refresh</span>
            Refresh
        </button>
    </div>
</div>

<!-- Module Description -->
{% if module.description %}
<div class="card-sap mb-3">
    <div class="card-body">
        <p style="margin: 0; font-size: 12px; color: var(--sap-text-muted);">
            {{ module.description }}
        </p>
    </div>
</div>
{% endif %}

<!-- Access Control Note -->
{% if entity_types|length == 0 %}
<div class="alert-sap alert-warning">
    <span class="material-symbols-outlined" style="margin-right: 5px;">info</span>
    You do not have access to view any entities in this module. Please contact your administrator to request access.
</div>
{% endif %}

<!-- Entity Types Grid -->
{% if entity_types %}
<div class="card-sap">
    <div class="card-header">
        <span class="material-symbols-outlined" style="margin-right: 5px;">table_view</span>
        Entity Types ({{ entity_types|length }} accessible)
    </div>
    <div class="card-body">
        <div class="module-grid">
            {% for entity_type in entity_types %}
            <a href="{{ url_for('entity_list', entity_type_id=entity_type.id) }}" class="module-card">
                <div class="module-icon">
                    <span class="material-symbols-outlined">{{ entity_type.icon or 'table_view' }}</span>
                </div>
                <div class="module-name">{{ entity_type.name }}</div>
                <div class="module-description">{{ entity_type.description or '' }}</div>
                
                <!-- Entity Type Info -->
                <div style="margin-top: 8px; font-size: 10px; color: var(--sap-text-muted); display: flex; justify-content: space-between; align-items: center;">
                    <div>
                        {% if entity_type.is_master %}
                        <span class="badge bg-info" style="font-size: 9px;">Master</span>
                        {% endif %}
                        {% if entity_type.is_transactional %}
                        <span class="badge bg-success" style="font-size: 9px;">Transactional</span>
                        {% endif %}
                    </div>
                    <div style="margin-left: auto;">
                        {% set instance_count = entity_type.entity_instances.filter_by(is_active=True).count() %}
                        <span class="material-symbols-outlined" style="font-size: 12px; margin-right: 2px;">description</span>
                        {{ instance_count }}
                    </div>
                </div>
                
                <!-- Permission Indicators -->
                {% set perms = get_permissions(entity_type.id) %}
                <div style="margin-top: 5px; font-size: 9px; color: var(--sap-text-muted);">
                    <span title="Read" style="color: {{ '#28a745' if perms.can_read else '#ccc' }};">●</span>
                    <span title="Create" style="color: {{ '#007bff' if perms.can_create else '#ccc' }};">●</span>
                    <span title="Update" style="color: {{ '#ffc107' if perms.can_update else '#ccc' }};">●</span>
                    <span title="Delete" style="color: {{ '#dc3545' if perms.can_delete else '#ccc' }};">●</span>
                </div>
            </a>
            {% endfor %}
        </div>
    </div>
</div>
{% endif %}

<!-- Module Statistics -->
<div class="row mt-4">
    <div class="col-md-3">
        <div class="card-sap">
            <div class="card-body text-center">
                <h4 style="font-size: 20px; font-weight: 600; margin-bottom: 5px; color: var(--sap-blue);">
                    {{ entity_types|length }}
                </h4>
                <p style="font-size: 11px; color: var(--sap-text-muted); margin: 0;">Accessible Entities</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card-sap">
            <div class="card-body text-center">
                <h4 style="font-size: 20px; font-weight: 600; margin-bottom: 5px; color: #28a745;">
                    {% set total_instances = 0 %}
                    {% for entity_type in entity_types %}
                        {% set total_instances = total_instances + entity_type.entity_instances.filter_by(is_active=True).count() %}
                    {% endfor %}
                    {{ total_instances }}
                </h4>
                <p style="font-size: 11px; color: var(--sap-text-muted); margin: 0;">Total Records</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card-sap">
            <div class="card-body text-center">
                <h4 style="font-size: 20px; font-weight: 600; margin-bottom: 5px; color: #ffc107;">
                    {% set master_entities = entity_types|selectattr('is_master')|list|length %}
                    {{ master_entities }}
                </h4>
                <p style="font-size: 11px; color: var(--sap-text-muted); margin: 0;">Master Entities</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card-sap">
            <div class="card-body text-center">
                <h4 style="font-size: 20px; font-weight: 600; margin-bottom: 5px; color: #17a2b8;">
                    {% set transactional_entities = entity_types|selectattr('is_transactional')|list|length %}
                    {{ transactional_entities }}
                </h4>
                <p style="font-size: 11px; color: var(--sap-text-muted); margin: 0;">Transactional</p>
            </div>
        </div>
    </div>
</div>

{% endblock %}

{% block extra_js %}
<script>
    function refreshModule() {
        const btn = event.target.closest('button');
        const hideLoading = showLoading(btn);
        setTimeout(() => {
            hideLoading();
            window.location.reload();
        }, 1000);
    }
    
    // Update favorite star state on page load
    document.addEventListener('DOMContentLoaded', function() {
        {% if favorite_modules %}
        const favoriteModules = {{ (favorite_modules | map(attribute='id') | list) | tojson }};
        {% else %}
        const favoriteModules = [];
        {% endif %}
        const moduleId = {{ module.id }};
        
        if (favoriteModules.includes(moduleId)) {
            const starBtn = document.querySelector('[onclick*="toggleFavorite"]');
            if (starBtn) {
                const icon = starBtn.querySelector('.material-symbols-outlined');
                icon.textContent = 'star';
                starBtn.innerHTML = starBtn.innerHTML.replace('Add to Favorites', 'Remove from Favorites');
            }
        }
    });
</script>
{% endblock %}
